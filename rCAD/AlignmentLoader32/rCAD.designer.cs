#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlignmentLoader
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rCAD")]
	public partial class rCADDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCellLocationInfo(CellLocationInfo instance);
    partial void UpdateCellLocationInfo(CellLocationInfo instance);
    partial void DeleteCellLocationInfo(CellLocationInfo instance);
    partial void InsertNextAlnID(NextAlnID instance);
    partial void UpdateNextAlnID(NextAlnID instance);
    partial void DeleteNextAlnID(NextAlnID instance);
    partial void InsertNextSeqID(NextSeqID instance);
    partial void UpdateNextSeqID(NextSeqID instance);
    partial void DeleteNextSeqID(NextSeqID instance);
    partial void InsertSecondaryStructureExtentType(SecondaryStructureExtentType instance);
    partial void UpdateSecondaryStructureExtentType(SecondaryStructureExtentType instance);
    partial void DeleteSecondaryStructureExtentType(SecondaryStructureExtentType instance);
    partial void InsertSequenceAccession(SequenceAccession instance);
    partial void UpdateSequenceAccession(SequenceAccession instance);
    partial void DeleteSequenceAccession(SequenceAccession instance);
    partial void InsertSequenceMain(SequenceMain instance);
    partial void UpdateSequenceMain(SequenceMain instance);
    partial void DeleteSequenceMain(SequenceMain instance);
    partial void InsertSequenceType(SequenceType instance);
    partial void UpdateSequenceType(SequenceType instance);
    partial void DeleteSequenceType(SequenceType instance);
    partial void InsertTaxonomyName(TaxonomyName instance);
    partial void UpdateTaxonomyName(TaxonomyName instance);
    partial void DeleteTaxonomyName(TaxonomyName instance);
    #endregion
		
		public rCADDataContext() : 
				base(global::AlignmentLoader.Properties.Settings.Default.rCADConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public rCADDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rCADDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rCADDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rCADDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CellLocationInfo> CellLocationInfos
		{
			get
			{
				return this.GetTable<CellLocationInfo>();
			}
		}
		
		public System.Data.Linq.Table<NextAlnID> NextAlnIDs
		{
			get
			{
				return this.GetTable<NextAlnID>();
			}
		}
		
		public System.Data.Linq.Table<NextSeqID> NextSeqIDs
		{
			get
			{
				return this.GetTable<NextSeqID>();
			}
		}
		
		public System.Data.Linq.Table<SecondaryStructureExtentType> SecondaryStructureExtentTypes
		{
			get
			{
				return this.GetTable<SecondaryStructureExtentType>();
			}
		}
		
		public System.Data.Linq.Table<SequenceAccession> SequenceAccessions
		{
			get
			{
				return this.GetTable<SequenceAccession>();
			}
		}
		
		public System.Data.Linq.Table<SequenceMain> SequenceMains
		{
			get
			{
				return this.GetTable<SequenceMain>();
			}
		}
		
		public System.Data.Linq.Table<SequenceType> SequenceTypes
		{
			get
			{
				return this.GetTable<SequenceType>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyName> TaxonomyNames
		{
			get
			{
				return this.GetTable<TaxonomyName>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CellLocationInfo")]
	public partial class CellLocationInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _LocationID;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(byte value);
    partial void OnLocationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CellLocationInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NextAlnID")]
	public partial class NextAlnID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlnID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlnIDChanging(int value);
    partial void OnAlnIDChanged();
    #endregion
		
		public NextAlnID()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlnID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlnID
		{
			get
			{
				return this._AlnID;
			}
			set
			{
				if ((this._AlnID != value))
				{
					this.OnAlnIDChanging(value);
					this.SendPropertyChanging();
					this._AlnID = value;
					this.SendPropertyChanged("AlnID");
					this.OnAlnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NextSeqID")]
	public partial class NextSeqID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeqID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqIDChanging(int value);
    partial void OnSeqIDChanged();
    #endregion
		
		public NextSeqID()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeqID
		{
			get
			{
				return this._SeqID;
			}
			set
			{
				if ((this._SeqID != value))
				{
					this.OnSeqIDChanging(value);
					this.SendPropertyChanging();
					this._SeqID = value;
					this.SendPropertyChanged("SeqID");
					this.OnSeqIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecondaryStructureExtentTypes")]
	public partial class SecondaryStructureExtentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ExtentTypeID;
		
		private string _ExtentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtentTypeIDChanging(byte value);
    partial void OnExtentTypeIDChanged();
    partial void OnExtentTypeChanging(string value);
    partial void OnExtentTypeChanged();
    #endregion
		
		public SecondaryStructureExtentType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtentTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ExtentTypeID
		{
			get
			{
				return this._ExtentTypeID;
			}
			set
			{
				if ((this._ExtentTypeID != value))
				{
					this.OnExtentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ExtentTypeID = value;
					this.SendPropertyChanged("ExtentTypeID");
					this.OnExtentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtentType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ExtentType
		{
			get
			{
				return this._ExtentType;
			}
			set
			{
				if ((this._ExtentType != value))
				{
					this.OnExtentTypeChanging(value);
					this.SendPropertyChanging();
					this._ExtentType = value;
					this.SendPropertyChanged("ExtentType");
					this.OnExtentTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequenceAccession")]
	public partial class SequenceAccession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeqID;
		
		private string _AccessionID;
		
		private short _AccessionVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqIDChanging(int value);
    partial void OnSeqIDChanged();
    partial void OnAccessionIDChanging(string value);
    partial void OnAccessionIDChanged();
    partial void OnAccessionVersionChanging(short value);
    partial void OnAccessionVersionChanged();
    #endregion
		
		public SequenceAccession()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeqID
		{
			get
			{
				return this._SeqID;
			}
			set
			{
				if ((this._SeqID != value))
				{
					this.OnSeqIDChanging(value);
					this.SendPropertyChanging();
					this._SeqID = value;
					this.SendPropertyChanged("SeqID");
					this.OnSeqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessionID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccessionID
		{
			get
			{
				return this._AccessionID;
			}
			set
			{
				if ((this._AccessionID != value))
				{
					this.OnAccessionIDChanging(value);
					this.SendPropertyChanging();
					this._AccessionID = value;
					this.SendPropertyChanged("AccessionID");
					this.OnAccessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessionVersion", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short AccessionVersion
		{
			get
			{
				return this._AccessionVersion;
			}
			set
			{
				if ((this._AccessionVersion != value))
				{
					this.OnAccessionVersionChanging(value);
					this.SendPropertyChanging();
					this._AccessionVersion = value;
					this.SendPropertyChanged("AccessionVersion");
					this.OnAccessionVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequenceMain")]
	public partial class SequenceMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeqID;
		
		private int _TaxID;
		
		private byte _LocationID;
		
		private byte _SeqTypeID;
		
		private int _SeqLength;
		
		private string _Source;
		
		private string _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqIDChanging(int value);
    partial void OnSeqIDChanged();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnLocationIDChanging(byte value);
    partial void OnLocationIDChanged();
    partial void OnSeqTypeIDChanging(byte value);
    partial void OnSeqTypeIDChanged();
    partial void OnSeqLengthChanging(int value);
    partial void OnSeqLengthChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public SequenceMain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeqID
		{
			get
			{
				return this._SeqID;
			}
			set
			{
				if ((this._SeqID != value))
				{
					this.OnSeqIDChanging(value);
					this.SendPropertyChanging();
					this._SeqID = value;
					this.SendPropertyChanged("SeqID");
					this.OnSeqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="Int NOT NULL")]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="TinyInt NOT NULL")]
		public byte LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqTypeID", DbType="TinyInt NOT NULL")]
		public byte SeqTypeID
		{
			get
			{
				return this._SeqTypeID;
			}
			set
			{
				if ((this._SeqTypeID != value))
				{
					this.OnSeqTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeqTypeID = value;
					this.SendPropertyChanged("SeqTypeID");
					this.OnSeqTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqLength", DbType="Int NOT NULL")]
		public int SeqLength
		{
			get
			{
				return this._SeqLength;
			}
			set
			{
				if ((this._SeqLength != value))
				{
					this.OnSeqLengthChanging(value);
					this.SendPropertyChanging();
					this._SeqLength = value;
					this.SendPropertyChanged("SeqLength");
					this.OnSeqLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(8000)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(8000)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequenceType")]
	public partial class SequenceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SeqTypeID;
		
		private string _MoleculeType;
		
		private string _GeneType;
		
		private string _GeneName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqTypeIDChanging(byte value);
    partial void OnSeqTypeIDChanged();
    partial void OnMoleculeTypeChanging(string value);
    partial void OnMoleculeTypeChanged();
    partial void OnGeneTypeChanging(string value);
    partial void OnGeneTypeChanged();
    partial void OnGeneNameChanging(string value);
    partial void OnGeneNameChanged();
    #endregion
		
		public SequenceType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte SeqTypeID
		{
			get
			{
				return this._SeqTypeID;
			}
			set
			{
				if ((this._SeqTypeID != value))
				{
					this.OnSeqTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeqTypeID = value;
					this.SendPropertyChanged("SeqTypeID");
					this.OnSeqTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoleculeType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MoleculeType
		{
			get
			{
				return this._MoleculeType;
			}
			set
			{
				if ((this._MoleculeType != value))
				{
					this.OnMoleculeTypeChanging(value);
					this.SendPropertyChanging();
					this._MoleculeType = value;
					this.SendPropertyChanged("MoleculeType");
					this.OnMoleculeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GeneType
		{
			get
			{
				return this._GeneType;
			}
			set
			{
				if ((this._GeneType != value))
				{
					this.OnGeneTypeChanging(value);
					this.SendPropertyChanging();
					this._GeneType = value;
					this.SendPropertyChanged("GeneType");
					this.OnGeneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this.OnGeneNameChanging(value);
					this.SendPropertyChanging();
					this._GeneName = value;
					this.SendPropertyChanged("GeneName");
					this.OnGeneNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyNames")]
	public partial class TaxonomyName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxID;
		
		private string _ScientificName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnScientificNameChanging(string value);
    partial void OnScientificNameChanged();
    #endregion
		
		public TaxonomyName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScientificName", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string ScientificName
		{
			get
			{
				return this._ScientificName;
			}
			set
			{
				if ((this._ScientificName != value))
				{
					this.OnScientificNameChanging(value);
					this.SendPropertyChanging();
					this._ScientificName = value;
					this.SendPropertyChanged("ScientificName");
					this.OnScientificNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
