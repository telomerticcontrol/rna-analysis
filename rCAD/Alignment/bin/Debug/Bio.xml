<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bio</name>
    </assembly>
    <members>
        <member name="T:Bio.Web.WebAccessor">
            <summary>
            A WebAccessor manages the process of downloading information from a 
            URL.
            </summary>
        </member>
        <member name="M:Bio.Web.WebAccessor.GetBrowserProxy">
            <summary>
            Get and store the default browser proxy in effect
            </summary>
        </member>
        <member name="M:Bio.Web.WebAccessor.GetDefaultProxy">
            <summary>
            Restore the default proxy
            </summary>
        </member>
        <member name="M:Bio.Web.WebAccessor.SubmitHttpRequest(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.String@)">
            <summary>
            Submit a parameterized HTTP request by either GET or POST. Return the result as a string.
            </summary>
            <remarks>
            Close() should not be called after using this method.
            </remarks>
            <param name="Url">The URL to request</param>
            <param name="doPost">POST if true, GET if false.</param>
            <param name="requestParameters">A set of parameter/value pairs, in unencoded form.</param>
            <param name="statusDescription">The HTTP status string returned from the operation</param>
            <param name="responseString">The response as a single string (if getResponse = true)</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Bio.Web.WebAccessor.SubmitHttpRequest(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.IO.Stream@)">
            <summary>
            Submit a parameterized HTTP request by either GET or POST. The 
            response is returned as a stream.
            </summary>
            <remarks>
            The caller must call Close() when done with the stream.
            </remarks>
            <param name="Url">The URL to request</param>
            <param name="doPost">POST if true, GET if false.</param>
            <param name="requestParameters">A set of parameter/value pairs, in unencoded form.</param>
            <param name="statusDescription">The HTTP status string returned from the operation</param>
            <param name="responseStream">The stream object containing the response</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Bio.Web.WebAccessor.SubmitHttpRequest(System.String,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream@,System.String@,System.String@)">
            <summary>
            Submit a parameterized HTTP request by either GET or POST. The 
            caller can ask for the response either as a string or as a stream.
            </summary>
            <remarks>
            If getResponse = false, the responseStream can be used by the caller
            to read the response. The caller must call Close() when done with the stream.
            If getResponse = true, the stream will be null, and Close() should not be called.
            </remarks>
            <param name="Url">The URL to request</param>
            <param name="doPost">POST if true, GET if false.</param>
            <param name="getResponse">If true, get the whole response in responseString.</param>
            <param name="requestParameters">A set of parameter/value pairs, in unencoded form.</param>
            <param name="responseStream">The stream object containing the response</param>
            <param name="statusDescription">The HTTP status string returned from the operation</param>
            <param name="responseString">The response as a single string (if getResponse = true)</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Bio.Web.WebAccessor.Close">
            <summary>
            Close the internal HttpWebResponse, after reading from the stream returned by
            SubmitHttpRequest with getResponse = false.
            </summary>
        </member>
        <member name="P:Bio.Web.WebAccessor.Proxy">
            <summary>
            The WebProxy object that will be used for HTTP requests.
            </summary>
        </member>
        <member name="T:Bio.Util.Helper">
            <summary>
            Generally useful static methods.
            </summary>
            <remarks>
            The util class contains utility methods used throughout the MBF library. These
            are general rather than biological in nature. In another language, they might be implemented
            as global functions. They are generally stateless, so they should be public and static.
            </remarks>
        </member>
        <member name="F:Bio.Util.Helper.GenBankMetadataKey">
            <summary>
            Key to get GenBankMetadata object from Metadata of a sequence which is parsed from GenBankParser.
            </summary>
        </member>
        <member name="M:Bio.Util.Helper.Dequote(System.String)">
            <summary>
            Remove both single and double quotation mark delimiters from a string.
            </summary>
            <remarks>
            This does not ignore escaped quotes.
            </remarks>
            <param name="str">The input string.</param>
            <returns>The string minus delimiting quotes.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringMultiply(System.String,System.Int32)">
            <summary>
            String Multiply. Build a string by concatenating copies of the input string.
            </summary>
            <param name="str">The string to multiply.</param>
            <param name="count">The number of copies wanted.</param>
            <returns>The multiplied string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringMatches(System.String,System.Int32,System.String,System.Int32@)">
            <summary>
            see if string test, starting at startPos, matches string match, up to 
            the length of match. if so, set pos to the position just after the match.
            safely returns false if test is too short to match.
            </summary>
            <param name="test">The string to test.</param>
            <param name="startPos">Where to start testing.</param>
            <param name="match">The match string to test for.</param>
            <param name="pos">on success, the position just after the match.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringMatches(System.String,System.Int32,System.String)">
            <summary>
            Overload that doesn't return the position as an out parameter.
            </summary>
            <param name="test">The string to test.</param>
            <param name="startPos">Where to start testing.</param>
            <param name="match">The match string to test for.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringMatches(System.String,System.String)">
            <summary>
            Overload that starts at position 0.
            </summary>
            <param name="test">The string to test.</param>
            <param name="match">The match string to test for.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringHasMatch(System.String,System.String[])">
            <summary>
            See if test string is identical to any of the passed list of strings.
            </summary>
            <param name="test">The string to test.</param>
            <param name="args">Variable number of strings to test against.</param>
            <returns>True if test matches one of the subsequent arguments.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringContains(System.String,System.String[])">
            <summary>
            see if test string contains any of the passed list of strings.
            </summary>
            <param name="test">The string to test.</param>
            <param name="args">Variable number of strings to test against.</param>
            <returns>true if test contains one of the subsequent arguments.</returns>
        </member>
        <member name="M:Bio.Util.Helper.CharIn(System.Char,System.Char[])">
            <summary>
            Character version of StrIn; see if passed char matches one of the later arguments.
            </summary>
            <param name="test">The char to test.</param>
            <param name="args">Variable list of chars to test against.</param>
            <returns>True if test equals one of the subsequent arguments.</returns>
        </member>
        <member name="M:Bio.Util.Helper.CountChar(System.String,System.Char)">
            <summary>
            Count up the occurrences of char ch in string str.
            </summary>
            <param name="str">string being examined.</param>
            <param name="ch">character to look for and count.</param>
            <returns>number of occurrences of ch in str.</returns>
        </member>
        <member name="M:Bio.Util.Helper.CountChars(System.String,System.Char[])">
            <summary>
            Count up occurrences, in the string str, of any of the subsequent char arguments.
            </summary>
            <param name="str">string being examined.</param>
            <param name="args">Variable list of chars to look for and count.</param>
            <returns>number of occurrences.</returns>
        </member>
        <member name="M:Bio.Util.Helper.ContainsOnly(System.String,System.Char[])">
            <summary>
            Test whether a string consists entirely of a specified set of characters.
            </summary>
            <param name="str">The string to test.</param>
            <param name="args">Variable list of chars comprising the set.</param>
            <returns>true if str contains only characters in the set.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsDigits(System.String)">
            <summary>
            Test a string to see if it's made up only of digits (like regex \d+, but faster).
            </summary>
            <param name="str">The test string.</param>
            <returns>true if the string contains only digits.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsGenBank(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for GenBank formats.
            </summary>
            <returns>
            true  : if it is a valid fasta file extension.
            false : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.IsFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FastQ formats.
            </summary>
            <returns>
            true  : if it is a valid fastq file extension.
            false : if it is a in-valid fastq file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.IsFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats.
            </summary>
            <returns>
            true  : if it is a valid fasta file extension.
            false : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.GetNormalRandom(System.Double,System.Double)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <returns>A random value</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetNormalRandom(System.Double,System.Double,System.Int32)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller. This is done iteratively
            using the central limit theorem.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <param name="steps">
            The number of iterative steps to take in generating each number. The higher this number
            is, the closer to a true normal distribution the results will be, but the higher the
            computation cost. A value between 4 and 8 should be sufficient for most uses.
            </param>
            <returns>A random value</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidSequence(Bio.IAlphabet,System.String,System.Char@)">
            <summary>
            Returns true if all the characters in the specified string belongs to the 
            specified alphabet, else returns false.
            </summary>
            <param name="alphabet">Alphabet against which the characters in the specified sequence data has to be validated.</param>
            <param name="sequence">Sequence data to be validated.</param>
            <param name="invalidCharacter">First character found to be invalid.</param>
            <returns>Returns true if all character are valid, else returns false.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetSequenceItems(Bio.IAlphabet,System.String)">
            <summary>
            Returns the sequence items for the specified string.
            If any character in the string is unknown by the specified alphabet
            an exception will occur.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA, Alphabets.RNA or Alphabets.Protein)
            </param>
            <param name="sequence">A description of the sequence data.</param>
            <returns>Returns list of sequence items.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandType(System.String)">
            <summary>
            Returns a SequenceStrandType corresponds to the specified string.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns SequenceStrandType.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandType(Bio.IO.GenBank.SequenceStrandType)">
            <summary>
            Returns a string which represents specified SequenceStrandType.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandTopology(System.String)">
            <summary>
            Returns a SequenceStrandTopology corresponds to the specified string.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns SequenceStrandTopology.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandTopology(Bio.IO.GenBank.SequenceStrandTopology)">
            <summary>
            Returns a string which represents specified SequenceStrandTopology.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetCrossReferenceLink(Bio.IO.GenBank.CrossReferenceLink)">
            <summary>
            Returns a string which represents specified CrossReferenceLink.
            </summary>
            <param name="crossReferenceLink">CrossReferenceLink.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetGenBankAccession(Bio.IO.GenBank.GenBankAccession)">
            <summary>
            Returns a string which represents specified GenBankAccession.
            </summary>
            <param name="accession">GenBankAccession instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetProjectIdentifier(Bio.IO.GenBank.ProjectIdentifier)">
            <summary>
            Returns a string which represents specified ProjectIdentifier.
            </summary>
            <param name="projectIdentifier">ProjectIdentifier instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetSequenceSegment(Bio.IO.GenBank.SequenceSegment)">
            <summary>
            Returns a string which represents specified SequenceSegment.
            </summary>
            <param name="segment">SequenceSegment instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="T:Bio.IO.XsvSnpReader">
            <summary>
            This is used to read SNP items from a text reader available as 
            character separated values in a line. There is one SNP item per line and 
            each line has four character separated fields whose column numbers are identified: 
            a chromosome number, the Position, and 
            the two allele values that are valid for that SNP. 
            There may be assitional columns too, but their values are ignored.
            
            Classes that extend from this can override the protected properties and virtual methods 
            to perform Snp file format specific transformations before returning the field values.
            
            </summary>
        </member>
        <member name="T:Bio.IO.XsvTextReader">
            <summary>
            Common class for reading character separated value files 
            e.g. tab separated value (.tsv), Comma separated value (.csv), etc.
            There is "one" record per line. There are multiple columns per line, 
            each containing one field in the record.
            
            This class extends from BioTextReader and masks properties that are not relevant.
            It adds properties for extracting fields in each line.
            It has properties for ignoring/extracting comment lines prefixed by comment characters.
            </summary>
        </member>
        <member name="T:Bio.IO.BioTextReader">
            <summary>
            A BioTextReader reads from a source of formatted text one line at a time, storing each line
            until the next is read.
            </summary>
            <remarks>
            The BioTextReader class implements some simple helper methods, such as separating
            line headers from data, and allowing access to data fields using the 1-based, inclusive index
            notation common to the specs of many file formats. When a BioTextReader is constructed,
            the first line of text is read immediately so that it is available without having to call
            GoToNextLine.  The initial call of GoToNextLine will therefore set Line equal to the
            second non-empty line of text.  If SkipBlankLines is true, lines containing only white space
            are passed over by GoToNextLine.
            </remarks>
        </member>
        <member name="F:Bio.IO.BioTextReader.DefaultDataIndent">
            <summary>
            The default data indent used if none is supplied at construction = 12
            </summary>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Constructs from a TextReader using the default data indent, and reads in the first
            line of text, with SkipBlankLines set to true.
            </summary>
            <param name="reader">The TextReader to read from.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Constructs from a TextReader using the given data indent, and reads in the first
            line of text, with SkipBlankLines set to true.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.TextReader,System.Int32,System.Boolean)">
            <summary>
            Constructs from a TextReader using the given data indent, and reads in the first
            line of text.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlandLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.String)">
            <summary>
            Constructor from a file name using the default data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="filename">The filename to open.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.String,System.Int32)">
            <summary>
            Constructor from a file name using the given data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="filename">The filename to open.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor from a file name using the given data indent; opens a StreamReader on
            the file, and reads in the first line of text.
            </summary>
            <param name="filename">The filename to open.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlandLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor from a Stream using the default data indent; opens a StreamReader on
            the Stream, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Constructor from a Stream using the given data indent; opens a StreamReader on
            the Stream, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Constructor from a Stream using the given data indent; opens a StreamReader on
            the Stream, and reads in the first line of text.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlandLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:Bio.IO.BioTextReader.Dispose">
            <summary>
            If the TextReader was opened by this object, dispose it.
            </summary>
        </member>
        <member name="M:Bio.IO.BioTextReader.GoToNextLine">
            <summary>
            Reads the next line of text, storing it in the Line property.  If SkipBlankLines is
            true, any lines containing only white space are skipped.
            </summary>
        </member>
        <member name="M:Bio.IO.BioTextReader.SkipToNextSection">
            <summary>
            Reads until the next line starting with non-white space is reached, storing it
            in the Line property.
            </summary>
        </member>
        <member name="M:Bio.IO.BioTextReader.GetLineField(System.Int32,System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <param name="end">1-based index of last character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="M:Bio.IO.BioTextReader.GetLineField(System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="P:Bio.IO.BioTextReader.Filename">
            <summary>
            The file to read, or null if the file name is not known.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.Line">
            <summary>
            The current line of text.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LineNumber">
            <summary>
            The number of the current line of text.  (Line numbering starts at 1.)
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.SkipBlankLines">
            <summary>
            Whether or not blank lines should be skipped when GoToNextLine is called.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.DataIndent">
            <summary>
            The number of spaces that the data (i.e. non-header) portion of each line is indented.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.HasLines">
            <summary>
            True if the current line is not past the end of the formatted text.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LineHasHeader">
            <summary>
            True if the current line contains anything other than white space to the
            left of the indent.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LineHasData">
            <summary>
            True if the current line contains anything other than white space to the
            right of the indent.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LineHeader">
            <summary>
            The trimmed portion of the current line to the left of the data indent.
            Populated on demand.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LineData">
            <summary>
            The trimmed portion of the current line to the right of the data indent.
            Populated on demand.
            </summary>
        </member>
        <member name="P:Bio.IO.BioTextReader.LocationString">
            <summary>
            A human readable string giving the filename and current line number.
            </summary>
        </member>
        <member name="F:Bio.IO.XsvTextReader._fields">
            <summary>
            Contains the list of fields split from the current Line
            </summary>
        </member>
        <member name="M:Bio.IO.XsvTextReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Creates a Reader to read character separated values as records with fields.
            
            </summary>
            <param name="reader">The source text reader to read from. 
            This should point to the start of the TextReader if this has a header row. 
            Else it can point to the start of a line in the TextReader.</param>
            <param name="separators">Characters that are valid separators between fields in a line</param>
            <param name="ignoreWhiteSpace">If true, the white spaces around fields are removed.</param>
            <param name="hasHeader">If true, the first line of the reader is treated as a header 
            row for the fields</param>
        </member>
        <member name="M:Bio.IO.XsvTextReader.GoToNextLine">
            <summary>
            Calls the GoToNextLine() of the base class.
            Skips comment lines if present and enabled.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.DataIndent">
            <summary>
            Inherited from BioTextReader.
            The Xsv files do not have any indents. So override and always return 0.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.LineHeader">
            <summary>
            Inherited from BioTextReader.
            The Xsv files do not have any line specific headers. So override and always return String.Empty.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.LineData">
            <summary>
            Inherited from BioTextReader.
            Since the Xsv files do not have line headers, this returns the entire Line.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.Fields">
            <summary>
            Returns the list of fields in the current line as an array of strings. 
            This uses the separators defined for this reader to split the current line and 
            return the tokens. It trims the tokens if IgnoreWhiteSpace is true.
            If the current line is a comment line, this throws an exception.
            If end of the reader has been reached and HasLines is false, this returns null.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.Separators">
            <summary>
            Characters that separate each column in a line.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.TrimWhiteSpace">
            <summary>
            If true, this trims the white space around the field values (including header names). 
            Else all characters between the separators are returned as field value.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.FieldHeaders">
            <summary>
            Returns the field names that from the header row (first line) 
            if present (HasHeaders == true). Null otherwise.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.HasHeader">
            <summary>
            If true, the first row of this reader is considered as a header and
            read into FieldHeaders property.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.CommentLine">
            <summary>
            HasCommentLine is true and the current line starts with the CommentPrefix, 
            this returns the portion of the line after the comment prefix character.
            Null otherwise.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.CommentPrefixes">
            <summary>
            If not null or empty, lines starting with any of these characters this list 
            are treated as comment lines. This is effective only if SkipCommentLines is 
            set to true.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.SkipCommentLines">
            <summary>
            If true, this skips lines that are prefixed with the comment prefix characters.
            This is effective only if CommentPrefixes has one or more prefix characters.
            If set to true, comment lines cannot be read using the CommentLine property.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvTextReader.HasCommentLine">
            <summary>
            Returns true if the current line a valid comment line. 
            a current line should exist, CommentPrefixes should have one or more valid comment prefix 
            chars and the current line should start with one of these chars.
            </summary>
        </member>
        <member name="T:Bio.IO.ISnpReader">
            <summary>
            Interface for exposing a collection of SnpItems as an enumerator with 
            ability to skip to specific chromosome number and position.
            </summary>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosome(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
             or beyond the end of the enumerator if none exist. 
             This is useful when traversing sorted SNP sequences and we need to 
             jump to a specific chromosome number.
             The enumerator should be positioned at or after the first item and at or before the last item.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             
             <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
             False if no subsequent SnpItems exist with given chromosome number.
             If returning true, the Current item will have given chromosome number.
             </returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number and position 
             (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome number+position.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if a SnpItem with given chromosome number and position is found.
             If end of file is reached before this they are found, it returns false. 
             If returning true, the Current item will have given chromosome number and position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosomePosition(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the current chromosome number
             and position equal to the given position
             (i.e. Current.Position == position and Current.Chromosome does not change), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome position within current chromosome position.
             </summary>
             
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if this position is found. 
             False if the next chromosome number is encountered, or end of file is 
             reached before the position is found. If returning true, the Current item 
             will contain the starting chromosome number and given position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.IsChromosomeSorted">
            <summary>
            If true, the chromosome numbers are assumed to be sorted when 
            SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.IsChromosomePositionSorted">
            <summary>
            If true, the chromosome numbers AND chromosome positions within them 
            are assumed to be sorted when SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.currentSnpItem">
            <summary>
            The SNP item that has been parsed for the current line
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.isFirstLine">
            <summary>
            True if the current line contains the first line read from the reader
            </summary>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SNP reader from the given text reader that has character 
            separated values for Snpitems.
            </summary>
            
            <param name="reader">Source text reader for the SNP lines</param>
            <param name="separators">Valid character separators between fields in the line 
            e.g. '\t', ',', etc.</param>
            <param name="ignoreWhiteSpace">If true, trims the white space around a field value</param>
            <param name="hasHeader">If true, treats the field values of the first line in 
            the text reader as a header with the names of the fields.</param>
            <param name="chromosomeColumn">The zero-based column number in a line that 
            corresponds to the chromosome field</param>
            <param name="positionColumn">The zero-based column number in a line that 
            corresponds to the Snp position field</param>
            <param name="alleleOneColumn">The zero-based column number in a line that 
            corresponds to the first allele</param>
            <param name="alleleTwoColumn">The zero-based column number in a line that 
            corresponds to the second allele</param>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.MoveNext">
            <summary>
            Go to the next line in the text reader, unless it is the first line in which case, 
            it has already been called by BioTextReader in the constructor and we do not move
            the TextReader.
            </summary>
            <returns>True if we have a valid SnpItem in the next line moved to</returns>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.Reset">
            <summary>
            This method is not implemented for XsvSnpReader. Use BufferedSnpReader() instead.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always since this method is not supported by this class
            </exception>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.SkipToChromosome(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
             or beyond the end of the enumerator if none exist. 
             This is useful when traversing sorted SNP sequences and we need to 
             jump to a specific chromosome number.
             The enumerator should be positioned at or after the first item and at or before the last item.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             
             <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
             False if no subsequent SnpItems exist with given chromosome number.
             If returning true, the Current item will have given chromosome number.
             </returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number and position 
             (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome number+position.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if a SnpItem with given chromosome number and position is found.
             If end of file is reached before this they are found, it returns false. 
             If returning true, the Current item will have given chromosome number and position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.SkipToChromosomePosition(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the current chromosome number
             and position equal to the given position
             (i.e. Current.Position == position and Current.Chromosome does not change), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome position within current chromosome position.
             </summary>
             
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if this position is found. 
             False if the next chromosome number is encountered, or end of file is 
             reached before the position is found. If returning true, the Current item 
             will contain the starting chromosome number and given position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.GetFieldValue(Bio.IO.XsvSnpReader.FieldNames)">
            <summary>
            Returns the field value as a string for the given field name.
            </summary>
            <param name="column">field name enumerator to get the string value for</param>
            <returns>Returns the field value as a string for the given field enum.</returns>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.GetColumnNumber(Bio.IO.XsvSnpReader.FieldNames)">
            <summary>
            Returns the column number for the given field name
            </summary>
            <param name="column">Snp field enumerator to get the column number for</param>
            <returns>Returns the column number for the given Snp field enum.</returns>
        </member>
        <member name="M:Bio.IO.XsvSnpReader.MakeSnpForCurrentLine">
            <summary>
            Makes a SNP item for the current line in the XSV reader.
            Since the XSV reader reads ahead, this is actually the next 
            SNP item for the enumerator.
            </summary>
            <returns>Creates a SnpItem for the current line in the XsvReader</returns>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.ChromosomeColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the chromosome field
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.PositionColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the Snp position field
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.AlleleOneColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the first allele field for the SNP
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.AlleleTwoColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the second allele field for the SNP
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.Current">
            <summary>
             Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>The element in the collection at the current position of the enumerator.</returns>
            
             <exception cref="T:System.InvalidOperationException">The enumerator is 
             positioned before the first element of the collection or after the last element. 
             </exception>
        </member>
        <member name="P:Bio.IO.XsvSnpReader.System#Collections#IEnumerator#Current">
            <summary>
             Gets the current element in the collection.
            </summary>
            
            <returns>The current element in the collection.</returns>
            
            <exception cref="T:System.InvalidOperationException">The enumerator is 
             positioned before the first element of the collection or after the last element. 
             </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Bio.IO.XsvSnpReader.FieldNames">
            <summary>
            Field name enums for SNP fields in the file
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.FieldNames.Chromosome">
            <summary>
            The chromosome number field
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.FieldNames.Position">
            <summary>
            The position within chromosome number field
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.FieldNames.AlleleOne">
            <summary>
            The symbol for allele one field
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSnpReader.FieldNames.AlleleTwo">
            <summary>
            The symbol for allele two field
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StandardFeatureMap">
            <summary>
            Class to map each standard feature key to the class which can hold that feature.
            Note that the classes which can hold feature has to be derived from FeatureItem class.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureMap.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureMap.GetStandardFeatureItem(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Returns standard feature class instance, if the key in the specified feature item is found 
            in the map; otherwise returns the specified feature item itself.
            For example:
            If the specified feature item has the key "Gene" then this method returns instance of the Gene class
            with data copied from the specified item.
            </summary>
            <param name="item">Feature item instance to which the standard feature item instance is needed.</param>
            <returns>If found returns appropriate class instance for the specified feature item, otherwise returns 
            the specified item itself.</returns>
        </member>
        <member name="T:Bio.IO.GenBank.Promoter">
            <summary>
            Region on a DNA molecule involved in RNA polymerase binding to initiate transcription.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.FeatureItem">
            <summary>
            Feature of sequence present in the metadata can be stored in this class.
            All qualifiers of the feature will be stored as subitems.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(System.String,Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new feature item with given key and location.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">An instance of ILocation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(System.String,System.String)">
            <summary>
            Creates feature item with given key and location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">FeatureItem instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubFeatures(Bio.IO.GenBank.SequenceFeatures)">
            <summary>
            Gets the sub features depending on the location information.
            </summary>
            <param name="sequenceFeatures">SequenceFeatures instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a new sequence from the specified sequence which contains bases of this feature as specified by 
            the location property of this feature.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by this feature location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the parent sequence and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occure.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetQualifier(System.String)">
            <summary>
            Returns list of qualifier values for the specified qualifier name.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSingleTextQualifier(System.String)">
            <summary>
            Returns qualifier value for the specified qualifier name.
            Note: This method should be used to get the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Qualifier value.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.SetSingleTextQualifier(System.String,System.String)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to set the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSingleBooleanQualifier(System.String)">
            <summary>
            Returns bool value indicating whether the specified qualifier is there in the feature or not.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Returns true if the qualifier is found in the feature, otherwise false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.SetSingleBooleanQualifier(System.String,System.Boolean)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to add a qualifier which 
            appears only once in a feature and whose value is none.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.Clone">
            <summary>
            Creates a new FeatureItem that is a copy of the current FeatureItem.
            </summary>
            <returns>A new FeatureItem that is a copy of this FeatureItem.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.System#ICloneable#Clone">
            <summary>
            Creates a new FeatureItem that is a copy of the current FeatureItem.
            </summary>
            <returns>A new object that is a copy of this FeatureItem.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Label">
            <summary>
            A label used to permanently tag a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            ommitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Location">
            <summary>
            Gets the location of this feature in the sequence.
            This may also refers to other genbank files.
            For example, 
            join(100..200,J00194.1:1..150)
            In this example location specifies joining of bases from 100 to 200 from the sequence
            in which this location data present and bases from 1 to 150 from the sequence who's 
            accession number is J00194.1.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Qualifiers">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Promoter feature item from the specified location.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(System.String)">
            <summary>
            Creates new Promoter feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(Bio.IO.GenBank.Promoter)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Promoter instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.Clone">
            <summary>
            Creates a new Promoter that is a copy of the current Promoter.
            </summary>
            <returns>A new Promoter that is a copy of this Promoter.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PolyASignal">
            <summary>
            Recognition region necessary for endonuclease cleavage of an RNA transcript that is followed by polyadenylation.
            Consensus=AATAAA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(System.String)">
            <summary>
            Creates new PolyASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(Bio.IO.GenBank.PolyASignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.Clone">
            <summary>
            Creates a new PolyASignal that is a copy of the current PolyASignal.
            </summary>
            <returns>A new PolyASignal that is a copy of this PolyASignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscFeature">
            <summary>
            Region of biological interest which cannot be described by any other feature key; a new or rare feature.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscFeature feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(System.String)">
            <summary>
            Creates new MiscFeature feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(Bio.IO.GenBank.MiscFeature)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscFeature instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.Clone">
            <summary>
            Creates a new MiscFeature that is a copy of the current MiscFeature.
            </summary>
            <returns>A new MiscFeature that is a copy of this MiscFeature.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.Fasta.FastaParser">
            <summary>
            A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GenBank file format can be found at
            http://www.ncbi.nlm.nih.gov/blast/fasta.shtml
            </summary>
        </member>
        <member name="T:Bio.IO.BasicSequenceParser">
            <summary>
            This is an abstract class that provides some basic operations common to sequence
            parsers. It is meant to be used as the base class for parser implementations
            if the implementer wants to make use of default behavior.
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceParser">
            <summary>
            Implementations of this interface are designed to parse a file from a particular file
            format to produce an ISequence. For advanced users, the ability to select an encoding for
            the internal memory representation is provided. Implementations also have a default
            encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.ISequenceParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="P:Bio.IO.ISequenceParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceParser.Name">
            <summary>
            Gets the name of the sequence parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceParser.Description">
            <summary>
            Gets the description of the sequence parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="F:Bio.IO.BasicSequenceParser._distinctSymbols">
            <summary>
            Holds distinct symbols while parsing the sequence, used to 
            identify alphabet for the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.ParseOneWithSpecificFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader into a sequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Sequence instance.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.IdentifyAlphabet(Bio.IAlphabet,System.String)">
            <summary>
            Identifies Alphabet for the sepecified sequence.
            </summary>
            <param name="currentAlphabet">Currently known alphabet of the sequence, null if alphabet is unknown.</param>
            <param name="sequence">Sequence data.</param>
            <returns>Returns appropriate alphabet for the specified sequence and considering the specified current alphabet. 
            Returns null if any character in the sequence is unrecognized by DNA, RNA and Protien Alphabets.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.GetMoleculeType(System.String)">
            <summary>
            Maps the string to a particular Molecule type and returns
            the instance of mapped molecule type.
            </summary>
            <param name="type">The molecule type.</param>
            <returns>Returns the appropriate molecule type for the specified string.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.GetMoleculeType(Bio.IAlphabet)">
            <summary>
            Returns Molecule type depending on the specified alphabet.
            </summary>
            <param name="alphabet">Alphabet.</param>
            <returns>Returns molecule type.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.GetAlphabet(Bio.MoleculeType)">
            <summary>
            Returns the alphabet depending on the specified molecule type.
            </summary>
            <param name="moleculeType">Molecule type.</param>
            <returns>IAlphabet instance.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.Parse(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a BioTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.StartCheckFromDna">
            <summary>
            Returns Dna alphabet if all the symbols in distinctSymbols are 
            known by Dna alphabet else it continue to verify with Rna alpabet by 
            calling StartCheckFromRna method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.StartCheckFromRna">
            <summary>
            Returns Rna alphabet if all the symbols in distinctSymbols are 
            known by Rna alphabet else it continue to verify with Protein alpabet by 
            calling StartCheckFromProtein method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.StartCheckFromProtein">
            <summary>
            Returns Protein alphabet if all the symbols in distinctSymbols are 
            known by protein alphabet else returns null.
            </summary>
            <returns>If all symbols in distinctSymbols are known by protein alphabet 
            then returns protein Alphabet else returns null.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.IsDnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Dna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.IsRnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Rna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:Bio.IO.BasicSequenceParser.IsProteinAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Protein.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="P:Bio.IO.BasicSequenceParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.  If this is not set, an alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects.  If this is not set, the default
            for the given alphabet will be used.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceParser.Name">
            <summary>
            Gets the name of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact name of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceParser.Description">
            <summary>
            Gets the description of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="M:Bio.IO.Fasta.FastaParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.Fasta.FastaParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:Bio.IO.Fasta.FastaParser.ParseOneWithSpecificFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single FASTA text from a reader into a sequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="P:Bio.IO.Fasta.FastaParser.Name">
            <summary>
            Gets the type of Parser i.e FASTA.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Fasta.FastaParser.Description">
            <summary>
            Gets the description of Fasta parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            FastaParser class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.Fasta.FastaParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTA file.
            </summary>
        </member>
        <member name="T:Bio.CompoundNucleotide">
            <summary>
            CompoundNucleotide supports, storing more than one nucletides with their weight in one base entry.
            For example,
             Consider the below sequence where {G|A} could have statistical values of 30% and 65% and
             {C|G|T} could have 30% each (they dont necessarily have to sum upto 100)
                GATTAGAGCTA
                     A  G
                        T
            Above sequence items {G|A} and {C|G|T} can be represented in compound sequence items like, 
            GATTARAGBTA
             Where “R” and “B” are CompoundNucleotides.
            CompoundNucleotide R will contain nucleotides G and A with their weights.
            CompoundNucleotide B will contain nucleotides C, G and T with their weights.
            
            This class can be used in SparseSequence.
            </summary>
        </member>
        <member name="T:Bio.Nucleotide">
            <summary>
            The nucleotide implementation of ISequenceItem allows for items that
            when placed in sequence make up a DNA or RNA strand.
            </summary>
        </member>
        <member name="T:Bio.ISequenceItem">
            <summary>
            The data point values stored within an ISequence implementation.
            This data model allows the association of a particular value with
            a character symbol, and a byte value used for encoding or serializing
            the item. For examples of implementations of this interface see the
            Nucleotide and AminoAcid classes.
            </summary>
        </member>
        <member name="M:Bio.ISequenceItem.Clone">
            <summary>
            Gets the clone copy of this ISequence Item.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.Value">
            <summary>
            An encoding value, unique for the particular item within its
            alphabet.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.Symbol">
            <summary>
            A character symbol representing the item. For instance in DNA,
            symbols would include G, A, T, and C. Also possible are symbols
            representing gaps, termination characters, or ambiguities.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.Name">
            <summary>
            A human readable and display appropriate name for the item.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.IsGap">
            <summary>
            Returns true if this ISequenceItem is a Gap character, otherwise returns false.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.IsAmbiguous">
            <summary>
            Returns true if this ISequenceItem is Ambiguous, otherwise returns false.
            </summary>
        </member>
        <member name="P:Bio.ISequenceItem.IsTermination">
            <summary>
            Returns true if this ISequenceItem is a Termination character, otherwise returns false.
            </summary>
        </member>
        <member name="F:Bio.Nucleotide.val">
            <summary>
            An encoding value, unique for the particular item within its alphabet.
            </summary>
        </member>
        <member name="F:Bio.Nucleotide.symbol">
            <summary>
            A character symbol representing the item. For instance in DNA,
            symbols would include G, A, T, and C. Also possible are symbols
            representing gaps, termination characters, or ambiguities.
            </summary>
        </member>
        <member name="F:Bio.Nucleotide.name">
            <summary>
            A human readable and display appropriate name for the item. For
            example, 'Adenine' or 'Cytosine'. For ambigous items, 'Adenine or Cytosine'.
            Also acceptable are 'Gap' or 'Termination'.
            </summary>
        </member>
        <member name="M:Bio.Nucleotide.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the nucleotide</param>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
        </member>
        <member name="M:Bio.Nucleotide.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data. Nucleotides
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
        </member>
        <member name="M:Bio.Nucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the nucleotide</param>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
            <param name="isGap">Indicates if this is a gap character</param>
            <param name="isAmbiguous">Indicates if this is an ambigous character</param>
        </member>
        <member name="M:Bio.Nucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data. Nucleotides
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
            <param name="isGap">Indicates if this is a gap character</param>
            <param name="isAmbiguous">Indicates if this is an ambigous character</param>
        </member>
        <member name="M:Bio.Nucleotide.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Nucleotide.#ctor">
            <summary>
            Prevents a default instance of the Nucleotide class from being created.
            </summary>
        </member>
        <member name="M:Bio.Nucleotide.Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:Bio.Nucleotide.Bio#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:Bio.Nucleotide.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Nucleotide.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:Bio.Nucleotide.Equals(System.Object)">
            <summary>
            Overrides Object Equals.
            Two nucleotides are judged equal, if they have the same symbol
            </summary>
            <param name="obj">Object to be compared with</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Bio.Nucleotide.GetHashCode">
            <summary>
            Get hash code for nucleotide
            Uses symbol for calculation
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="P:Bio.Nucleotide.Value">
            <summary>
            Gets encoding value of this item.
            </summary>
        </member>
        <member name="P:Bio.Nucleotide.Symbol">
            <summary>
            Gets the character symbol representing the item.
            </summary>
        </member>
        <member name="P:Bio.Nucleotide.Name">
            <summary>
            Gets the display name for the item.
            </summary>
        </member>
        <member name="P:Bio.Nucleotide.IsGap">
            <summary>
            Gets a value indicating whether this Nucleotide is a Gap character.
            </summary>
        </member>
        <member name="P:Bio.Nucleotide.IsAmbiguous">
            <summary>
            Gets a value indicating whether this Nucleotide is Ambiguous.
            </summary>
        </member>
        <member name="P:Bio.Nucleotide.IsTermination">
            <summary>
            Gets a value indicating whether this Nucleotide is a Termination item
            Always returns false, as Nuceleotides do not have a defined termination character.
            </summary>
        </member>
        <member name="T:Bio.ICompoundSequenceItem">
            <summary>
            ICompoundSequenceItem used to represent posibility of various sequence item in a base entry.
            Classes which implements this interface can store more than one sequence items with their 
            weights in one base entry.
            
            For examples of implementations of this interface see the CompoundNucleotide 
            and CompoundAminoAcid classes.
            </summary>
        </member>
        <member name="M:Bio.ICompoundSequenceItem.GetWeight(Bio.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:Bio.ICompoundSequenceItem.SetWeight(Bio.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">Weight of the item.</param>
        </member>
        <member name="M:Bio.ICompoundSequenceItem.Add(Bio.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:Bio.ICompoundSequenceItem.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:Bio.ICompoundSequenceItem.Clone">
            <summary>
            Creates a new ICompoundSequenceItem that is a copy of the current ICompoundSequenceItem.
            </summary>
            <returns>A new ICompoundSequenceItem that is a copy of this ICompoundSequenceItem.</returns>     
        </member>
        <member name="P:Bio.ICompoundSequenceItem.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundNucleotide.
            </summary>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Char,System.String)">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Char,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.GetWeight(Bio.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:Bio.CompoundNucleotide.SetWeight(Bio.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">New weight for the item.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.Add(Bio.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:Bio.CompoundNucleotide.Bio#ICompoundSequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:Bio.CompoundNucleotide.Bio#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:Bio.CompoundNucleotide.Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:Bio.CompoundNucleotide.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Method for serializing the SparseSequence.
             </summary>
             <param name="info">Serialization Info.</param>
             <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.CompoundNucleotide.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="P:Bio.CompoundNucleotide.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundNucleotide.
            </summary>
        </member>
        <member name="T:Bio.Util.Logging.Trace">
            <summary>
            The Trace class implements a mechanism for logging messages, both to a Log object,
            and to a simple message queue that can be used for GUI display or other purposes.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.SeqWarnings">
            <summary>
            Flag to report non-fatal sequence parsing/formatting errors.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.AssemblyDetails">
            <summary>
            Flag to report details of sequence assembly into the log.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Want(System.UInt64)">
            <summary>
            Test to see if a flag is in the set of flags currently turned on.
            </summary>
            <param name="flag">a flag, encoded as a single bit in a ulong.</param>
            <returns>true if the flag is set.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(Bio.Util.Logging.Trace.Message)">
            <summary>
            Report a Trace.Message, by adding it to the front of the message
            queue, as well as logging it.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(System.String,System.String,System.String)">
            <summary>
            Overload that constructs the Trace.Message from its parts.
            </summary>
            <param name="context">Where the incident occurred.</param>
            <param name="message">The details of what happened.</param>
            <param name="data">Pertinent data such as argument values.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(System.String)">
            <summary>
            Overload to report from a plain string.
            </summary>
            <param name="message">the message.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.LatestMessage">
            <summary>
            Return the newest message in the queue (or null, if none).
            </summary>
            <returns>a Trace.Message.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.GetMessage(System.Int32)">
            <summary>
            return the ith message in the queue (0 = newest).
            </summary>
            <param name="i">index.</param>
            <returns>the Trace.Message.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Set(System.UInt64)">
            <summary>
            Turn on a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="flag">The bit to set.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Clear(System.UInt64)">
            <summary>
            Clear a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="flag">The bit to clear.</param>
        </member>
        <member name="T:Bio.Util.Logging.Trace.Message">
            <summary>
            A Trace.Message is a simple message holding class.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.Message.context">
            <summary>
            The context where the event occurred, such as a method name, or
            a particular point in a complex operation.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.Message.message">
            <summary>
            A description of the event.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.Message.data">
            <summary>
            Data associated with the event, such as argument values.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.Message.when">
            <summary>
            When the event occurred.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Message.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Construct a message.
            </summary>
            <param name="c">The context.</param>
            <param name="m">The message.</param>
            <param name="d">The data.</param>
            <param name="w">When the event occurred.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Message.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a message, using the current date/time.
            </summary>
            <param name="c">The context.</param>
            <param name="m">The message.</param>
            <param name="d">The data.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Message.Format">
            <summary>
            Convert a Trace.Message into a user-friendly string.
            </summary>
            <returns>the string.</returns>
        </member>
        <member name="T:Bio.IO.SnpParser">
            <summary>
            Implements common methods for parsing SNPs from a SnpReader into ISequences. 
            This reads Snp items from the SnpReader and stores either of the two alleles
            in a sparse sequence at the same position as the chromosome position.
            Extending classes have to implement the 
            SnpReader GetSnpReader(TextReader reader) method that returns a
            SnpReader for the given TextReader.
            
            This class is based on the Bio.IO.BasicSequenceParser.
            
            </summary>
        </member>
        <member name="M:Bio.IO.SnpParser.#ctor(Bio.IO.Encoding.IEncoding,Bio.IAlphabet)">
            <summary>
            Creates a SNP parser with the given encoding and alphabet
            </summary>
            <param name="encoding"></param>
            <param name="alphabet"></param>
        </member>
        <member name="M:Bio.IO.SnpParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of sparse sequences from the reader, one per contiguous 
            chromosome present in the reader. There is one SequenceItem per SnpItem with 
            either of the two alleles in the SnpItem (determined by the ParseAlleleOne property)
            and at the same position in the sequence as the SnpItem.Position.
            </summary>
            <param name="reader">Text reader to read the Snpitems from using a SnpReader created for it</param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the reader, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of sparse sequences from the reader, one per contiguous 
            chromosome present in the reader. There is one SequenceItem per SnpItem with 
            either of the two alleles in the SnpItem (determined by the ParseAlleleOne property)
            and at the same position in the sequence as the SnpItem.Position.
            </summary>
            <param name="reader">Text reader to read the Snpitems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the reader, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.Parse(System.String)">
            <summary>
            Creates a TextReader for the file and calls Parse(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the file, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.Parse(System.String,System.Boolean)">
            <summary>
            Creates a TextReader for the file and calls Parse(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the file, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.ParseOne(System.String)">
            <summary>
            Creates a TextReader for the file and calls ParseOne(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <returns>Returns a single sparse sequence containing Snp items from a single contiguous
            chromosome read from the file. The SnpItems retain the same position in 
            the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Creates a TextReader for the file and calls ParseOne(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a single sparse sequence containing Snp items from a single contiguous
            chromosome read from the file. The SnpItems retain the same position in 
            the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.ParseOne(System.IO.TextReader)">
            <summary>
            Returns a sparse sequence composed of one of the two alleles for the current 
            chromosome pointed to by the SnpReader. If ParseAlleleOne is set to true (default), 
            this parses AlleleOne, else AlleleTwo.
            
            The Sequence Items correspond to AlleleOne or Two in the reader and their position 
            in the sparse sequence corresponds to their Position in the SnpItem.
            
            This starts parsing from the current line and continues until EOF or the chromosome 
            number changes.
            
            </summary>
            <param name="reader"></param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the reader, retaining the same position in the sparse sequence
            as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Returns a sparse sequence composed of one of the two alleles for the current 
            chromosome pointed to by the SnpReader. If ParseAlleleOne is set to true (default), 
            this parses AlleleOne, else AlleleTwo.
            
            The Sequence Items correspond to AlleleOne or Two in the reader and their position 
            in the sparse sequence corresponds to their Position in the SnpItem.
            
            This starts parsing from the current line and continues until EOF or the chromosome 
            number changes.
            
            </summary>
            <param name="reader"></param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the reader, retaining the same position in the sparse sequence
            as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.SnpParser.GetSnpReader(System.IO.TextReader)">
            <summary>
            This method has to be overriden by an implementing class to return a SnpReader 
            for the given TextReader
            </summary>
            <param name="reader">TextReader containing snps that is wrapped by the returned ISnpReader</param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.SnpParser.ParseOne(Bio.IO.ISnpReader,System.Boolean)">
            <summary>
            The common ParseOne method called for parsing SNPs
            NOTE: The snpReader.MoveNext must have already been called and 
            the ISnpReader.Current have the first SnpItem to parse into the sequence
            </summary>
            <param name="snpReader">The ISnpReader to read a Snp chromosome sequence from</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the snp reader.</returns>
        </member>
        <member name="P:Bio.IO.SnpParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.SnpParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects. 
            </summary>
        </member>
        <member name="P:Bio.IO.SnpParser.Name">
            <summary>
            Gets the name of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact name of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.SnpParser.Description">
            <summary>
            Gets the description of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.SnpParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="P:Bio.IO.SnpParser.ParseAlleleOne">
            <summary>
            If set to false, this will parse AlleleTwo. If true, this will parse AlleleOne from the SnpReader.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceParsers">
            <summary>
            SequenceParsers class is an abstraction class which provides instances
            and lists of all Parsers currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.genBank">
            <summary>
            A singleton instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.fasta">
            <summary>
            A singleton instance of FastaParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.fastq">
            <summary>
            A singleton instance of FastQParser class which is capable of
            parsing FastQ format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.gff">
            <summary>
            A singleton instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.all">
            <summary>
            List of all supported sequence parsers.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceParsers.FindParserByFile(System.String)">
            <summary>
            Returns parser which supports the specified file.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <returns>If found returns the parser as ISequenceParser else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.GenBank">
            <summary>
            Gets an instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.Fasta">
            <summary>
            Gets an instance of FastaParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.FastQ">
            <summary>
            Gets an instance of FastQParser class which is capable of
            parsing FASTQ format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.Gff">
            <summary>
            Gets an instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.All">
            <summary>
            Gets the list of all parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ThreePrimeUtr">
            <summary>
            ThreePrimeUTR (3'UTR) is a Region at the 3' end of a mature transcript (following the stop codon) that 
            is not translated into a protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ThreePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new ThreePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(Bio.IO.GenBank.ThreePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ThreePrimeUTR instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.Clone">
            <summary>
            Creates a new ThreePrimeUTR that is a copy of the current ThreePrimeUTR.
            </summary>
            <returns>A new ThreePrimeUTR that is a copy of this ThreePrimeUTR.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ModifiedBase">
            <summary>
            The indicated nucleotide is a modified nucleotide and should be substituted for by the 
            indicated molecule (given in the ModifiedNucleotideBase qualifier value).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ModifiedBase feature item from the specified location.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(System.String)">
            <summary>
            Creates new ModifiedBase feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(Bio.IO.GenBank.ModifiedBase)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ModifiedBase instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.Clone">
            <summary>
            Creates a new ModifiedBase that is a copy of the current ModifiedBase.
            </summary>
            <returns>A new ModifiedBase that is a copy of this ModifiedBase.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.ModifiedNucleotideBase">
            <summary>
            mod_base; Abbreviation for a modified nucleotide base.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscRNA">
            <summary>
            Any transcript or RNA product that cannot be defined by other RNA keys (prim_transcript, precursor_RNA, 
            mRNA, 5'UTR, 3'UTR, exon, CDS, sig_peptide, transit_peptide, mat_peptide, intron, polyA_site, ncRNA, rRNA and tRNA).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRNA.#ctor(System.String)">
            <summary>
            Creates new MiscRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRNA.#ctor(Bio.IO.GenBank.MiscRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRNA.Clone">
            <summary>
            Creates a new MiscRNA that is a copy of the current MiscRNA.
            </summary>
            <returns>A new MiscRNA that is a copy of this MiscRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscDifference">
            <summary>
            Feature sequence is different from that presented in the entry and cannot be described by any 
            other Difference key (conflict, unsure, old_sequence, variation, or modified_base).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscDifference feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(System.String)">
            <summary>
            Creates new MiscDifference feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(Bio.IO.GenBank.MiscDifference)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscDifference instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.Clone">
            <summary>
            Creates a new MiscDifference that is a copy of the current MiscDifference.
            </summary>
            <returns>A new MiscDifference that is a copy of this MiscDifference.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.ClonedFrom">
            <summary>
            Clone from which the sequence was obtained.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.BufferedSnpReader">
            <summary>
            This provides buffering capability to a SnpReader. It uses an in-memory buffer 
            of SnpItems as a List and supports the Reset() method. It incrementally reads 
            blocks of SnpItems from the SnpReader into the buffer.
            
            If chromosomes, or both chromosomes and their positions are sorted in
            the input reader, this uses a more efficient form of the SkipTo* methods. The 
            IsChromosomeSorted and/or IsChromosomePositionSorted must be set to 
            true for this.
            
            The constructor allows a partially traversed SnpReader to be passed as input.
            This allows only the subsequent SnpItems to be buffered in memory.
            E.g. to buffer only chromosome 20 from a file that has all 23 chromosomes,
            a (non-buffered) SnpReader opens the file and skips to chromosome 20. This 
            SnpReader is used to construct a BufferedSnpReader with 
            isSourceAtFirstItem set to true. Calls to the traveral methods in the 
            BufferedSnpReader will only buffer SnpItems for chromosome 20 and beyond.
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.snpBuffer">
            <summary>
            The buffer into which the Snps are read into
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.snpReader">
            <summary>
            The Snpreader which is the source for this buffer
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.currentIndex">
            <summary>
            The current cursor position at which the buffered reader is at
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.readComplete">
            <summary>
            True if all items from the source reader have been read into the buffer
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.chromosomeToStartPosition">
            <summary>
            For a sorted reader, this caches the starting position of each 
            chromosome number
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.fullTraversalComplete">
            <summary>
            Set to true if we have traversed the entire input reader at least once.
            Used to indicate that the chromosome start positions have all been cached.
            </summary>
        </member>
        <member name="F:Bio.IO.BufferedSnpReader.isSourceAtFirstItem">
            <summary>
            If true, this indicates that the source SnpReader is already placed 
            at the first SNP item (i.e. MoveNext() has already been called)
            </summary>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.#ctor(Bio.IO.ISnpReader)">
            <summary>
            Creates a buffered reader that reads and buffers SnpItems from the given SnpReader
            </summary>
            <param name="reader">A SnpReader that is the source for the BufferedReader.</param>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.#ctor(Bio.IO.ISnpReader,System.Boolean)">
            <summary>
            Creates a buffered reader that reads and buffers SnpItems from the given SnpReader
            </summary>
            <param name="reader">A SnpReader that is the source for the BufferedReader.</param>
            <param name="isSourceAtFirstItem">If true, this indicates that the source reader 
            is already placed at the first SNP item (i.e. MoveNext() has already been called),
            and the first SNP item read into the buffer will be reader.Current.
            </param>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.Dispose">
            <summary>
            Disposes the snpReader and empties the buffer
            </summary>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.MoveNext">
            <summary>
            Moves the cursor to the next available item in the buffer and returns true if 
            an item is available. This reads 'ReadBlockSize' more items from the snpReader 
            if the buffer does not have the next item and there are more 
            items available in the snpReader.
            </summary>
            <returns>True if there is an item available at the next position moved to.</returns>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.Reset">
            <summary>
              Sets the enumerator to its initial position, which is before the 
              first element in the collection.
            </summary>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.ReadMore">
            <summary>
            If end of reader has not been reached, this reads a block of items 
            into the buffer from the reader.
            </summary>
            <returns>True if 'ReadBlockSize' items were read. 
            False otherwise, implying there are no further items to read from the source. </returns>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.SkipToChromosome(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
             or beyond the end of the enumerator if none exist. 
             This is useful when traversing sorted SNP sequences and we need to 
             jump to a specific chromosome number.
             The enumerator should be positioned at or after the first item and at or before the last item.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             
             <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
             False if no subsequent SnpItems exist with given chromosome number.
             If returning true, the Current item will have given chromosome number.
             </returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number and position 
             (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome number+position.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if a SnpItem with given chromosome number and position is found.
             If end of file is reached before this they are found, it returns false. 
             If returning true, the Current item will have given chromosome number and position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.BufferedSnpReader.SkipToChromosomePosition(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the current chromosome number
             and position equal to the given position
             (i.e. Current.Position == position and Current.Chromosome does not change), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome position within current chromosome position.
             </summary>
             
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if this position is found. 
             False if the next chromosome number is encountered, or end of file is 
             reached before the position is found. If returning true, the Current item 
             will contain the starting chromosome number and given position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="P:Bio.IO.BufferedSnpReader.ReadBlockSize">
            <summary>
            Number of SnpItems to read as a block from the SnpReader when the buffer does 
            not have the requested item.
            </summary>
            <returns>returns the Number of SnpItems to read as a block from the SnpReader at a time.</returns>
        </member>
        <member name="P:Bio.IO.BufferedSnpReader.IsChromosomeSorted">
            <summary>
            If true, the chromosome numbers are assumed to be sorted when 
            SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="P:Bio.IO.BufferedSnpReader.IsChromosomePositionSorted">
            <summary>
            If true, the chromosome numbers AND chromosome positions within them 
            are assumed to be sorted when SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="P:Bio.IO.BufferedSnpReader.Current">
            <summary>
             Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>The element in the collection at the current position of the enumerator.</returns>
            
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="P:Bio.IO.BufferedSnpReader.System#Collections#IEnumerator#Current">
            <summary>
             Gets the current element in the collection.
            </summary>
            
            <returns>The current element in the collection.</returns>
            
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SequenceAligners">
            <summary>
            SequenceAligners class is an abstraction class which provides instances
            and lists of all Aligners currently supported by MBF. 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.smithAlign">
            <summary>
            A singleton instance of SmithWatermanAligner class which implements
            the SmithWaterman algorithm for partial alignment
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.needlemanAlign">
            <summary>
            A singleton instance of NeedlemanWunschAligner class which implements
            the NeedlemanWunsch algorithm for global alignment.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.overlap">
            <summary>
            A singleton instance of PairwiseOverlapAligner class which implements
            pairwise overlap alignment algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.mummer3">
            <summary>
            A singleton instance of MUMmer class which implements
            mummer alignment algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.nucmer3">
            <summary>
            A singleton instance of NUCmer class which implements
            NUCmer alignment algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAligners.all">
            <summary>
            List of supported sequence aligners.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAligners.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.SmithWaterman">
            <summary>
            Gets an instance of SmithWatermanAligner class which implements
            the SmithWaterman algorithm for partial alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.NeedlemanWunsch">
            <summary>
            Gets an instance of NeedlemanWunschAligner class which implements
            the NeedlemanWunsch algorithm for global alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.PairwiseOverlap">
            <summary>
            Gets an instance of PairwiseOverlapAligner class which implements
            pairwise overlap alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.MUMmer">
            <summary>
            Gets an instance of MUMmer3 class which implements
            the MUMmer algorithm for partial alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.NUCmer">
            <summary>
            Gets an instance of NUCmer3 class which implements
            the NUCmer algorithm for alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.All">
            <summary>
            Gets the list of all aligners which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmerAttributes">
            <summary>
            This class extends MUMmerAttributes and adds NUCmer specific attributes
            required to run the NUCmer algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MUMmerAttributes">
            <summary>
            This class extends PairwiseAlignmentAttributes and adds MUMmer specific attributes
            required to run the MUMmer algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes">
            <summary>
            This class implements IAlignmentAttributes interface and defines all the 
            parameters required to run any pairwise algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IAlignmentAttributes">
            <summary>
            Aligners will implements this interface to list the attributes supported
            or required.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.SimilarityMatrix">
            <summary>
            Describes matrix that determines the score for any possible pair
            of symbols
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.GapOpenCost">
            <summary>
            Describes cost of inserting a gap character into a sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.GapExtensionCost">
            <summary>
            Describes cost of extending an already existing gap.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.attributes">
            <summary>
            List of Parameters required to run NUCmer
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.#ctor">
            <summary>
            Initializes a new instance of the PairwiseAlignmentAttributes class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmerAttributes.LengthOfMUM">
            <summary>
            Describes the Minimal length Maximal Unique Match parameter
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the MUMmerAttributes class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.FixedSeperation">
            <summary>
            Describes maximum fixed diagonal difference
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.MaximumSeparation">
            <summary>
            Describes maximum seperation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.MinimumScore">
            <summary>
            Describes Minimum Output Score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.SeparationFactor">
            <summary>
            Describes Separation Factor
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.BreakLength">
            <summary>
            Describes number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the NUCmerAttributes class.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastStatistics">
            <summary>
            Container for the Statistics segment of the XML BLAST format.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.SequenceCount">
            <summary>
            The number of sequences in the iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.DatabaseLength">
            <summary>
            Database size, for correction
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.HspLength">
            <summary>
            Effective HSP length
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.EffectiveSearchSpace">
            <summary>
            Effective search space
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.Kappa">
            <summary>
            Karlin-Altschul parameter K
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.Lambda">
            <summary>
            Karlin-Altschul parameter Lambda
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastStatistics.Entropy">
            <summary>
            Karlin-Altschul parameter H
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.NCBIBlastHandler">
            <summary>
            This class implements IBlastService interface and defines all the atomic
            operation required by the interface. NCBIQBlast will implement the client 
            side functionality required to perform Blast Search Requests against 
            the the NCBI QBlast system using their Blast URL APIs. It will need to 
            use HTTP encoded requests to talk to the NCBI web-server.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.IBlastServiceHandler">
            <summary>
            This interface will serve to define an element set which will be common 
            to the underlying web-service and transport protocol related information.
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.GetRequestStatus(System.String)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.SubmitRequest(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the Bio.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.SubmitRequest(System.Collections.Generic.IList{Bio.ISequence},Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the Bio.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.GetResult(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Gets the search results for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into MBF
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.FetchResultsSync(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="requestIdentifier">Identifier for the request of interest</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.IBlastServiceHandler.CancelRequest(System.String)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="E:Bio.Web.Blast.IBlastServiceHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.IBlastServiceHandler.Description">
            <summary>
            Gets user-friendly implementation description
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.IBlastServiceHandler.Name">
            <summary>
            Gets user-friendly implementation name
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.IBlastServiceHandler.Configuration">
            <summary>
            Gets or sets settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.RETRYINTERVAL">
            <summary>
            Default interval of time in seconds to check the status of job
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.NOOFRETRIES">
            <summary>
            Default number of retries to be made to check the status
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.STATUSWAITING">
            <summary>
            Job Status is running
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.STATUSREADY">
            <summary>
            Job status is completed successfully
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERDATABASE">
            <summary>
            Database parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERPROGRAM">
            <summary>
            Program parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERQUERY">
            <summary>
            QUERY parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERFILTER">
            <summary>
            FILTER parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERGENETICCODE">
            <summary>
            GENETIC CODE parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERCMD">
            <summary>
            Command type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERRID">
            <summary>
            Request Identifier type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETEREMAIL">
            <summary>
            Email type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERSTRAND">
            <summary>
            STRAND type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERSENSITIVITY">
            <summary>
            SENSITIVITY type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERFORMATTYPE">
            <summary>
            Output format type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERCOMMAND">
            <summary>
            Command parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERJOBID">
            <summary>
            Request Identifier parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.PARAMETERFORMAT">
            <summary>
            Format type parameter
            (expected fromat type parameter)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.COMMANDPUT">
            <summary>
            Put value for Command parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.COMMANDGET">
            <summary>
            Get value for Command parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler.FORMATXML">
            <summary>
            Get value for format type parameter
            (XML output request)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler._blastParser">
            <summary>
            Parser object that can parse the Blast Output
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler._workerThread">
            <summary>
            Background worker thread that tracks the status of job and notifies
            user on completion.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.NCBIBlastHandler._configuration">
            <summary>
            Settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.#ctor(Bio.Web.Blast.IBlastParser,Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the NCBIBlastHandler class. 
            </summary>
            <param name="parser">Parser to parse the Blast output</param>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.#ctor(Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the NCBIBlastHandler class. 
            </summary>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.#ctor">
            <summary>
            Initializes a new instance of the NCBIBlastHandler class. 
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.SubmitRequest(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters 
            and sequence. Implementation should make use of the Bio.IO formatters 
            to convert the sequence into the web interface compliant sequence format.
            This method performs parameter validation and throw Exception on invalid input.
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.SubmitRequest(System.Collections.Generic.IList{Bio.ISequence},Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the Bio.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequences">List of sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.GetRequestStatus(System.String)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.GetResult(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Gets the search results for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into MBF
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.FetchResultsSync(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="requestIdentifier">Identifier for the request of interest</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.CancelRequest(System.String)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.ExtractInfoSection(System.String)">
            <summary>
            Find the QBlastInfoBegin section where the request ID is stored
            </summary>
            <param name="response">Web response string</param>
            <returns>Information section string</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.ExtractBlastErrorSection(System.String)">
            <summary>
            Look for a blast error message in the response. Try to be robust
            with respect to possible changes in formatting, etc.
            </summary>
            <param name="response">Web response string</param>
            <returns>Error section string</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.ExtractError(System.String)">
            <summary>
            Error message is contained in list element with id msgR
            Here is the html structure
            <ul id="msgR" class="msg">
                <li class="error">
                    <div class="error msInf">
                        {Error message}
                    </div>
                </li>
            </ul>
            </summary>
            <param name="response">Response string</param>
            <returns>Error message</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.ProcessRequestThread(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Process the request. This method takes care of executing the rest of the steps
            to complete the blast search request in a background thread. Which involves
            1. Submit the job to server
            2. Ping the service with the request identifier to get the status of request.
            3. Repeat step 1, at "RetryInterval" for "RetryCount" till a "success"/"failure" 
                status.
            4. If the status is a "failure" raise an completed event to notify the user 
                with appropriate details.
            5. If the status "success". Get the output of search from server in xml format.
            6. Parse the xml and the framework object model.
            7. Raise the completed event and notify user with the output.
            </summary>
            <param name="sender">Client request NCBI Blast search</param>
            <param name="argument">Thread event argument</param>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.CompletedRequestThread(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is invoked when request status is completed
            </summary>
            <param name="sender">Invoker of the event</param>
            <param name="argument">Event arguments</param>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.ValidateParameters(Bio.Web.Blast.BlastParameters)">
            <summary>
            Check the currently set parameters for validity
            </summary>
            <param name="parameters">Blast input parameters</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:Bio.Web.Blast.NCBIBlastHandler.InitializeConfiguration">
            <summary>
            Initialize the configuration properties
            </summary>
        </member>
        <member name="E:Bio.Web.Blast.NCBIBlastHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.Configuration">
            <summary>
            Gets or sets settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.Description">
            <summary>
            Gets user-friendly implementation description
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.Name">
            <summary>
            Gets user-friendly implementation name
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.Parser">
            <summary>
            Gets an instance of object that can parse the Blast Output
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.RetryInterval">
            <summary>
            Gets or sets the number of seconds between retries when a service request is pending. (This
            specifies the first interval, and subsequent retries occur at increasing multiples.)
            The caller can override the default by setting ConfigurationParameters.RetryInterval.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.RetryCount">
            <summary>
            Gets or sets the number of times to retry when a service request is pending. The caller
            can override the default value by setting ConfigurationParameters.RetryCount.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.NCBIBlastHandler.ServiceUri">
            <summary>
            Get the base URI to use for requests to the service. By default, 
            this is the BaseUri property, but caller can override by specifying
            a different URI in the ConfigurationParameters structure.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Kmer">
            <summary>
            Contains information regarding k-mer
            and its position, count in a sequence
            </summary>
        </member>
        <member name="T:Bio.Algorithms.IKmer">
            <summary>
            Contains information regarding k-mer
            and its position, count in a sequence
            </summary>
        </member>
        <member name="M:Bio.Algorithms.IKmer.IncreaseCount(System.Int32)">
            <summary>
            Update count and position list in sequence for k-mer
            </summary>
            <param name="pos">k-mer starting index in sequence</param>
        </member>
        <member name="P:Bio.Algorithms.IKmer.KmerSequence">
            <summary>
            Gets the k-mer sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.IKmer.Count">
            <summary>
            Gets the number of times this k-mer occurs in sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.IKmer.Positions">
            <summary>
            Gets the positions within sequence where the k-mer occurs
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.kmer">
            <summary>
            k-mer sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.count">
            <summary>
            Number of times this k-mer occurs in sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.positions">
            <summary>
            Positions within sequence where the k-mer occurs
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.#ctor(Bio.ISequence,System.Int32)">
            <summary>
            Initializes a new instance of the Kmer class.
            Takes k-mer sequence and occuring position.
            </summary>
            <param name="seq">k-mer sequence</param>
            <param name="pos">Starting index in sequence for k-mer</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.BuildKmer(Bio.ISequence,System.Int32)">
            <summary>
            Slide the window along the sequence, and calculate kmer counts and positions.
            </summary>
            <param name="sequence">input sequence (unaligned)</param>
            <param name="kmerLength">positive integer kmer length</param>
            <returns>List of Kmers occuring in input sequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.IncreaseCount(System.Int32)">
            <summary>
            Update count and position list in sequence for k-mer
            </summary>
            <param name="pos">k-mer starting index in sequence</param>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerSequence">
            <summary>
            Gets the k-mer sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.Count">
            <summary>
            Gets the count for this k-mer
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.Positions">
            <summary>
            Gets the list of positions associated with this k-mer
            </summary>
        </member>
        <member name="T:Bio.ISequence">
            <summary>
            Implementations of ISequence make up the one of the core sets
            of data structures in MBF. It is these sequences that store
            data relevant to DNA, RNA, and Amino Acid structures. Several
            algorithms for alignment, assembly, and analysis take these items
            as their basic data inputs and outputs.
            
            At its core, ISequence stores an ordered list of ISequenceItem,
            which in term can represent things like Nucleotides or Amino Acids.
            These can be accessed using any method made available through IList.
            You can also work with the sequence as a string by using the ToString()
            method which will decode the items in the list into a standard,
            readable format.
            
            The basic implementation of this interface is Sequence, which stores
            byte codes for the sequence items. Additional implementations include
            VirtualSequence, SegmentedSequence, and SparseSequence.
            
            ISequence extends from ICloneable interface this will enable 
            ISequence instances to create copies of them. 
            Calling Clone() method will create a copy of the ISequence.
            </summary>
        </member>
        <member name="M:Bio.ISequence.ToString">
            <summary>
            Converts the list of sequence items into a more readable representation.
            This form may be particularly helpful for those users who are more
            familiar with string operations on sequences than iterating over
            individual entries.
            </summary>
            <returns>
            A string representation of the sequence data. For DNA a result
            may look like "GATTCAAG" for instance.
            </returns>
        </member>
        <member name="M:Bio.ISequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:Bio.ISequence.Insert(System.Int32,System.Char)">
            <summary>
            Insert a single sequence item represented as a decodable character.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.ISequence.InsertRange(System.Int32,System.String)">
            <summary>
            Insert sequence item(s) represented as a string of decodable characters.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.ISequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a series of items from the sequence.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:Bio.ISequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the item at the indicated position with a single item from a decodable character.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.ISequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Replaces the item at the indicated position with a new item.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:Bio.ISequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the item at the indicated position with a string of decodable item(s).
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.ISequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item beyond startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character before the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.Clone">
            <summary>
            Creates a new ISequence that is a copy of the current ISequence.
            </summary>
            <returns>A new ISequence that is a copy of this ISequence.</returns>
        </member>
        <member name="P:Bio.ISequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.ISequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.ISequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Statistics">
            <summary>
            Keeps track of the number of occurrences of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.ISequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.ISequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.XsvContigFormatter">
            <summary>
            This class will write a contig as a list of sparse sequences using the 
            XsvSparseFormatter. The first sequence is the consensus, and the rest are
            the assembled sequences offset from the consensus. 
            E.g. formatting a Contig with 2 assembled sequences, using '#' as sequence prefix and ',' as character separator.
            # 0,100,Consensus
            12,A
            29,T
            39,G
            #3,10,Fragment1
            9,A
            #25,20,Fragment2
            4,T
            14,G
            </summary>
        </member>
        <member name="T:Bio.IO.XsvSparseFormatter">
            <summary>
            This class will write a sparse sequence to a character separated value file,
            with one line per sequence item. The sequence ID, the sequence count and 
            offset (if provided) will be written as a comment to a sequence start line.
            Multiple sparse sequences can be written with the sequence start line
            acting as delimiters.
            E.g. formatting with '#' as sequence prefix and ',' as character separator
            #0,100, A sparse sequence of length 100 with 2 items
            12,A
            29,T
            #3,10, A sparse sequence of length 10 at offset 3 with 1 item
            2,G
            #0,10, A sparse sequence of length 15 with no items
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceFormatter">
            <summary>
            Implementations of this interface write an ISequence to a particular location, usually a
            file. The output is formatted according to the particular file format. A method is
            also provided for quickly accessing the content in string form for applications that do not
            need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.ISequenceFormatter.Format(Bio.ISequence,System.String)">
            <summary>
            Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.ISequenceFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a writer.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequences.</param>
        </member>
        <member name="M:Bio.IO.ISequenceFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.String)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences.</param>
        </member>
        <member name="M:Bio.IO.ISequenceFormatter.FormatString(Bio.ISequence)">
            <summary>
            Converts an ISequence to a formatted string.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:Bio.IO.ISequenceFormatter.Name">
            <summary>
            Gets the name of the sequence formatter being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceFormatter.Description">
            <summary>
            Gets the description of the sequence formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.#ctor(System.Char,System.Char)">
            <summary>
            Creates an XsvSparseFormatter to format ISequences with one 
            line per sequence item. Useful for efficient serialization of sparse 
            sequences.
            </summary>
            <param name="separator_">Seprator character to be used between sequence item 
            position and its symbol.</param>
            <param name="sequenceIDPrefix_">The character to prefix the sequence start 
            line with.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
                        Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.Format(Bio.ISequence,System.Int32,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer, 
            after adding an offset value to the position.
            
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="positionOffset">Adds this offset value to the item position within the sequence</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.Format(Bio.ISequence,System.String)">
            <summary>
                        Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.IO.TextWriter)">
            <summary>
                        Write a collection of ISequences to a writer.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequences.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.String)">
            <summary>
                        Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseFormatter.FormatString(Bio.ISequence)">
            <summary>
                        Converts an ISequence to a formatted string.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <returns>
            A string of the formatted text.
            </returns>
        </member>
        <member name="P:Bio.IO.XsvSparseFormatter.Separator">
            <summary>
            The character to separate the position and sequence item symbol on each line
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseFormatter.SequenceIDPrefix">
            <summary>
            this prefix will be printed at the start of the line with 
            the offset, count and sequence ID. This is treated as the comment 
            character prefix in the underlying XsvTextReader.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseFormatter.Name">
            <summary>
                        Gets the name of the sequence formatter being
                        implemented. This is intended to give the
                        developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseFormatter.Description">
            <summary>
                        Gets the description of the sequence formatter being
                        implemented. This is intended to give the
                        developer some information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseFormatter.FileTypes">
            <summary>
                        Gets the file extensions that the formatter implementation
                        will support.
            </summary>
        </member>
        <member name="M:Bio.IO.XsvContigFormatter.#ctor(System.Char,System.Char)">
            <summary>
             Creates a formatter for contigs using the given separator and 
             sequence start line prefix characacter.
            </summary>
            <param name="separator_">The character to separate position of the sequence 
             item from its symbol, and separate the offset, count and sequence ID in the 
             sequence start line.</param>
            <param name="sequenceIDPrefix_">The character to refix the sequence start line.</param>
        </member>
        <member name="M:Bio.IO.XsvContigFormatter.Format(Bio.Algorithms.Assembly.Contig,System.IO.TextWriter)">
            <summary>
            Formats a (sparse) contig to a charcter separated value file,
            writing the consensus first, followed by the sequence separator,
            and each assembled sequences followed by the sequence separator.
            The consensus has an offet of 0, while the assembed sequences have the
            offset as present in AssembledSequence.Position.
            </summary>
            <param name="contig">The contig to format as a set of sparse sequences.</param>
            <param name="writer">The text writer to write the formatted output to.</param>
        </member>
        <member name="T:Bio.IO.Newick.NewickFormatter">
            <summary>
            Formats a PhylogeneticTree object into newick text (usually a file). 
            The output is formatted according to the Newick format. A method is 
            also provided for quickly accessing the content in string form 
            for applications that do not need to first write to file.
            Documentation for the latest Newic file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="T:Bio.IO.IPhylogeneticTreeFormatter">
            <summary>
            Implementations of this interface write a PhylogeneticTree to a particular location, 
            usually a file. The output is formatted according to the particular file format. 
            A method is also provided for quickly accessing the content in string form for 
            applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeFormatter.Format(Bio.Phylogenetics.Tree,System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to the location specified by the writer.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic Tree text.</param>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeFormatter.Format(Bio.Phylogenetics.Tree,System.String)">
            <summary>
            Writes a PhylogeneticTree to the specified file.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="fileName">The name of the file to write the formatted Phylogenetic Tree text.</param>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeFormatter.FormatString(Bio.Phylogenetics.Tree)">
            <summary>
            Converts a PhylogeneticTree to a formatted string.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeFormatter.Name">
            <summary>
            Gets the name of the Phylogenetic tree being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeFormatter.Description">
            <summary>
            Gets the description of the Phylogenetic tree formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Format(Bio.Phylogenetics.Tree,System.String)">
            <summary>
            Writes a Phylogenetic tree to the specified file.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="fileName">The name of the file to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Format(Bio.Phylogenetics.Tree,System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to the writer.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.FormatString(Bio.Phylogenetics.Tree)">
            <summary>
            Converts a PhylogeneticTree to a formatted text.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param> 
            <returns>A string of the formatted Phylogenetic tree text.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Validate(Bio.Phylogenetics.Tree)">
            <summary>
            Basic PhylogeneticTree object validation
            </summary>
            <param name="tree">PhylogeneticTree object</param>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Format(System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to a Newick format in the writer.
            </summary>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Format(Bio.Phylogenetics.Node,Bio.Phylogenetics.Edge,System.Text.StringBuilder@)">
            <summary>
            Recursive method to get each node into string
            </summary>
            <param name="node">tree node</param>
            <param name="edge">edge</param>
            <param name="stringBuilder">output newick string</param>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.Name">
            <summary>
            Gets the type of Formatter i.e NEWICK.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.Description">
            <summary>
            Gets the description of Newick formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            NewickFormatter class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a newick file.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankVersion">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankVersion.Clone">
            <summary>
            Creates a new GenBankVersion that is a copy of the current GenBankVersion.
            </summary>
            <returns>A new GenBankVersion that is a copy of this GenBankVersion.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankVersion.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankVersion that is a copy of the current GenBankVersion.
            </summary>
            <returns>A new object that is a copy of this GenBankVersion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.Accession">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.CompoundAccession">
            <summary>
            Gets the CompoundAccession that is Accession.Version.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.GINumber">
            <summary>
            GI number.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MaturePeptide">
            <summary>
            Mature peptide or protein coding sequence; coding sequence for the mature or final peptide or protein product following 
            post-translational modification; the location does not include the stop codon (unlike the corresponding CDS).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MaturePeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(System.String)">
            <summary>
            Creates new MaturePeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(Bio.IO.GenBank.MaturePeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MaturePeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.Clone">
            <summary>
            Creates a new MaturePeptide that is a copy of the current MaturePeptide.
            </summary>
            <returns>A new MaturePeptide that is a copy of this MaturePeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GCSingal">
            <summary>
            GC box; a conserved GC-rich region located upstream of the start point of eukaryotic transcription 
            units which may occur in multiple copies or in either orientation.
            Consensus=GGGCGG.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GCSingal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new GCSingal feature item from the specified location.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GCSingal.#ctor(System.String)">
            <summary>
            Creates new GCSingal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GCSingal.#ctor(Bio.IO.GenBank.GCSingal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other GCSingal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GCSingal.Clone">
            <summary>
            Creates a new GCSingal that is a copy of the current GCSingal.
            </summary>
            <returns>A new GCSingal that is a copy of this GCSingal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GCSingal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.ISequenceAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing Sequence assembler.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.ISequenceAssembler.Assemble(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>Returns the SequenceAssembly instance which contains list of 
            contigs and list of unmerged sequences which are result of this assembly.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold that determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembler.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairWiseAligner">
            <summary>
            Enum for pair wise algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairWiseAligner.NEEDLEMAN_WUNSCH">
            <summary>
            Needleman Wunsch Aligner
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairWiseAligner.SMITH_WATERMAN">
            <summary>
            Smith Waterman Aligner
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MUMmer">
            <summary>
            MUMmer is a system for rapidly aligning entire genomes or very large protein
            sequences. It is a pair wise sequence algorithm. The algorithm assumes the 
            sequences are closely related, and using this assumption can quickly compare
            sequences that are millions of nucleotides in length. The algorithm is 
            designed to perform high resolution comparison of genome-length sequences. 
            MUMmer is the base abstract class defines contract for classes implementing
            MUMmer algorithm. Using Template Method Pattern, MUMmer defines the skeleton
            of the MUMmer algorithm and deferring some steps to drived class. 
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ISequenceAligner">
            <summary>
            A sequence aligner is an algorithm which takes N sequences as input and produces an 
            alignment of the sequences as output.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ISequenceAligner.AlignSimple(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the simple gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ISequenceAligner.Align(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the afine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.Name">
            <summary>
            Gets the name of the sequence alignment algorithm being
            implemented. This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.Description">
            <summary>
            Gets the description of the sequence alignment algorithm being
            implemented.This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.SimilarityMatrix">
            <summary>
            Gets or sets value of similarity matrix
            The similarity matrix determines the score for any possible pair
            of symbols that are encountered at a common location across the 
            sequences being aligned.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.GapOpenCost">
            <summary>
            Gets or sets value of GapOpenCost
            The GapOpenCost is the cost of inserting a gap character into 
            a sequence.
            </summary>
            <remarks>
            In the simple gap model, all gaps use this cost. In the affine gap
            model, the GapExtensionCost below is also used.
            </remarks>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.GapExtensionCost">
            <summary>
            Gets or sets value of GapExtensionCost 
            The GapExtensionCost is the cost of extending an already existing gap.
            This is used for the affine gap model, not used for the simple gap model.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer.AlignmentChar">
            <summary>
            Alignment Char
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer._referenceSequence">
            <summary>
            Holds the reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer._suffixTree">
            <summary>
            Holds a reference Suffix tree.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer._mumList">
            <summary>
            List of mum.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer._sortedMumList">
            <summary>
            List of sorted mums.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer._finalMumList">
            <summary>
            List of final mums.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.#ctor">
            <summary>
            Initializes a new instance of the MUMmer class.
            Constructor for all the pairwise aligner 
            (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalty.
            Users will typically reset these using parameters 
            specific to their particular sequences
            and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.AlignSimple(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Align the list of input sequences using simple gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.AlignSimple(Bio.ISequence,System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Align the reference sequence and query sequences using simple gap model.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.Align(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the afine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.Align(Bio.ISequence,System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
             Align aligns the reference sequence with querly sequences using the affine gap model 
             (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">Reference sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.Streaming(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.SortMum(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Sort the MUM list in increasing order of its position in reference sequence
            </summary>
            <param name="mumList">List of MUMs</param>
            <returns>Sorted list of MUMs</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.CollectLongestIncreasingSubsequence(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the MUMs in the order of Longest Increasing Subsequence using position 
            in query sequence
            </summary>
            <param name="sortedMumList">Sorted list of MUMs</param>
            <returns>MUMs in longest increasing subsequence order</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.CreateDefaultGap(System.Int32)">
            <summary>
            Create a default gap sequence of given length, pad the symbol - in sequence
            </summary>
            <param name="length">Length of gap</param>
            <returns>hyphen padded sequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.DetermineSequence(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Determine the reference sequence and query sequences from list of input sequences.
            </summary>
            <param name="inputSequences">Sequences needs to be aligned</param>
            <returns>A sequence alignment object</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.Alignment(Bio.ISequence,System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.Validate(Bio.ISequence,System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Validate the inputs
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.RunPairWise(Bio.ISequence,Bio.ISequence)">
            <summary>
            Get the alignment using pair wise
            </summary>
            <param name="seq1">Sequence 1</param>
            <param name="seq2">Sequence 2</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.ProcessGaps(Bio.ISequence,Bio.ISequence)">
            <summary>
            get all the gaps in each sequence and call pairwise alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="sequence">Query sequence</param>
            <returns>Aligned sequences</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer.AlignGap(Bio.ISequence,Bio.ISequence,Bio.ISequence,Bio.ISequence,Bio.ISequence,Bio.Algorithms.Alignment.MaxUniqueMatch,Bio.Algorithms.Alignment.MaxUniqueMatch)">
            <summary>
            Align the Gap by executing pairwise alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query Sequence</param>
            <param name="sequenceResult1">Editable sequence containing alignment first result</param>
            <param name="sequenceResult2">Editable sequence containing alignment second result</param>
            <param name="consensusResult">Editable sequence containing consensus sequence</param>
            <param name="mum1">First MUM of Gap</param>
            <param name="mum2">Second MUM of Gap</param>
            <returns>Score of alignment</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.LengthOfMUM">
            <summary>
            Gets or sets the length of MUM
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.PairWiseAlgorithm">
            <summary>
            Gets or sets the pair wise aligner which will be executed 
            by end of Mummer
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer.UseGapExtensionCost">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastSearchRecord">
            <summary>
            A single result from a sequence search, such as any of the various flavors of BLAST.
            This is referred to as an Iteration in the BLAST XML schema; some flavors (such as
            PSI-BLAST) can combine multiple interations into one XML document.
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.BlastSearchRecord.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.Hits">
            <summary>
            The set of hits associated with this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.IterationNumber">
            <summary>
            The index for this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.IterationQueryID">
            <summary>
            The ID of the query which generated this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.IterationQueryDefinition">
            <summary>
            The definition of the query which generated this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.IterationQueryLength">
            <summary>
            The length of the query which generated this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.IterationMessage">
            <summary>
            A human-readable message associated with this iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastSearchRecord.Statistics">
            <summary>
            The statistics returned for this iteration
            </summary>
        </member>
        <member name="T:Bio.SnpItem">
            <summary>
            Represents a single nucleotide polymporphism (Snp) at a particular
            position for a certain chromosome, with the two possible allele
            values for that position.
            </summary>
        </member>
        <member name="M:Bio.SnpItem.Equals(Bio.SnpItem)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four properties. 
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            
            <param name="other">A SnpItem to compare with this SnpItem.</param>
        </member>
        <member name="M:Bio.SnpItem.Equals(System.Object)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four properties. 
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            
            <param name="other">
            A SnpItem to compare with this SnpItem. If this parameter
            is not of type SnpItem, then false is returned.
            </param>
        </member>
        <member name="M:Bio.SnpItem.GetHashCode">
            <summary>
            Generates a unique hashcode based on the data members in the item.
            </summary>
        </member>
        <member name="P:Bio.SnpItem.Chromosome">
            <summary>
            Contains the chromosome number for the SNP
            </summary>
        </member>
        <member name="P:Bio.SnpItem.Position">
            <summary>
            Contains the position for the SNP within the sequence 
            (may be position in full sequence or offset within chromosome)
            </summary>
        </member>
        <member name="P:Bio.SnpItem.AlleleOne">
            <summary>
            Contains the first allele character for the SNP.
            </summary>
        </member>
        <member name="P:Bio.SnpItem.AlleleTwo">
            <summary>
            Contains the second allele character for the SNP.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.IupacNAEncoding">
            <summary>
            A standard encoding for nucleic acids of DNA and RNA sequences. This encoding
            allows for the common ambiguities found when sequencing DNA and RNA but does
            not allow for gap characters.
            
            An encoding that contains all of these symbols plus a gap character is found
            in Ncbi4NaEncoding and will likely be a better choice for encoding unless
            working with code or formats that require this encoding.
            
            The encoding comes from the IUPACna standard and is summarized by:
            
            Value - Symbol - Name
            
            65 - A - Adenine
            66 - B - G or T or C
            67 - C - Cytosine
            68 - D - G or A or T
            71 - G - Guanine
            72 - H - A or C or T
            75 - K - G or T
            77 - M - A or C
            78 - N - A or G or C or T
            82 - R - G or A
            83 - S - G or C
            84 - T - Thymine/Uracil
            86 - V - G or C or A
            87 - W - A or T
            89 - Y - T or C
            
            Note that the reason for the byte values found here is that they represent
            the ASCII value for the symbol.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.IEncoding">
            <summary>
            An encoding represents the mapping of an alphabet of sequence
            characters to an internal memory representation in bytes. Thus a
            small encoding implementation for DNA might show that:
            
            G goes to 0
            A goes to 1
            T goes to 2
            C goes to 3
            
            The implementations may be based on a community standard, such as
            those accepted by NCBI or IUPAC. They can also be individually
            tailored to an encoding familiar to the user.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IEncoding.LookupByValue(System.Byte)">
            <summary>
            Returns one of the items in the encoding based on the byte value
            of that item.
            </summary>
            <param name="value">The byte value to look up.</param>
        </member>
        <member name="M:Bio.IO.Encoding.IEncoding.LookupBySymbol(System.Char)">
            <summary>
            Returns one of the items in the encoding based on the character
            symbol of that item.
            </summary>
            <param name="symbol">The character symbol to look up, such as 'G' for Guanine.</param>
        </member>
        <member name="M:Bio.IO.Encoding.IEncoding.LookupBySymbol(System.String)">
            <summary>
            Returns one of the items in the encoding based on the symbol of
            that item. If the string is only composed of one character then the
            result should be the same as calling the char overload of this method.
            For instance in an amino acid encoding "Ala" or "A" could return the
            item representing Alanine.
            </summary>
            <param name="symbol">The byte value to look up.</param>
        </member>
        <member name="P:Bio.IO.Encoding.IEncoding.Name">
            <summary>
            The name of the entire encoding. Examples from the standards
            may include 'NCBI4na' or 'IUPACaa'.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IEncoding.HasGaps">
            <summary>
            Indicates if the encoding has one or more characters that represent
            a gap.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IEncoding.HasAmbiguity">
            <summary>
            Indicates if the encoding has one or more characters that represent
            an ambigous item (i.e. and item for which it is not precisely known
            what it represents)
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IEncoding.HasTerminations">
            <summary>
            Indicates if the encoding has one or more characters that represent
            terminal items.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.B">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.D">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.H">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.K">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.M">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.N">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.R">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.S">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.T">
            <summary>
            Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.V">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.W">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.IupacNAEncoding.Y">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.IupacNAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.Instance">
            <summary>
            An instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.Name">
            <summary>
            The name of this encoding is always 'IUPACna'
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.Count">
            <summary>
            The number of encoding symbols. For this encoding the result should
            always be 15.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.IupacNAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.IQualitativeSequence">
            <summary>
            Implementations of IQualitativeSequence interface will hold sequence 
            items along with their quality scores.
            </summary>
        </member>
        <member name="M:Bio.IQualitativeSequence.Add(Bio.ISequenceItem,System.Byte)">
            <summary>
            Adds a sequence item and its quality score to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.Contains(System.Byte)">
            <summary>
            Indicates if the specified quality value is contained in the sequence anywhere.
            </summary>
            <param name="qualScore">Quality score to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.IQualitativeSequence.Insert(System.Int32,Bio.ISequenceItem,System.Byte)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.Insert(System.Int32,System.Char,System.Byte)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.InsertRange(System.Int32,System.String,System.Byte)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.InsertRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.Replace(System.Int32,System.Char,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.Replace(System.Int32,Bio.ISequenceItem,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
            /// <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.ReplaceRange(System.Int32,System.String,System.Byte)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.ReplaceRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.IQualitativeSequence.Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new IQualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="P:Bio.IQualitativeSequence.Type">
            <summary>
            Gets the FastQFormatType of this IQualitativeSequence.
            </summary>
        </member>
        <member name="P:Bio.IQualitativeSequence.Scores">
            <summary>
            Gets the quality scores.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceRangeFormatters">
            <summary>
            SequenceRangeFormatter class is an abstraction class which provides instances
            and lists of all Range-Formatter currently supported by MBF.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeFormatters.bed">
            <summary>
            A singleton instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeFormatters.all">
            <summary>
            List of all supported Range-Formatters.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceRangeFormatters.Bed">
            <summary>
            Gets an instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceRangeFormatters.All">
            <summary>
            Gets the list of all range-formatters supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TransitPeptide">
            <summary>
            Transit peptide coding sequence (transit_peptide); coding sequence for an N-terminal domain of a nuclear-encoded organellar protein; 
            this domain is involved in post-translational import of the protein into the organelle.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransitPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(System.String)">
            <summary>
            Creates new TransitPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(Bio.IO.GenBank.TransitPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransitPeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.Clone">
            <summary>
            Creates a new TransitPeptide that is a copy of the current TransitPeptide.
            </summary>
            <returns>A new TransitPeptide that is a copy of this TransitPeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationBuilder">
            <summary>
            This is the default implementation of the ILocationBuilder interface.
            This class builds the location for the specified location string
            and location string for the specified location instance.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ILocationBuilder">
            <summary>
            Interface to build the location from location string and from location object to location string.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationBuilder.GetLocation(System.String)">
            <summary>
            Returns the location object for the specified location string.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationBuilder.GetLocationString(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetLocation(System.String)">
            <summary>
            Returns a location for the specified location string.
            </summary>
            <param name="location">Location stirng.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetLocationString(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns a location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.BuildLocation(System.String@)">
            <summary>
            Builds location from the specified location string.
            </summary>
            <param name="locationString">Location string.</param>
            <returns>A Location instance.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.BuilSubLocation(Bio.IO.GenBank.ILocation,System.String@)">
            <summary>
            Builds the sublocations from the specified string and places in the specified location.
            </summary>
            <param name="location">Location instance.</param>
            <param name="locationString">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetNextIndex(System.String)">
            <summary>
            Returns an integer index which indicates the next ","  or ")" character.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="T:Bio.IO.GenBank.ILocationResolver">
            <summary>
            Interface to resolve the start and end positions of a location.
            Classes which implements this interface should resolve any ambiguity in 
            the start and end positions of a location.
            Please refer LocationResolver for default implementation of this interface.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetStart(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns start position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetEnd(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns end position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by the location.
            If a feature location and the sequence in which the feature is present is 
            specified then the output sequence will contain the bases related to the feature.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occure.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInStart(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the startdata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInEnd(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the enddata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInRange(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="T:Bio.IO.GenBank.Exon">
            <summary>
            Exon is a region of genome that codes for portion of spliced mRNA, rRNA and tRNA; may contain 5'UTR,
            all CDSs and 3' UTR.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Exon feature item from the specified location.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(System.String)">
            <summary>
            Creates new Exon feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(Bio.IO.GenBank.Exon)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Exon instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.Clone">
            <summary>
            Creates a new Exon that is a copy of the current Exon.
            </summary>
            <returns>A new Exon that is a copy of this Exon.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Attenuator">
            <summary>
            Region of DNA at which regulation of termination of transcription occurs, 
            which controls the expression of some bacterial operons.
            Sequence segment located between the promoter and the first structural gene that 
            causes partial termination of transcription.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(System.String)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(Bio.IO.GenBank.Attenuator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Attenuator instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.Clone">
            <summary>
            Creates a new Attenuator that is a copy of the current Attenuator.
            </summary>
            <returns>A new Attenuator that is a copy of this Attenuator.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="T:Bio.CompoundAminoAcid">
            <summary>
            CompoundAminoAcid supports, storing more than one amino acids with their weight in one base entry.
            For example,
             Consider the below sequence where {D|N} could have statistical values of 30% and 65% and
             {C|G|T} could have 30% each (they dont necessarily have to sum upto 100)
                GATTADAGCTA
                     N  G
                        T
            Above sequence items {D|N} and {C|G|T} can be represented in compound sequence items like, 
            GATTARAGBTA
             Where “B” and “X” are CompoundAminoAcids.
            CompoundAminoAcid B will contain amino acids D and N with their weights.
            CompoundAminoAcid X will contain nucleotides C, G and T with their weights.
            
            This class can be used in SparseSequence.
            </summary>
        </member>
        <member name="T:Bio.AminoAcid">
            <summary>
            The amino acird implementations of ISequenceItem allows for the
            definition of the amino acid peptide sequences.
            <para>
            AminoAcid adds the ExtendedValue field to those found in ISequenceItem.
            This supports a second abbreviation beyond that of the one character
            representation.
            </para>
            <para>
            For example IUPAC and NCBI standards define Amino Acids with both one
            character and three character symbols. Thus for example Serine would have:
            </para>
            Value: 17
            Symbol: S
            ExtendedSymbol: Ser
            Name: Serine
            </summary>
        </member>
        <member name="F:Bio.AminoAcid.val">
            <summary>
            Stores encoding value
            </summary>
        </member>
        <member name="F:Bio.AminoAcid.symbol">
            <summary>
            A character symbol representing the item. For instance,
            symbols could include A for Alanine and G for Glycine.
            Also possible are symbols representing gaps, termination
            characters, or ambiguities.
            </summary>
        </member>
        <member name="F:Bio.AminoAcid.extSymbol">
            <summary>
            A symbol representing the item. For instance,
            symbols could include Ala for Alanine and Gly for Glycine.
            Also possible are symbols representing gaps, termination
            characters, or ambiguities.
            </summary>
        </member>
        <member name="F:Bio.AminoAcid.name">
            <summary>
            A human readable and display appropriate name for the item.
            For example, 'Alanine' or 'Glycine'.
            </summary>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.AminoAcid.#ctor">
            <summary>
            Prevents a default instance of the AminoAcid class from being created.
            </summary>
        </member>
        <member name="M:Bio.AminoAcid.Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:Bio.AminoAcid.Bio#ISequenceItem#Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:Bio.AminoAcid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.AminoAcid.System#ICloneable#Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:Bio.AminoAcid.Equals(System.Object)">
            <summary>
            Overrides Object Equals.
            Two nucleotides are judged equal, if they have the same symbol
            </summary>
            <param name="obj">Object to be compared with</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Bio.AminoAcid.GetHashCode">
            <summary>
            Get hash code for amino acid
            Uses symbol for calculation
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="P:Bio.AminoAcid.Value">
            <summary>
            Gets encoding value, unique for the particular item within its
            alphabet.
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.Symbol">
            <summary>
            Gets character symbol for amino acid
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.ExtendedSymbol">
            <summary>
            Gets extended symbol for amino acid
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.Name">
            <summary>
            Gets the display name for the item.
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.IsGap">
            <summary>
            Gets a value indicating whether this amino acid is a Gap character
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.IsAmbiguous">
            <summary>
            Gets a value indicating whether this amino acid is an Ambiguous character
            </summary>
        </member>
        <member name="P:Bio.AminoAcid.IsTermination">
            <summary>
            Gets a value indicating whether this amino acid is a Termination character
            </summary>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param> 
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>  
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>   
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Bio.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>     
        </member>
        <member name="M:Bio.CompoundAminoAcid.GetWeight(Bio.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:Bio.CompoundAminoAcid.SetWeight(Bio.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">New weight for the item.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.Add(Bio.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:Bio.CompoundAminoAcid.Bio#ICompoundSequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:Bio.CompoundAminoAcid.Bio#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:Bio.CompoundAminoAcid.Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:Bio.CompoundAminoAcid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.CompoundAminoAcid.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="P:Bio.CompoundAminoAcid.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundAminoAcid.
            </summary>
        </member>
        <member name="T:Bio.BasicDerivedSequence">
             <summary>
             A BasicDerivedSequence is a simple type of derived sequence that 
             provides range, reversal, and complementation of a source sequence,
             and facilitates creation of other specialized subclasses.
             
             This class implements ICloneable interface. To create a copy 
             of the BasicDerivedSequence call Clone() method. For example:
             
             BasicDerivedSequence basicDerivedSeq = new BasicDerivedSequence();
             BasicDerivedSequence basicDerivedSeqCopy = basicDerivedSeq.Clone();
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="T:Bio.IDerivedSequence">
            <summary>
            Classes which implements this interface will provide additional functionality 
            for the source sequence.
            </summary>
        </member>
        <member name="P:Bio.IDerivedSequence.Source">
            <summary>
            The sequence (if any) from which this sequence was derived.
            </summary>
        </member>
        <member name="M:Bio.BasicDerivedSequence.#ctor(Bio.ISequence,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Construct a derived sequence, specifying all properties.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="reversed">Whether to reverse the symbol order.</param>
            <param name="complemented">Whether to complement the symbols.</param>
            <param name="rangeStart">The first symbol index (in the original) wanted.</param>
            <param name="rangeLength">0 to return all symbols, or the number of symbols wanted.</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            Source property of cloned BasicDerivedSequence will contains a cloned copy of the 
            Source property of current BasicDerivedSequence.
            </summary>
            <returns>A new BasicDerivedSequence that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter. This does not do a symbol
            comparison. The match must be the exact same ISequenceItem.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Clear">
            <summary>
            Removes all sequence data from the Sequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            Note that the SequenceItem must be taken from the alphabet defined
            for this sequence in order for this method to return true.
            </summary>
            <param name="item">The SequenceItem to check for the existance of in a Sequence</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
             <summary>
             Copies the sequence items into a preallocated array.
             </summary>
            
             <param name="array">An array of SequenceItems to which sequence items are copied</param>
             <param name="arrayIndex">The index of the array in which to start the copy</param> 
        </member>
        <member name="M:Bio.BasicDerivedSequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the first instance found of a particular sequence item.
            This item must be from the alphabet defined for the Sequence.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.ToString">
            <summary>
            Return the string representation of the Source sequence, as
            modified by this object's properties.
            </summary>
            <returns>The string representing the sequence.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            </summary>
            <returns>A new ISequence that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            </summary>
            <returns>A new object that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.BasicDerivedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the BasicDerivedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Reversed">
            <summary>
            True if the source symbols will be reversed.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Complemented">
            <summary>
            True if the source symbols will be complemented.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.RangeStart">
            <summary>
            If positive, an offset into the source sequence.
            Otherwise the starting source index is zero.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.RangeLength">
            <summary>
            If positive, the number of symbols the virtual sequence should present.
            Otherwise the length is not limited.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            A BasicDerivedSequence does not support editing of the underlying
            sequence, and is always read-only.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.  This is
            recalculated each time the getter is called, in case there has been a change to the
            source sequence.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequence.Source">
            <summary>
            The Source sequence is the underlying sequence from which this virtual
            sequence is derived.
            </summary>
        </member>
        <member name="T:Bio.BasicDerivedSequenceEnumerator">
            <summary>
            Enumerator implementation for the BasicDerivedSequence class
            </summary>
        </member>
        <member name="M:Bio.BasicDerivedSequenceEnumerator.#ctor(Bio.BasicDerivedSequence)">
            <summary>
            Constructs an enumerator for a BasicDerivedSequence object.
            </summary>
        </member>
        <member name="M:Bio.BasicDerivedSequenceEnumerator.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:Bio.BasicDerivedSequenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item
            </summary>
            <returns>True if the enumerator can advance. False if the end of the sequence is reached.</returns>
        </member>
        <member name="M:Bio.BasicDerivedSequenceEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the sequence
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequenceEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:Bio.BasicDerivedSequenceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmerAligner">
            <summary>
            Implements algorithm to extend given pair of sequences in
            specified direction. This implementation is specific to NUCmer.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DirectionFlag">
            <summary>
            Direction in which the method has to be implemented
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.AlignFlag">
            <summary>
            Perform alignment
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.OptimalFlag">
            <summary>
            Maximise the alignment score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.SeqendFlag">
            <summary>
            Align till end of shortest sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.ForwardAlignFlag">
            <summary>
            Align forward till the score or target reached
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.BackwardAlignFlag">
            <summary>
            Align backward till the score or target reached
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.ForcedFlag">
            <summary>
            Force the alignment till the end irrespective of the score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.ForcedForwardAlignFlag">
            <summary>
            Ignore score and align to reach the target
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.MaximumAlignmentLength">
            <summary>
            Maximum number of bases till the alignment can be extended
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DefaultBreakLength">
            <summary>
            Number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DefaultValidScore">
            <summary>
            Default valid score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DefaultSubstitutionScore">
            <summary>
            
            Default substitution score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DefaultGapOpeningScore">
            <summary>
            Default gap opening score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.StopCharacter">
            <summary>
            Use this character if non alphabet is encountered in sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.DeleteState">
            <summary>
            Represents deletion at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.InsertState">
            <summary>
            Represents insertioin at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.MatchState">
            <summary>
            Represents a match at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.StartState">
            <summary>
            Represents a start at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAligner.NoneState">
            <summary>
            unknown state at the given base
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.#ctor">
            <summary>
            Initializes a new instance of the NUCmerAligner class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.ExtendSequence(Bio.ISequence,System.Int32,System.Int32@,Bio.ISequence,System.Int32,System.Int32@,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Performs the function specified by the methodName on given pair of
            sequences, represented by the start and end indices.
            Find the diagonal in which the highest score is achieved
            1. Find the dimension of score matrix
            2. Calculate diagonals till maximum score is reached or the end 
                    (free the Nodes memory as when the values are no more required)
                a. Create and fill the Matrix
                b. Trim unrequired diagonal nodes (left)
                c. Trim unrequired diagonal nodes (right)
            3. Trace the path back to the highest scoring diagonal and generate the delta
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceStart">Start index of the reference sequence</param>
            <param name="referenceEnd">End index of the reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryStart">Start index of the query sequence</param>
            <param name="queryEnd">End index of the query sequence</param>
            <param name="deltas">List of deltas</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Is aligned</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.SetScore(Bio.Algorithms.Alignment.Score,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the score of operation
            </summary>
            <param name="currentScore">Current Score</param>
            <param name="deleteScore">Score of delete</param>
            <param name="insertScore">Score of Insert</param>
            <param name="matchScore">Score of match</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.GetMaximumScore(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Score})">
            <summary>
            Find the Maximum Score in given list
            </summary>
            <param name="scores">List of scores</param>
            <returns>Maximum score</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.GenerateDelta(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Diagonal},System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Generate the list of delta
            </summary>
            <param name="diagonals">List of diagonals</param>
            <param name="counter">diagonal index</param>
            <param name="currentDiagonal">Current diagonal index</param>
            <param name="length">Length of sequence</param>
            <param name="deltas">list of Deltas</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAligner.GetMatchScore(System.Int32,System.Int32,Bio.ISequence,System.Int32,Bio.ISequence,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the Score of the given match
            </summary>
            <param name="diagonalCounter">diagonal counter</param>
            <param name="diagonalIndex">diagonal index</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceIndex">Index of symbol in reference</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryIndex">Index of symbol in query</param>
            <param name="length">Length of diagonal</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>match Score</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmerAligner.ValidScore">
            <summary>
            Gets or sets valid score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmerAligner.SubstitutionScore">
            <summary>
            Gets or sets substitution score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmerAligner.SimilarityMatrix">
            <summary>
            Gets or sets diagonal score to be used to calculate scores.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmerAligner.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmerAligner.GapOpeningScore">
            <summary>
            Gets or sets gap opening score
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Score">
            <summary>
            Structure to hold the Score value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Score.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Score.State">
            <summary>
            Gets or sets the state
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Node">
            <summary>
            Structure to hold the Node value
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Node.#ctor">
            <summary>
            Initializes a new instance of the Node class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Node.Scores">
            <summary>
            Gets or sets the List of Score of given node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Node.MaximumScore">
            <summary>
            Gets or sets the maximum score of give node
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Diagonal">
            <summary>
            Structure to hold the Diagonal value
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Diagonal.#ctor">
            <summary>
            Initializes a new instance of the Diagonal class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Left">
            <summary>
            Gets or sets left index of diagonal
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Right">
            <summary>
            Gets or sets right index of diagonal
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Nodes">
            <summary>
            Gets or sets the list of nodes
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IClusterBuilder">
            <summary>
            Contract defined to implement class that creates clusters.
            Takes list of maximum unique matches as input and creates clusters
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IClusterBuilder.BuildClusters(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Build the list of clusters for given MUMs
            </summary>
            <param name="matches">List of MUMs</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum seperation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets seperation factor. Fraction equal to 
            (diagonal difference / match seperation) where higher values
            increase the indel tolerance
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Cluster">
            <summary>
            An ordered list of matches between two a pair of sequences
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.ReverseDirection">
            <summary>
            Represents reverse query sequence direction
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.ForwardDirection">
            <summary>
            Represents forward query sequence direction
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Cluster.#ctor(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Initializes a new instance of the Cluster class
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.Matches">
            <summary>
            Gets or sets list of maximum unique matches inside the cluster
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.QueryDirection">
            <summary>
            Gets or sets the query sequence direction
                FORWARD or REVERSE
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.IsFused">
            <summary>
            Gets or sets a value indicating whether the cluster is already fused
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.RequestCompletedEventArgs">
            <summary>
            Event arguments used to notify the user when the job is completed.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._isSearchSuccessful">
            <summary>
            Is the search successfull
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._searchResult">
            <summary>
            Result of blast search
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._errorMessage">
            <summary>
            Error message on failure
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._error">
            <summary>
            Exception occured
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._requestIdentifier">
            <summary>
            Job identifier
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.RequestCompletedEventArgs._isCancelled">
            <summary>
            Is this request cancelled.
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.RequestCompletedEventArgs.#ctor(System.String,System.Boolean,System.Collections.Generic.IList{Bio.Web.Blast.BlastResult},System.Exception,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RequestCompletedEventArgs class
            </summary>
            <param name="requestIdentifier">Job identifier</param>
            <param name="isSearchSuccessful">Is search successfull</param>
            <param name="searchResult">Search result records</param>
            <param name="error">Exception if any</param>
            <param name="errorMessage">Error message if any</param>
            <param name="isCancelled">Was request cancelled</param>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.IsSearchSuccessful">
            <summary>
            Gets a value indicating whether the search  is successfull
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.SearchResult">
            <summary>
            Gets result of blast search
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.ErrorMessage">
            <summary>
            Gets the error message on failure
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.Error">
            <summary>
            Gets the Exception occured
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.RequestIdentifier">
            <summary>
            Gets job identifier
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.RequestCompletedEventArgs.IsCancelled">
            <summary>
            Gets a value indicating whether the search  is cancelled.
            </summary>
        </member>
        <member name="T:Bio.Util.Perf">
            <summary>
            Performance counters
            </summary>
        </member>
        <member name="M:Bio.Util.Perf.Start(System.String)">
            <summary>
            Start the meters
            </summary>
            <param name="name">method name</param>
        </member>
        <member name="M:Bio.Util.Perf.End">
            <summary>
            End it and write into log file
            </summary>
        </member>
        <member name="T:Bio.Util.Options">
            <summary>
            A flexible options class, implemented as a dictionary that maps key strings
            to lists of one or more value strings. The static Options.Global object holds
            library-wide options.
            </summary>
        </member>
        <member name="F:Bio.Util.Options.Global">
            <summary>
            Options.Global is the storehouse for options that are effective across all
            of the MBF library. The settings can be persisted across sessions if desired.
            </summary>
        </member>
        <member name="M:Bio.Util.Options.#ctor(System.String[])">
            <summary>
            Parse one or more options strings into a dictionary, allowing multiple values per key.
            The format of options strings is flexible. One string can contain one, or more than
            one setting (separated by ';' if multiple). Each setting is either of the form 
            "key=value", or simply "key" (resulting in a null value, as does "key=".
            </summary>
            <param name="args">A variable list of options strings.</param>
        </member>
        <member name="M:Bio.Util.Options.Add(System.String,System.String)">
            <summary>
            Ensure a value is on the list for a key.
            note that this does not check for the value already being present.
            </summary>
            <param name="key">The key to add, unless already present.</param>
            <param name="val">The value to add (unconditionally).</param>
        </member>
        <member name="M:Bio.Util.Options.Set(System.String,System.String)">
            <summary>
            Like Add, but removes any existing value for the key, replacing it
            with the new, single value.
            </summary>
            <param name="key">The key to create.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Bio.Util.Options.Get(System.String)">
            <summary>
            Return the value for the key (or an empty string if there is no value).
            This should only be called if the key is known to be single-valued; it
            will throw an exception if there are multiple values.
            </summary>
            <param name="key">The key.</param>
            <returns>The single string value, or an empty string.</returns>
        </member>
        <member name="M:Bio.Util.Options.Delete(System.String)">
            <summary>
            Delete the key and any associated values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Bio.Util.Options.Delete(System.String,System.String)">
            <summary>
            If the key/value pair exists, delete it. Does not delete the key,
            or any other values already associated with the key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value to remove, if present.</param>
        </member>
        <member name="M:Bio.Util.Options.ToString">
            <summary>
            Turn all the options settings into a string that is human-readable,
            and can also be parsed back into an Options object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bio.SimpleConsensusResolver">
            <summary>
            Calculate the consensus for a list of symbols using simple frequency fraction method.
            Normal (non-gap) symbols are given a weight of 100. 
            The confidence of a symbol is the sum of weights for that symbol, 
            divided by the total number of symbols occuring at that position. 
            If symbols have confidence >= threshold, symbol corresponding 
            to set of these high confidence symbols is used.
            If no symbol meets the threshold, symbol corresponding 
            to set of all the symbols at that position is used.
            <para>
            For ambiguous symbols, the corresponding set of base symbols are retrived.
            And for frequency calculation, each base symbol is given a weight of 
            (100 / number of base symbols).
            </para>
            </summary>
        </member>
        <member name="T:Bio.IConsensusResolver">
            <summary>
            Framework to compute the consensus for a list of symbols
            <para>
            For example, one can construct consensus for 
            a set of aligned sequences in the following way: 
            Sequence 1: A G T C G A
            Sequence 2: A G G C - A
            Sequence 3: A G G T G -
            Consensus : A G G C G A
            </para>
            <para>
            In the example here, we might choose the character that 
            occurs maximum number of times for consensus
            This means that consensus for characters at position 1: {A, A, A} is A,
            while consensus for characters at position 3: {T, G, G} is G, and so on.
            </para>
            This interface provides the framework for consensus generation. 
            Implement this interface to provide different implementations 
            for building consensus.
            </summary>
        </member>
        <member name="M:Bio.IConsensusResolver.GetConsensus(System.Collections.Generic.List{Bio.ISequenceItem})">
            <summary>
            Find consensus symbol for a list of symbols
            </summary>
            <param name="items">List of input symbols</param>
            <returns>Consensus Symbol</returns>
        </member>
        <member name="P:Bio.IConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet
            </summary>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets user parameter threshold.
            </summary>
            <param name="threshold">Threshold Value</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(Bio.IAlphabet,System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet</param>
            <param name="threshold">Threshold Value</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(Bio.IAlphabet)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets default value for threshold.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.GetConsensus(System.Collections.Generic.List{Bio.ISequenceItem})">
            <summary>
            Gets consensus symbols for the input list, 
            using frequency fraction method.
            Refer class summary for more details.
            </summary>
            <param name="items">List of input symbols</param>
            <returns>Consensus Symbol</returns>
        </member>
        <member name="P:Bio.SimpleConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet
            </summary>
        </member>
        <member name="P:Bio.SimpleConsensusResolver.Threshold">
            <summary>
            Gets or sets threshold value - used when generating consensus symbol
            The confidence level for a position must equal or exceed Threshold for
            a non-gap symbol to appear in the consensus at that position.
            </summary>
        </member>
        <member name="T:Bio.SegmentedSequence">
             <summary>
             SegmentedSequence contains a list that can hold sequences; a large sequence can be 
             fragmented into list of sequences and stored in an instance of this class.
             For example:
             Consider a DNA sequence "ATGCATGCTTGTGCATGCCCGA" which is fragmented in to following 
             three sequences "ATGCATGC", "TTGTGCATGC" and "CCGA". Following code shows how to 
             create a segmented sequence from these sequences.
             
             List&lt;ISequence&gt; sequenceList= new List&lt;ISequence&gt;();
             sequenceList.Add(new Sequence(Alphabets.DNA, "ATGCATGC");
             sequenceList.Add(new Sequence(Alphabets.DNA, "TTGTGCATGC");
             sequenceList.Add(new Sequence(Alphabets.DNA, "CCGA");
             
             SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequenceList);
             The sequence data can be accessed in following ways.
             1. Using ToString() method
             string  nucleotides = mySegmentedSequence.ToString() ;
             Provides the string representation of the entire sequence, thus nucleotides will contain "ATGCATGCTTGTGCATGCCCGA".
              
             2. Using enumerator
             foreach (Nucleotide nucleotide in mySegmentedSequence) { ... }
             This is by treating the SegmentedSequence as a list of SequenceItems.
             
             3. Using indexer
             Nucleotide nucleotide = mySegmentedSequence[9];
             Indexer is a zero based array representation of ISequenceItems, thus nucleotide will contain “T”.
             
             4. Using Sequences property
                Sequences property can be used to access the list of ISequences in the SegmentedSequence.
                
                foreach(ISequence seq in mySegmentedSequence.Sequences){...}
                In this case seqList will contain three Sequences. 
                seqList[0] will be ISequence instance containg "ATGCATGC".
                seqList[1] will be ISequence instance containg "TTGTGCATGC"
                seqList[2] will be ISequence instance containg "CCGA".
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="F:Bio.SegmentedSequence._sequences">
            <summary>
            Holds underlying sequences.
            Observable collection is used to handle the scenarios like, a new sequence 
            is inserted or replaced with the existing one and Alphabet of the new sequence 
            does not match with Alphabet of this segmented sequence.
            
            Observable collection notifies any changes to the collection through the 
            CollectionChanged event. A new sequence which is a result of an insert or 
            a replace action can be validated by listening to this event.
            </summary>
        </member>
        <member name="F:Bio.SegmentedSequence._seqInfo">
            <summary>
            Holds metadata of the sequence.
            </summary>
        </member>
        <member name="M:Bio.SegmentedSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:Bio.SegmentedSequence.#ctor(Bio.ISequence)">
            <summary>
            Creates a SegmentedSequence based on the sequence passed in via a ISequence
            parameter.
            
            Alphabet property of the created segmented sequence will be same as that of 
            the specified ISequence.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            ISequence sequence = new Sequence(Alphabets.DNA, "GATTCAAGGGCT");
            SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequence);
            
            The correlary for RNA:
            
            ISequence sequence = new Sequence(Alphabets.RNA, "GAUUCAAGGGCU");
            SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequence);
            </summary>
            <param name="sequence">
            An instance of ISequence. 
            </param>
        </member>
        <member name="M:Bio.SegmentedSequence.#ctor(System.Collections.Generic.ICollection{Bio.ISequence})">
            <summary>
            Creates a SegmentedSequence based on list of sequence passed in via a sequences
            parameter. The sequences in the list of ISequence must be of the same Alphabet 
            else an ArgumentException will occur. If sequences parameter contain any null 
            references then a ArgumentNullException will occur. 
            
            A typical use of this constructor for a DNA sequence would look like:
            
            List&lt;ISequence&gt; sequences = new List&lt;ISequence&gt;();
            sequences.Add(new Sequence(Alphabets.DNA,"GATTCAAGGGCT");
            sequences.Add(new Sequence(Alphabets.DNA,"TACATTAGGGTTCT");
            
            SegmentedSequence mySequence = new SegmentedSequence(sequences);
            
            The correlary for RNA:
            
             List&lt;ISequence&gt; sequences = new List&lt;ISequence&gt;();
            sequences.Add(new Sequence(Alphabets.RNA,"GAUUCAAGGGCU");
            sequences.Add(new Sequence(Alphabets.RNA,"AUGUCAAGUUGCU");
            
            SegmentedSequence mySequence = new SegmentedSequence(sequences);
            </summary>
            <param name="sequences">
            A list containing ISequence instances.
            </param>
        </member>
        <member name="M:Bio.SegmentedSequence.Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new SegmentedSequence that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.GetSequenceLocalPosition(System.Int32)">
            <summary>
            Returns the local index of the sequence in this SegmentedSequence for the specified position.
            Position and local index are zero based.
            
            For example:
            
            If the SegmentedSequence contains two DNA sequences "ACGCAA" and "GGCC".
            The first sequence length is 6 and second sequence length is 4 and total lenght 
            of the SegmentedSequence is 10. 
            
            Sequences                   "ACGCAA"  "GGCC"
            Segmented Sequence Index     012345    6789
            Local Index                  012345    0123
                                        
            If we pass 8 as parameter to this method, this method will returns 2 as local index.
            This is becase the position 8 corresponds to the index 2 in the second sequence.
            
            If we pass 10 as parameter to this method, this method will returns -1 as there is 
            no corresponding local index found in the sequence.
            </summary>
            <param name="position">Position for which the local index is required.</param>
            <returns>If found returns local index of the sequence in the sequence list for the 
            specified position else -1 will be returned.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.GetSequenceListIndexByPosition(System.Int32)">
            <summary>
            Returns the index of the sequence in the underlying sequences list which contains 
            the ISequenceItem at the specified position.
            </summary>
            <param name="position">Position of the ISequenceItem in this segmented sequence.</param>
            <returns>List index of the sequence which contains the ISequenceItem at the specified position.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.GetSequenceByPosition(System.Int32)">
            <summary>
            Returns the sequence in the underlying sequences list which corresponds to the specified position.
            </summary>
            <param name="position">Position of which the sequence is needed.</param>
            <returns>If found returns the Sequence else returns null.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.CreateSequence(System.String)">
            <summary>
            Creates a new sequence from the specified sequence data.
            
            IsReadOnly property of the sequence created by this method will set to false.
            
            This method uses the Alphabet of this segmented sequence for creating a new sequence and thus
            Alphabet of this segmented sequence has to be set before calling this method.
            </summary>
            <param name="sequence">Sequence data.</param>
            <returns>ISequence instance containing the specified sequence data.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.SequenceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This event will be fired when there is change in the sequence list.
            
            This method will take care of verifying the Alphabet of added, 
            inserted or replaced Sequence with the Alphabet of this instance.
            If Alphabets doesnot match then an ArgumentException will occur.
            </summary>
            <param name="sender">ObservableCollection of Sequences.</param>
            <param name="e">Event argument.</param>
        </member>
        <member name="M:Bio.SegmentedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Encodes sequence parameter and places the values obtained at the
            indicated position within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The sequence to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the sequence data from the specified position for a specified 
            number of characters.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="length">The number of characters to remove.</param>
        </member>
        <member name="M:Bio.SegmentedSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Encodes the specified sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The symbol of the item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Encodes the sequence and places it at the indicated position
            within the current sequence data, replacing the items currently
            located within that range. The number of items replaced will
            match the length of the sequence passed in.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for all underlying 
            sequences in this seqmented sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            
            If any underlying sequence does not supports tostring method then an exception will ocuur.
            </summary>
        </member>
        <member name="M:Bio.SegmentedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a readonly sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new ISequence that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:Bio.SegmentedSequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:Bio.SegmentedSequence.Clear">
            <summary>
            Removes all underlying sequences from the sequences list of SegmentedSequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:Bio.SegmentedSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
        </member>
        <member name="M:Bio.SegmentedSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Bio.SegmentedSequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the first occurrence of the specified sequence item.
            </summary>
            <param name="item">The sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new object that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:Bio.SegmentedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.SegmentedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SegmentedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.SegmentedSequence.Sequences">
            <summary>
            Sequences providers the list of sequences in this SegmentedSequence.
            
            Sequences property can be used to add, insert, replace, remove and access the sequences in this
            SegmentedSequence even though the IsReadOnly property is true. However if the IsReadOnly property 
            of this segmented sequence is false then the new sequence that has to be added, inserted or 
            replaced with existing sequence must be an editable sequence.
            
            Sequence that has to be added, inserted or replaced must have matching Alphabet of this
            SegmentedSequence else an ArgumentException will occur.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.  These are
            recalculated every time the getter as called, as the segments of the sequence may have
            been externally modified.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            Returns true if IsReadOnly property of any one of the underlying sequence is true.
            Returns false if IsReadOnly property of all underlying sequences are false.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Reverse">
            <summary>
            Return a readonly sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Complement">
            <summary>
            Return a readonly sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.ReverseComplement">
            <summary>
            Return a readonly sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:Bio.SegmentedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceSegment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSegment.Clone">
            <summary>
            Creates a new SequenceSegment that is a copy of the current SequenceSegment.
            </summary>
            <returns>A new SequenceSegment that is a copy of this SequenceSegment.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSegment.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceSegment that is a copy of the current SequenceSegment.
            </summary>
            <returns>A new object that is a copy of this SequenceSegment.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSegment.Current">
            <summary>
            Current segment number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSegment.Count">
            <summary>
            Total number of segments.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankLocusInfo">
            <summary>
            Locus provides a short mnemonic name for the sequence entry in gen bank 
            database, chosen to suggest the sequence's definition.
            
            It also contains information like Sequence type, Strand type division code etc.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankLocusInfo.Clone">
            <summary>
            Creates a new GenBankLocusInfo that is a copy of the current GenBankLocusInfo.
            </summary>
            <returns>A new GenBankLocusInfo that is a copy of this GenBankLocusInfo.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankLocusInfo.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankLocusInfo that is a copy of the current GenBankLocusInfo.
            </summary>
            <returns>A new object that is a copy of this GenBankLocusInfo.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Name">
            <summary>
            Mnemonic name for the sequence entry.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.SequenceLength">
            <summary>
            Specifies the length of the sequence present.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.SequenceType">
            <summary>
            Sequence type specifies whether the sequence is a base pair (bp) or an amino acid (aa).
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Strand">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.MoleculeType">
            <summary>
            Specifies type of the biological sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.StrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.DivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Date">
            <summary>
            Contains the date the entry was entered or underwent any substantial revisions,
            such as the addition of newly published data.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.OperonRegion">
            <summary>
            Operon is a region containing polycistronic transcript containing genes that encode enzymes 
            that are in the same metabolic pathway and regulatory sequences.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Operon feature item from the specified location.
            </summary>
            <param name="location">Location of the Operon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(System.String)">
            <summary>
            Creates new OperonRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the OperonRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(Bio.IO.GenBank.OperonRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Operon instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.Clone">
            <summary>
            Creates a new OperonRegion that is a copy of the current OperonRegion.
            </summary>
            <returns>A new OperonRegion that is a copy of this OperonRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscStructure">
            <summary>
            Any secondary or tertiary nucleotide structure or conformation that cannot be described by
            other Structure keys (stem_loop and D-loop).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscStructure feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(System.String)">
            <summary>
            Creates new MiscStructure feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(Bio.IO.GenBank.MiscStructure)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscStructure instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.Clone">
            <summary>
            Creates a new MiscStructure that is a copy of the current MiscStructure.
            </summary>
            <returns>A new MiscStructure that is a copy of this MiscStructure.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Minus35Signal">
            <summary>
            A conserved hexamer about 35 bp upstream of the start point of bacterial transcription units.
            Consensus=TTGACa or TGTTGACA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus35Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(System.String)">
            <summary>
            Creates new Minus35Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(Bio.IO.GenBank.Minus35Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus35Signal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.Clone">
            <summary>
            Creates a new Minus35Signal that is a copy of the current Minus35Signal.
            </summary>
            <returns>A new Minus35Signal that is a copy of this Minus35Signal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationResolver">
            <summary>
            This is the default implementation of ILocationResolver.
            This class resolves the start and end positions of a location.
            
            Please see the following table for how this class resolves the ambiguities in start and end data.
            
            Start/End Data		Resolved Start		Resolved End
            12.30               12      			30
            &gt;30	            30			        30
            &lt;30 	            30			        30
            23^24		        23	                24
            100^1		        1000    			1	
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.Clone">
            <summary>
            Returns the new LocationResolver instance that is a copy of this instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetStart(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the start position by resolving the startdata present in the specified location.
            If unable to resolve startdata then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetEnd(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the end position by resolving the enddata present in the specified location.
            If unable to resolve enddata then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location of a feature and sequence in which the feature is present is 
            specified then this method returns a sequence which contains the bases of the specified feature.
            
            Please note that,
            1. If Accession of the location is not null or empty then an exception will occur.
            2. If the location contains "order" operator then this method uses SegmentedSequence class to construct the sequence.
               For example, order(100..200,300..450) will result in a SegmentedSequence which internally contains two sequences, 
               first one created from 100 to 200 bases, and second one created from 300 to 450 bases.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example,
            if location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            then bases from 100 to 200 will be considered from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occure.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInStart(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the startdata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInEnd(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the enddata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInRange(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.Bio#IO#GenBank#ILocationResolver#Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the LocationResolver.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.System#ICloneable#Clone">
            <summary>
            Creates a new LocationResolver that is a copy of the current LocationResolver.
            </summary>
            <returns>A new object that is a copy of this LocationResolver.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.ResolveStart(System.String)">
            <summary>
            Resolves and returns the start position.
            </summary>
            <param name="str">Start data.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.ResolveEnd(System.String)">
            <summary>
            Resolves and returns the end position.
            </summary>
            <param name="str">End data.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(System.Int32,System.Int32,System.String,System.String,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns the sequence for the specified start and end positions.
            If the accession is null or empty then the source sequence is used to construct the output sequence,
            otherwise appropriate sequence from the referred sequence is used to construct output sequence.
            </summary>
            <param name="start">Start position.</param>
            <param name="end">End position.</param>
            <param name="accession">Accession number.</param>
            <param name="sepataror">Start and End separator.</param>
            <param name="source">Source sequence.</param>
            <param name="referredSequences">Referred Sequences.</param>
        </member>
        <member name="T:Bio.IO.GenBank.Location">
            <summary>
            Location, holds the feature location information.
            This is the default implementaion of the ILocation interface.
            This holds Start and End points of location. 
            If in case location refers to some other sequence (for example, J00194.1:1..150) 
            then the accession number information should be stored in the Accession property.
            Resolver property is used to resolve any ambiguity in the location startdata and enddata. 
            By default this will be set to an instance of LocationResolver class.  
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ILocation">
            <summary>
            Interface to hold location information.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occure.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetLeafLocations">
            <summary>
            Returns the leaf locations.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.Clone">
            <summary>
            Creates a new ILocation that is a copy of the current ILocation.
            </summary>
            <returns>A new ILocation that is a copy of this ILocation.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Start">
            <summary>
            Start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.End">
            <summary>
            End position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.StartData">
            <summary>
            Start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.EndData">
            <summary>
            End position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new Location that is a copy of this Location.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequencecs as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occure.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetLeafLocations">
            <summary>
            Gets the leaf locations present in this location.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.Bio#IO#GenBank#ILocation#Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new ILocation that is a copy of this Location.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an 
             indication of their relative values.
            </summary>
            <param name="obj">Loction instance to compare.</param>
            <returns> 
            A signed number indicating the relative values of this instance and value.
            Return Value Description Less than zero This instance is less than value.
            Zero This instance is equal to value. Greater than zero This instance is
            greater than value.  -or- value is null.
            </returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.System#ICloneable#Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new object that is a copy of this Location.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the Location.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetLeafLocations(System.Collections.Generic.List{Bio.IO.GenBank.ILocation},Bio.IO.GenBank.ILocation)">
            <summary>
            Recursively gets the leaf locations.
            </summary>
            <param name="locations">Locations list.</param>
            <param name="location">location instance.</param>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Resolver">
            <summary>
            Gets or sets the ILocationResolver instance used to resolve 
            ambiguity in startdata and enddata
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Start">
            <summary>
            Gets the start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.End">
            <summary>
            Gets the end position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.StartData">
            <summary>
            Gets or sets the start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.EndData">
            <summary>
            Gets or sets the end position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CitationReference">
            <summary>
             Citations for all articles containing data reported in this sequence.
             
            Citations in PubMed that do not fall within Medline's scope will have only
            a PUBMED identifier. Similarly, citations that *are* in Medline's scope but
            which have not yet been assigned Medline UIs will have only a PUBMED identifier.
            If a citation is present in both the PubMed and Medline databases, both a
            MEDLINE and a PUBMED line will be present.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CitationReference.Clone">
            <summary>
            Creates a new CitationReference that is a copy of the current CitationReference.
            </summary>
            <returns>A new CitationReference that is a copy of this CitationReference.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.CitationReference.System#ICloneable#Clone">
            <summary>
            Creates a new CitationReference that is a copy of the current CitationReference.
            </summary>
            <returns>A new object that is a copy of this CitationReference.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Number">
            <summary>
            Reference number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Location">
            <summary>
            The range of bases in the sequence entry reported in this citation.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Authors">
            <summary>
            Lists the authors in the order in which they appear in the cited article
            Last names are separated from initials by a comma (no space); there is no comma 
            before the final `and'. The list of authors ends with a period. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Consortiums">
            <summary>
            Lists the collective names of consortiums associated with the citation 
            (eg, International Human Genome Sequencing Consortium), rather than individual author names. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Title">
            <summary>
            Full title of citation. 
            Present in all but unpublished citations.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Journal">
            <summary>
            Lists the journal name, volume, year, and page numbers of the citation
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Medline">
            <summary>
            The National Library of Medicine's Medline unique identifier for a citation (if known).
            Medline UIs are 8 digit numbers.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.PubMed">
            <summary>
            The PubMed unique identifier for a citation (if known). 
            PUBMED ids are numeric, and are record identifiers for article abstracts in the PubMed database.
            
            http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=PubMed
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Remarks">
            <summary>
            The REMARK line is a textual comment that specifies the relevance
            of the citation to the entry.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.Complementation">
            <summary>
            Provides DNA and RNA nucleotide complements.
            </summary>
            <remarks>
            Nucleotide complements are bases that bond with, and correspond to one
            another. For the DNA case, the correspondence is generally at a common
            location on the two strands of a DNA double helix. For RNA, the single
            strand can overlap and bond with itself in various ways to create
            secondary structure, and complementation will determine where this can happen.
            Static methods in the class provide lookup for single nucleotide
            complements, as well as creating the complementary strand for a given
            DNA sequence.
            </remarks>
        </member>
        <member name="M:Bio.Algorithms.Translation.Complementation.GetDnaComplement(Bio.Nucleotide)">
            <summary>
            Returns the complement of a DNA nucleotide. This also
            respects ambiguous characters in the DNA alphabet.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Complementation.GetRnaComplement(Bio.Nucleotide)">
            <summary>
            Returns the complement of an RNA nucleotide. This also
            respects ambiguous characters in the RNA alphabet.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Complementation.Complement(Bio.ISequence)">
             <summary>
             Transcribes a DNA sequence into the corresponding sequence on
             the other strand (which will have the opposite orientation). The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             </summary>
             <remarks>
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence otherStrand = Complementarity.Complement(dna);
            
             otherStrand.ToString() would produce "ATGGCG"
             </remarks>
             <param name="dnaSource">The input sequence.</param>
             <returns>A new complementary sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Complementation.ReverseComplement(Bio.ISequence)">
             <summary>
             Transcribes a DNA sequence into the corresponding sequence on
             the other strand, then reverses it so that the new sequence has
             the same orientation as the original (in the 3'-to-5' sense). The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence otherStrand = Complementarity.ReverseComplement(dna);
            
             otherStrand.ToString() would produce "GCGGTA"
             </summary>
             <param name="dnaSource">The input sequence.</param>
             <returns>A new complementary sequence.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.SequenceAssemblers">
            <summary>
            SequenceAssemblers class is an abstraction class which provides instances
            and lists of all Assemblers currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SequenceAssemblers.simple">
            <summary>
            A singleton instance of SimpleSequenceAssembler which implements
            a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SequenceAssemblers.all">
            <summary>
            List of sequence assemblers.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SequenceAssemblers.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SequenceAssemblers.Simple">
            <summary>
            Gets an instance of SimpleSequenceAssembler which implements
            a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SequenceAssemblers.All">
            <summary>
            Gets the list of all assemblers which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SmithWatermanAligner">
            <summary>
            Implements the SmithWaterman algorithm for partial alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner">
            <summary>
            Base class for dynamic programming alignment algorithms, including NeedlemanWunsch, 
            SmithWaterman and PairwiseOverlap.
            The basic reference for this code (including NW, SW and Overlap) is Chapter 2 in 
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998
            The variable names in these classes follow the notation in Durbin et al.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IPairwiseSequenceAligner">
            <summary>
            A sequence alignment algorithm that aligns exactly two 
            sequences. This may diverge from ISequenceAligner at some 
            point; meanwhile, it's important to maintain the distinction
            (e.g., assembly requires a pairwise algorithm)
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IPairwiseSequenceAligner.AlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            AlignSimple uses a single gap penalty.
            </summary>
            <param name="sequence1">first input sequence</param>
            <param name="sequence2">second input sequence</param>
            <returns>List of Aligned Sequences</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IPairwiseSequenceAligner.Align(Bio.ISequence,Bio.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            Align uses the affine gap model, which requires a gap open and a gap extension penalty.
            </summary>
            <param name="sequence1">first input sequence</param>
            <param name="sequence2">second input sequence</param>
            <returns>List of Aligned Sequences</returns>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._gapCode">
            <summary>
            Signifies gap in aligned sequence (stored as int[]) during traceback.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._similarityMatrix">
            <summary> Similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._gapOpenCost">
            <summary> 
            Gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example _gapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._gapExtensionCost">
            <summary> 
            Gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example _gapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FScore">
            <remark>
            The F matrix holds the scores and source.  See Durbin et al. for details.
            The F matrix uses the first column and first row to store boundary condition.
            This means the the input sequence at, for example, col 4 will map to col 5 in the F matrix.
            Gotoh's optimization is used to reduce memory usage
            </remark>
            <summary>
            _FScore is the score for each cell, used for single gap penalty.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FScoreDiagonal">
            <summary>
            _FScoreDiagonal is used to store diagonal value from previous row.
            Used for Gotoh optimization of single gap penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSource">
            <summary>
            _FSource stores the source for the each cell in the F matrix.
            Source is coded as 0 diagonal, 1 up, 2 left, see enum SourceDirection below
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._MaxScore">
            <summary>
            _MaxScore stores the maximum value for the affine gap penalty implementation.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._MaxScoreDiagonal">
            <summary>
            _MaxScoreDiagonal is used to store maximum value from previous row.
            Used for Gotoh optimization of affine gap penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._IxGapScore">
            <summary>
            Stores alignment score for putting gap in 'x' sequence for affine gap penalty implementation.
            Alignment score if xi aligns to a gap after yi
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._IyGapScore">
            <summary>
            Stores alignment score for putting gap in 'y' sequence for affine gap penalty implementation.
            Alignment score if yi aligns to a gap after xi
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._nCols">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._nRows">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._a">
            <summary>
            Input sequences as byte arrays, for internal use.
            These are zero based, so use care when working with F matrix, see comment above.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._b">
            <summary>
            Input sequences as byte arrays, for internal use.
            These are zero based, so use care when working with F matrix, see comment above.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.#ctor">
            <summary>
            Initializes a new instance of the DynamicProgrammingPairwiseAligner class.
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            Aligns two sequences using a single gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Aligns two sequences using a single gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(Bio.ISequence,Bio.ISequence)">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(Bio.Matrix.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using a single gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a single gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(Bio.Matrix.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.DumpF">
            <summary>
            Writes F matrix to application log.  Used for test and debugging.
            Only _FSource can be dumped. 
            _FScore, _M, _Ix, _Iy are not stored as part of memory optimization.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (row,col) of the F matrix.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="row">row of cell to fill</param>
            <param name="col">col of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets member variables that are unique to a specific algorithm.
            These must be reset for each alignment, initialization in the constructor
            only works for the first call to AlignSimple.  This routine is called at the beginning
            of each AlignSimple method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetOptimalScoreSimple">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for simple gap penalty
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetOptimalScoreAffine">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for affine gap penalty
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (row,col) of the matrix for affine gap implementation.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="row">row of cell to fill</param>
            <param name="col">col of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets boundary conditions for first row in F matrix for single gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for zeroth column in F matrix for single gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets boundary conditions for first row in dynamic programming matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for the zeroth column in dynamic programming 
            matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback step for the relevant algorithm.  Each algorithm must override this
            since the traceback differs for the different algorithms.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment 
            of sequence1 with respect to sequence2.</param>
            <returns>Optimum score for this alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixSimple">
            <summary>
            Fills F matrix for single gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixAffine">
            <summary>
            Fills matrix data for affine gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ValidateAlignInput(Bio.ISequence,Bio.ISequence)">
            <summary>
            Validates input sequences and gap penalties.
            Checks that input sequences use the same alphabet.
            Checks that each symbol in the input sequences exists in the similarity matrix.
            Checks that gap penalties are less than or equal to 0.
            Throws exception if sequences fail these checks.
            Writes warning to ApplicationLog if gap penalty or penalties are positive.
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and source for one gap parameter.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and matrix elements for general affine gap case.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.BuildOutOfMemoryMessage(System.Exception,System.Boolean)">
            <summary>
            Builds detailed error message for OutOfMemory exception.
            </summary>
            <param name="ex">Exception to throw</param>
            <param name="isAffine">True for affine case, false for one gap penalty.</param>
            <returns>Message to send to user.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GetOffset(System.Byte[])">
            <summary>
            Return the starting position of alignment of sequence1 with respect to sequence2.
            </summary>
            <param name="aligned">Aligned sequence.</param>
            <returns>The number of initial gap characters.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.InitializeAlign(Bio.ISequence)">
            <summary>
            Initializations to be done before aligning sequences.
            Sets consensus resolver property to correct alphabet.
            </summary>
            <param name="inputSequence">input sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimpleAlignPrimer(Bio.Matrix.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Performs initializations and validations required 
            before carrying out sequence alignment.
            Initializes only gap open penalty. Initialization for
            gap extension, if required, has to be done seperately. 
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.CollateResults(Bio.ISequence,Bio.ISequence,System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Convert aligned sequences back to Sequence objects, load output SequenceAlignment object
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <param name="alignedSequences">List of aligned sequences</param>
            <param name="offsets">List of offsets for each aligned sequence</param>
            <param name="optScore">Optimum alignment score</param>
            <returns>SequenceAlignment with all alignment information</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AddSimpleConsensusToResult(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Adds consensus to the alignment result.  At this point, it is a very simple algorithm
            which puts an ambiguity character where the two aligned sequences do not match.
            Uses X and N for protein and DNA/RNA alignments, respectively.
            </summary>
            <param name="alignment">
            Alignment to which to add the consensus.  This is the result returned by the main Align
            or AlignSimple method, which contains the aligned sequences but not yet a consensus sequence.
            </param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimilarityMatrix">
            <summary> Gets or sets similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell">
            <summary>
            Position details of cell with best score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Column">
            <summary>
            Column number of cell with optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Row">
            <summary>
            Row number of cell with optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Cell">
            <summary>
            Cell number of cell with optimal score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the OptScoreCell struct.
            Creates best score cell with the input position values
            </summary>
            <param name="row">Row Number</param>
            <param name="column">Column Number</param>
            <param name="cell">Cell Number</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection">
            <summary> Direction to source of cell value, used during traceback. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Diagonal">
            <summary> Source was up and left from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Up">
            <summary> Source was up from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Left">
            <summary> Source was left of current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Stop">
            <summary> During traceback, stop at this cell (used by SmithWaterman). </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Invalid">
            <summary> Error code, if cell has code Invalid an error has occurred. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SmithWatermanAligner._optScoreCells">
            <summary>
            Stores details of all cells with best score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SmithWatermanAligner._optScore">
            <summary>
            Tracks optimal score for alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for zeroth row in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth column in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for zeroth row in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth column in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetOptimalScoreSimple">
            <summary>
            Optimal score updated in FillCellSimple. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.SetOptimalScoreAffine">
            <summary>
            Optimal score updated in FillCellAffine. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback for SmithWaterman partial alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment
            of sequence1 with respect to sequence2.</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SmithWatermanAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Smith-Waterman algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SmithWatermanAligner.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            SmithWatermanAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmer3">
            <summary>
            Implementation of NUCmer3.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmer">
            <summary>
            NUCmer is a system for rapidly aligning entire genomes or very large DNA
            sequences. It allows for multiple reference and query sequences to be 
            aligned in many to many fashion. This is commonly used to identify the postion 
            and orientation of set of sequence contig in relation to finished sequence.
            NUCmer is the base abstract class which defines the contract for classes 
            implementing NUCmer algorithm. Using Template Method Pattern, NUCmer defines 
            the skeleton of the NUCmer algorithm and deferring some steps to drived class. 
            NUCmer abstract class provides implementation of NUCmer algorithm steps and 
            declaration of abstract methods which will be used by concrete class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultLengthOfMUM">
            <summary>
            Default minimum length of Matches to be searched in streaming process
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultGapOpenCost">
            <summary>
            Default gap open penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultGapExtensionCost">
            <summary>
            Default gap extension penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.ReferenceSequence">
            <summary>
            Represents reference sequences
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.QuerySequence">
            <summary>
            Represents query sequences
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._referenceSequence">
            <summary>
            Holds the reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._suffixTree">
            <summary>
            Holds a reference Suffix tree.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._mumList">
            <summary>
            List of maximal unique matches.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._clusterList">
            <summary>
            List of clusters
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.#ctor">
            <summary>
            Initializes a new instance of the NUCmer class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.AlignSimple(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Align the list of input sequences using simple gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment object</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.AlignSimple(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Align the reference sequence and query sequences using simple gap model.
            </summary>
            <param name="referenceSequenceList">List of reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignment object</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.Align(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Align the set of input sequences using the afine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.Align(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
             Align the reference sequence with query sequences using the affine gap model 
             (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceSequenceList">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ConcatSequence(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Concatenate all the sequences into one sequence with special character.
            </summary>
            <param name="sequences">list of reference sequence</param>
            <returns>concatenated sequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">Reference sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.Streaming(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of matches
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of matches</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetClusters(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the list of clusters from list of MUMs
            </summary>
            <param name="mumList">List of maximum unique matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ProcessCluster(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster})">
            <summary>
            Process clusters and get delta (compact representation of alignment)
            </summary>
            <param name="referenceSequenceList">List of reference sequences</param>
            <param name="clusters">List of clusters</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ConvertDeltaToAlignment(System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Convert list of Delta alignments to Sequence alignment
            </summary>
            <param name="alignments">List of delta alignment</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.CalculateScore(Bio.ISequence,Bio.ISequence)">
            <summary>
            Calculate the score of alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Score of the alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.MakeConsensus(Bio.ISequence,Bio.ISequence)">
            <summary>
            Analyze the given seqquences and store a consensus into its Consensus property.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Consensus of sequences</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.DetermineSequence(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Determine the reference sequence and query sequences from list of input sequences.
            </summary>
            <param name="inputSequences">Sequences needs to be aligned</param>
            <returns>A list of sequence alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.Alignment(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequenceList">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.Validate(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Validate the inputs
            </summary>
            <param name="referenceSequenceList">list of reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ValidateSequenceList(System.Collections.Generic.IList{Bio.ISequence},Bio.IAlphabet,System.String)">
            <summary>
            Validate the list of sequences
            </summary>
            <param name="sequenceList">List of sequence</param>
            <param name="alphabetSet">Alphabet set</param>
            <param name="sequenceType">Type of sequence</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.LengthOfMUM">
            <summary>
            Gets or sets minimum length of Match that can be considered as MUM.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.MaximumSeparation">
            <summary>
            Gets or sets maximum seperation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.SeparationFactor">
            <summary>
            Gets or sets seperation factor. Fraction equal to 
            (diagonal difference / match seperation) where higher values
            increase the indel tolerance
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.IsAlign">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer3.FirstSequenceStart">
            <summary>
            Property refering to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer3.nucmerAligner">
            <summary>
            Alignment engine
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.#ctor">
            <summary>
            Initializes a new instance of the NUCmer3 class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ConcatSequence(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Concat all the sequences into one sequence with special character
            </summary>
            <param name="sequences">list of reference sequence</param>
            <returns>Concatenated sequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.GetClusters(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            get the clusters
            </summary>
            <param name="mumList">List of maximum unique matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.Streaming(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ProcessCluster(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster})">
            <summary>
            Process the cluster
            1. Re-map the reference sequence index to original index
            2. Create synteny
            3. Process synteny
            </summary>
            <param name="referenceSequenceList">List of reference sequences</param>
            <param name="clusters">List of clusters</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.CalculateScore(Bio.ISequence,Bio.ISequence)">
            <summary>
            Calculate the score of alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Score of the alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ConvertDeltaToAlignment(System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Convert to delta alignments to sequence alignments
            </summary>
            <param name="alignments">list of delta alignments</param>
            <returns>List of Sequence alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.MakeConsensus(Bio.ISequence,Bio.ISequence)">
            <summary>
            Analyze the given seqquences and store a consensus into its Consensus property.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Consensus of sequences</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.FindExtensionLength(Bio.ISequence,System.Int32)">
            <summary>
            Find the index of extension
            </summary>
            <param name="sequence">Sequence object</param>
            <param name="index">Postion at which extension starts</param>
            <returns>Last index of extension</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.SortCluster(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster},System.String)">
            <summary>
            Sort the clusters by given field
            </summary>
            <param name="clusters">List of clusters to be sorted</param>
            <param name="sortBy">Field to be sorted by</param>
            <returns>List of sorted clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.IsClusterShadowed(System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.Cluster,Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Check if the cluster is shadowed (contained in alignment)
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentCluster">current cluster</param>
            <param name="currentDeltaAlignment">Current delta alignment</param>
            <returns>Is cluster contained in alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ProcessSynteny(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Synteny})">
            <summary>
            Extend each cluster in every synteny
            </summary>
            <param name="syntenies">List of synteny</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ExtendClusters(Bio.Algorithms.Alignment.Synteny)">
            <summary>
            Extend the cluster in synteny
            </summary>
            <param name="synteny">Synteny in which cluster needs to be extened.</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ExtendToPreviousSequence(Bio.ISequence,Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.DeltaAlignment,Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Extend the cluster backward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="alignments">List of alignments</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetAlignment">target alignment object</param>
            <returns>Was clusted extended backward</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.ExtendToNextSequence(Bio.ISequence,Bio.ISequence,Bio.Algorithms.Alignment.DeltaAlignment,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extend the cluster forward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Was cluster extended forward</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.GetPreviousAlignment(System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Find the previous eligible sequence for alignment/extension
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentAlignment">Current alignment</param>
            <returns>Reverse alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer3.GetNextCluster(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster},Bio.Algorithms.Alignment.Cluster,System.Int32@,System.Int32@)">
            <summary>
            Find the next eligible sequence for alignment/extension
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="currentCluster">Current cluster</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <returns>Forward cluster in the list</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer3.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            MUMmer v3.0 algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer3.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            MUMmer3 class implements.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer3.ReferenceSequenceNumber">
            <summary>
            Index of reference sequence in list of sequences
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.LongestIncreasingSubsequence">
            <summary>
            This class implements an algorithm to find the longest increasing
            subsequence from the list of MUMs. In the process 
                1. Removes the criss-cross mums.
                2. Removes the overlapping portion of MUM by trimming the appropriate MUM.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ILongestIncreasingSubsequence">
            <summary>
            This interface defines contract for classes implementing
             Longest increasing subsequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ILongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            This method will run greedy version of 
            longest increasing subsequence algorithm on the list of Mum.        
            </summary>
            <param name="sortedMums">List of Sorted Mums</param>
            <returns>Returns the longest subsequence list of Mum.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.LongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Find the longest increasing sub sequence from the given set of MUMs
            </summary>
            <param name="sortedMums">List of sorted MUMs</param>
            <returns>Longest Increasing Subsequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.LongestIncreasingSubsequence.ConvertToMUMExtension(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Convert given list of MUMs to MaxUniqueMatchExtension
            </summary>
            <param name="sortedMums">List of MUMs</param>
            <returns>List of MaxUniqueMatchExtension</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.AlignedSequence">
            <summary>
            AlignedSequence is a class containing the single aligned unit of alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.FirstSequence">
            <summary>
            Gets or sets Alignment of First Sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.SecondSequence">
            <summary>
            Gets or sets Alignment of Second Sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.Consensus">
            <summary>
            Gets or sets Consensus of FirstSequence and SecondSequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.Score">
            <summary>
            Gets or sets Score of the alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.FirstOffset">
            <summary>
            Gets or sets Offset of FirstSequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.SecondOffset">
            <summary>
            Gets or sets Offset of SecondSequence
            </summary>
        </member>
        <member name="T:Bio.Web.RequestParameter">
            <summary>
            A RequestParameter is a description of a single parameter that might
            be used in a remote service request (HTTP, SOAP, etc.) The name is
            a string, and the value can be an int, double, or string (but may
            be represented in string form when submitted, as in HTTP). Validation
            is extensible so that any needed rules can be used to validate values.
            </summary>
        </member>
        <member name="M:Bio.Web.RequestParameter.#ctor(System.String,System.String,System.Boolean,System.String,System.String,Bio.Web.IParameterValidator)">
            <summary>
            Construct a RequestParameter, specifying all properties.
            </summary>
            <param name="name">The name of the parameter as required by a service.</param>
            <param name="description">A friendly description of the parameter.</param>
            <param name="required">True if this is a required parameter.</param>
            <param name="defaultValue">The default value that will be used (expressed as a string).</param>
            <param name="dataType">The data type: int, double, or string.</param>
            <param name="validator">The validation object, or null if no validation is required.</param>
        </member>
        <member name="M:Bio.Web.RequestParameter.IsValid(System.String)">
            <summary>
            Given a value expressed as a string, return true if the value
            is valid according to this parameter's semantics.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the value is allowed.</returns>
        </member>
        <member name="P:Bio.Web.RequestParameter.SubmitName">
            <summary>
            The name as it should be submitted to a service.
            </summary>
        </member>
        <member name="P:Bio.Web.RequestParameter.Description">
            <summary>
            A friendly description of the parameter's meaning.
            </summary>
        </member>
        <member name="P:Bio.Web.RequestParameter.Required">
            <summary>
            True if the parameter is required by the service.
            </summary>
        </member>
        <member name="P:Bio.Web.RequestParameter.DefaultValue">
            <summary>
            The default value (as a string) that the service will assume if the
            parameter is not specified. Ignored if Required = true.
            </summary>
        </member>
        <member name="P:Bio.Web.RequestParameter.DataType">
            <summary>
            A string indicating the data type ("int", "double", or "string").
            </summary>
        </member>
        <member name="P:Bio.Web.RequestParameter.Validator">
            <summary>
            The validation object that tests values. If this is null, any
            value will be accepted.
            </summary>
        </member>
        <member name="T:Bio.WordMatch">
            <summary>
            WordMatch stores the region of similarity between two sequences.
            </summary>
        </member>
        <member name="F:Bio.WordMatch.length">
            <summary>
            Length of the match.
            </summary>
        </member>
        <member name="F:Bio.WordMatch.sequence1Start">
            <summary>
            Start index of the first sequence.
            </summary>
        </member>
        <member name="F:Bio.WordMatch.sequence2Start">
            <summary>
            Start index of the second sequence.
            </summary>
        </member>
        <member name="M:Bio.WordMatch.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WordMatch class.
            </summary>
            <param name="length">Length of the match</param>
            <param name="sequence1Start">Start index of the first sequence.</param>
            <param name="sequence2Start"> Start index of the second sequence.</param>
        </member>
        <member name="M:Bio.WordMatch.CompareTo(System.Object)">
            <summary>
            CompareTo method is used while sorting WordMatch objects. 
            </summary>
            <param name="obj">WordMatch object</param>
            <returns>
            Returns zero if the objects are equal, 
            Else, returns zero if the objects have the same length, sequence1start and sequence2Start 
            If lengths are equal, then the objects are ordered by sequence1start
            If lengths are equal and sequence1Start are equal, then the objects are ordered by 
            </returns>
        </member>
        <member name="M:Bio.WordMatch.CompareTo(Bio.WordMatch)">
            <summary>
             Compares two sequence matches so the result can be used in sorting.
            The comparison is done by size and if the size is equal, by seq1
            start position.  If the equence1 start positions are equal they are
            sorted by sequence2 start position.
            </summary>
            <param name="other">WordMatch object</param>
            <returns>
            Returns zero if the objects have the same length, sequence1start and sequence2Start 
            If lengths are equal, then the objects are ordered by sequence1start
            If lengths are equal and sequence1Start are equal, then the objects are ordered by sequence2start
            </returns>
        </member>
        <member name="M:Bio.WordMatch.Equals(Bio.WordMatch)">
            <summary>
            Checks if another WordMatch object is equal to the current
            object.
            </summary>
            <param name="other">WordMatch object to be compared.</param>
            <returns>
            true: if the objects are equal else false.
            </returns>
        </member>
        <member name="M:Bio.WordMatch.GetMinimalList(System.Collections.Generic.List{Bio.WordMatch},System.Int32)">
            <summary>
            Given a list of matches, reduce it to the minimal set of best
            non-overlapping matches.
            </summary>
            <param name="completeList">List of matches to reduce to non-overlapping set.</param>
            <param name="wordLength">Wordlength entered by the user.</param>
            <returns>Minimal set of best non-overlapping matches.</returns>
        </member>
        <member name="M:Bio.WordMatch.WordDeadZone(Bio.WordMatch,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if a match is within the region which is not overlapped by the
            match starting at position (deadx1, deady1) or ending at position
            (deadx2, deady2). If it is in this region
            (the 'live zone') then true is returned, else false is returned.
            </summary>
            <param name="wordMatch">Word Match object which holds the similarity of the two sequences.</param>
            <param name="deadx1">starting x-position of the region for which overlapped has to be checked.</param>
            <param name="deady1">starting y-position of the region for which overlapped has to be checked.</param>
            <param name="deadx2">ending x-position of the region for which overlapped has to be checked.</param>
            <param name="deady2">ending y-position of the region for which overlapped has to be checked.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>
            true: if the wordMatch is in the overlapped region, else false.
            </returns>
        </member>
        <member name="M:Bio.WordMatch.BuildMatchTable(System.Collections.Generic.List{Bio.Algorithms.IKmer},Bio.ISequence,Bio.ISequence,System.Int32)">
            <summary>
             Create a list of all the matches and order them by the
            second sequence.
            </summary>
            <param name="kmerList">List of kmer's.</param>
            <param name="seq1">First sequence.</param>
            <param name="seq2">Second sequence.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>List of all the matches.</returns>
        </member>
        <member name="M:Bio.WordMatch.FindCorrespondingMatch(Bio.ISequence,System.Collections.Generic.List{Bio.Algorithms.IKmer})">
            <summary>
            Finds the sequence in the list of IKmer and returns the list of position
            of the Kmers.
            </summary>
            <param name="sequence">Sequence which has to be matched in the list of IKmer.</param>
            <param name="kmerList">List of IKmer.</param>
            <returns>Returns the list of position of IKmer.</returns>
        </member>
        <member name="P:Bio.WordMatch.Length">
            <summary>
            Gets or sets the length of the match
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Sequence1Start">
            <summary>
            Gets or sets the start index of the first sequence.
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Sequence2Start">
            <summary>
            Gets or sets the start index of the second sequence.
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Deleted">
            <summary>
            Gets or sets whether this word match should be considered or not.
            </summary>
        </member>
        <member name="T:Bio.IO.XsvContigParser">
            <summary>
            This creates a contig parser that uses an XSV sparse reader to parse
            a contig from a list of sparse sequences, where the first sequence is the
            consensus and the rest are sequences aligned to it.
            </summary>
        </member>
        <member name="T:Bio.IO.XsvSparseParser">
            <summary>
            
            Implements common methods for parsing one or more sparse sequences from 
            an XsvSparseReader. This reads sequence items from the reader and 
            returns a sparse sequence created for the items. Multiple sparse sequences
            are separated by a "comment" line that starts with the sequence prefix 
            character.
            
            This also returns the optional offset position of the sequence, if 
            present, to support aligned sequences such as in a Contig.
            
            This is an abstract class and extending classes will have to implement
            the GetSparseReader(TextReader reader) method.
            
            This class is based on the Bio.IO.BasicSequenceParser.
            
            </summary>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.#ctor(Bio.IO.Encoding.IEncoding,Bio.IAlphabet)">
            <summary>
            Creates a Sparse parser with the given encoding and alphabet
            </summary>
            <param name="encoding">Encoding for the sequence items</param>
            <param name="alphabet">Alphabet for the sequence items</param>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.Parse(System.String)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.Parse(System.String,System.Boolean)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.Parse(System.IO.TextReader)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses a list of sparse sequences from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <returns>A list of sparse sequences that were present in the reader.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses a list of sparse sequences from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the reader.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(System.String)">
            <summary>
            Creates a text reader from the file name and calls ParseOne(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Creates a text reader from the file name and calls ParseOne(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(System.IO.TextReader)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses the first sparse sequence from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <returns>The first sparse sequence that was present in the reader.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses the first sparse sequence from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sparse sequence that was present in the reader.</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(Bio.IO.XsvSparseReader,System.Boolean)">
            <summary>
            The common ParseOne method called for parsing sequences from Xsv files. 
            This assumes that that the first line has been read into the XsvSparseReader 
            (i.e. GoToNextLine() has been called). This adds the offset position present in 
            the sequence start line to each position value in the sequence item.
            e.g. the following returns a sparse sequence with ID 'Test sequence' of length 100 
            with A at position 32 (25+7) and G at position 57 (50+7).
            # 7, 100, Test sequence
            25,A
            50,G
            
            </summary>
            <param name="sparseReader">The Xsv sparse reader that can read the sparse sequences.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sequence present starting from the 
            current position in the reader as a SparseSequence. The sparse sequence has the ID present in the 
            sequence start line, and its length equals the count present in that line. 
            Null if EOF has been reached. Throws an exception if the current position did 
            not have the sequence start line with the sequence prefix ID character.
            </returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.ParseOne(Bio.IO.XsvSparseReader,System.Boolean,System.Int32@)">
            <summary>
            The ParseOne method called for parsing sequences from Xsv files,
            and returning the offset separately. This can be used by aligned/assembled 
            sparse sequences.
            This assumes that that the first line has been read into the XsvSparseReader 
            (i.e. GoToNextLine() has been called). This does NOT add the offset position 
            present in the sequence start line to each position value in the sequence item. 
            Instead, it returns the offset in the out parameter.
            e.g. the following returns a sparse sequence with ID 'Test sequence' of length 100 
            with A at position 25 and G at position 50, 
            and the out offset value as 7.
            # 7, 100, Test sequence
            25,A
            50,G
            
            </summary>
            <param name="sparseReader">The Xsv sparse reader that can read the sparse sequences.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <param name="offset">The offset value present in the sequence start line.</param>
            <returns>The first sequence present starting from the 
            current position in the reader, as a SparseSequence. The sparse sequence has the ID present in the 
            sequence start line, and its length equals the count present in that line. 
            Throws an exception if EOF has been reached or the current position did 
            not have the sequence start line with the sequence prefix ID character.
            </returns>
        </member>
        <member name="M:Bio.IO.XsvSparseParser.GetSparseReader(System.IO.TextReader)">
            <summary>
            Abstract method that returns a XSV sparse reader for the given text reader.
            The Parse*() methods use the returned sparse reader to parse sparse seqeunces.
            Classes extending from this base class must implement this method to match
            the XSV format of the passed text reader.
            </summary>
            <param name="reader">Text reader to create a sparse reader for</param>
            <returns>Sparse parser that can parse the text reader 
            as a sequence of items.</returns>
        </member>
        <member name="P:Bio.IO.XsvSparseParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects. 
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseParser.Description">
            <summary>
            Gets the description of the parser. 
            </summary>
        </member>
        <member name="P:Bio.IO.XsvSparseParser.FileTypes">
            <summary>
            Gets the filetypes supported by the sparse parser.
            </summary>
        </member>
        <member name="F:Bio.IO.XsvContigParser.separator">
            <summary>
            The separator character passed to the XsvSparseReader
            </summary>
        </member>
        <member name="F:Bio.IO.XsvContigParser.sequenceIdPrefix">
            <summary>
            The sequence ID prefix character passed to the XsvSparseReader
            </summary>
        </member>
        <member name="M:Bio.IO.XsvContigParser.#ctor(Bio.IO.Encoding.IEncoding,Bio.IAlphabet,System.Char,System.Char)">
            <summary>
             Creates a contig parser that parses Contigs using the given encoding
             and alphabet, by creating an XsvSparseReader that uses the given separator 
             and sequenceIdPrefix characters.
            </summary>
            <param name="encoding">Encoding to use for the consensus and assembled sequences that are parsed.</param>
            <param name="alphabet">Alphabet to use for the consensus and assembled sequences that are parsed.</param>
            <param name="separator_">Character used to separate sequence item position and symbol in the Xsv file</param>
            <param name="sequenceIdPrefix_">Character used at the beginning of the sequence start line.</param>
        </member>
        <member name="M:Bio.IO.XsvContigParser.ParseContig(System.IO.TextReader,System.Boolean)">
            <summary>
            This converts a list of sparse sequences read from the Text reader into a contig.
            Assumes the first sequence is the consensus and the rest are assembled sequences.
            The positions of the assembed sequences are the offsets of the sparse sequences in
            the sequence start line. The positions of the sequence items are the same as their
            position field value in each character separated line 
            (i.e. they are not incremented by the offset)
            </summary>
            <param name="reader">Text reader with the formatted contig</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the contig should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed contig with consensus and assembled sequences, all represented 
            as SparseSequences. 
            Null if no lines were present in the reader. Exception if valid sparse sequences
            were not present. 
            NOTE: This does not check if the assembled sequence positions are valid with respect to the consensus.
            </returns>
        </member>
        <member name="M:Bio.IO.XsvContigParser.ParseAssembledSequence(Bio.IO.XsvSparseReader,System.Boolean)">
            <summary>
            Parses a list of assembled sparse sequences from the reader.
            </summary>
            <param name="contigReader">The reader to read the assembled sparse sequences from</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.XsvContigParser.GetSparseReader(System.IO.TextReader)">
            <summary>
            Creates and returns an XsvSparseReader for the given text reader
            that uses the separactor and sequenceIdPrefix characters passed
            in the constructior for the Contig Parser.
            </summary>
            <param name="reader">Text reader to create a sparse reader for</param>
            <returns>Sparse parser that can parse the text reader as a sequence of 
            items using the separator characters defined for this contig.</returns>
        </member>
        <member name="T:Bio.IO.GenBank.LocationRange">
            <summary>
            Holds start and end position of a feature in a sequence.
            For example: 
            If location of a feature is "join(1..100,J00194.1:100..202)"
            then we need to two LocationRange instance to hold this location.
            First LocationRange will be
                  Accession     - empty
                  StartPosition -1
                  EndPosition   - 100
            Second LocationRange will be
                  Accession     - J00194.1
                  StartPoistion - 100
                  EndPosition   1 200
                  
            Note that the GenBank feature location can be parsed using static method "GetLocationRanges" in GenBankMetadata class.
            For example:
             GenBankMetadata.GetLocationRanges("join(1..100,J00194.1:100..202)") this will return list of LocationRanges.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified start and end position.
            </summary>
            <param name="startPosition">Start position of the feature.</param>
            <param name="endPosition">End position of the feature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified accession, start and end position.
            </summary>
            <param name="accession">Accession of the sequence.</param>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position.</param>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.Accession">
            <summary>
            Gets or sets the Accession.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.EndPosition">
            <summary>
            Gets or sets the end position.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.FivePrimeUtr">
            <summary>
            Region at the 5' end of a mature transcript (preceding the initiation codon) that is not translated into a protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new FivePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new FivePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(Bio.IO.GenBank.FivePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other FivePrimeUTR instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.Clone">
            <summary>
            Creates a new FivePrimeUTR that is a copy of the current FivePrimeUTR.
            </summary>
            <returns>A new FivePrimeUTR that is a copy of this FivePrimeUTR.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.Bed.BedFormatter">
            <summary>
            Formats lists of ISequenceRange or SequenceRangeGroupings into a file
            formatted in the BED format.
            
            Info for the specification of this format can be found at:
            http://genome.ucsc.edu/FAQ/FAQformat
            
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceRangeFormatter">
            <summary>
            Writes out SequenceRange lists or groupings to a file.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(System.Collections.Generic.List{Bio.ISequenceRange},System.String)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(System.Collections.Generic.List{Bio.ISequenceRange},System.IO.TextWriter)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(Bio.SequenceRangeGrouping,System.String)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(Bio.SequenceRangeGrouping,System.IO.TextWriter)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeFormatter.Name">
            <summary>
            Gets the name of the sequence range formatter being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeFormatter.Description">
            <summary>
            Gets the description of the sequence range formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(System.Collections.Generic.List{Bio.ISequenceRange},System.String)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(System.Collections.Generic.List{Bio.ISequenceRange},System.IO.TextWriter)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(Bio.SequenceRangeGrouping,System.String)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(Bio.SequenceRangeGrouping,System.IO.TextWriter)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.Name">
            <summary>
            The name of this format: BED
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.Description">
            <summary>
            A short description of the format
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.FileTypes">
            <summary>
            Known file extensions for the BED format
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree">
            <summary>
            Implementation of ISuffixTree
                Represents a Suffix Tree object
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree._edges">
            <summary>
            List of Edges in Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree._nodes">
            <summary>
            List of Nodes in Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree._sequence">
            <summary>
            Sequence of Suffix Tree
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the SuffixTree class
            </summary>
            <param name="sequence">Input sequence</param>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.Edges">
            <summary>
            Gets list of Edges in Suffix Tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.Nodes">
            <summary>
            Gets list of Nodes in Suffix Tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.Sequence">
            <summary>
            Gets sequence of Suffix Tree
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ClusterBuilder">
            <summary>
            Clustering is a process in which individual matches are grouped in larger
            set called Cluster. The matches in cluster are decided based on paramters 
            like fixed difference allowed, maximum difference allowed, minimum score
            and seperation factor that should be satisfied.
            This class implements IClusterBuilder interface.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultFixedSeparation">
            <summary>
            Default fixed Separation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultMaximumSeparation">
            <summary>
            Default Maximum Separation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultMinimumScore">
            <summary>
            Default Minimum Output Score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultSeparationFactor">
            <summary>
            Default Seperation Factor
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.SecondSequenceStart">
            <summary>
            Property refering to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.ClusterID">
            <summary>
            Property refering to ID of Cluster
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder._unionFind">
            <summary>
            This is a list of number which are used to generate the ID of cluster
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ClusterBuilder class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.BuildClusters(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the Cluster from given inputs of matches.
            Steps are as follows:
                1. Sort MUMs based on query sequence start.
                2. Removing overlapping MUMs (in both sequences) and MUMs with same 
                    diagonal offset (usually adjacent)
                3. Check for  separation between two MUMs
                4. Check the diagonal separation
                5. If MUMs passes above conditions merge them in one cluster.
                6. Sort MUMs using cluster id
                7. Process clusters (Joining clusters)</summary>
            <param name="matches">List of maximum unique matches</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.FilterMatches(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Removes the duplicate and overlapping maximal unique matches.
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Sort(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatchExtension},System.String)">
            <summary>
            Sort by Cluster by specified column
            </summary>
            <param name="matches">List of matches</param>
            <param name="sortBy">Column to be sorted by</param>
            <returns>Sorted list of cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.GetClusters(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Process the matches and create clusters
            </summary>
            <param name="matches">List of matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Find(System.Int32)">
            <summary>
            Return the id of the set containing "a" in Union-Find.
            </summary>
            <param name="matchIndex">Index of the maximal unique match in UnionFind</param>
            <returns>Cluster id</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Union(System.Int32,System.Int32)">
            <summary>
            Group the matches in Union
            </summary>
            <param name="firstMatchIndex">Id of first cluster</param>
            <param name="secondMatchIndex">Id of second cluster</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.ProcessCluster(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster},System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatchExtension},System.Int32)">
            <summary>
            Process the clusters
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="matches">List of matches</param>
            <param name="clusterSize">Size of cluster</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum seperation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets seperation factor. Fraction equal to 
            (diagonal difference / match seperation) where higher values
            increase the indel tolerance
            </summary>
        </member>
        <member name="M:Bio.Matrix.BasicSmEncoding.#ctor(System.String,System.String,Bio.MoleculeType)">
            <summary>
            Sets up a basic encoding for use with similarity matrices.
            Because this encoding is only used to correlate the ordering of the similarity matrix
            with the sequence encoding, the HasGaps, HasAmbiguity and HasTerminations properties
            will not be used, and don't have to be specified.
            </summary>
            <param name="symbols">
            Symbols in the encoding, in order.  These will map to values using zero based indexing.
            The symbols string must contain only the symbols, no whitespace or other delimiters.
            The symbols string should be upper case -- if not, the symbols will be converted to
            upper case before creating the encoding.
            </param>
            <param name="name">Name of the encoding.</param>
            <param name="moleculeType">Type of molecule, must be DNA, RNA, NA or Protein</param>
        </member>
        <member name="M:Bio.Matrix.BasicSmEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Return true if item.symbol is in the encoding, otherwise false.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks>
            Note that the Value or Name property, or other properties (even including object type)
            may be different.  This method is primarily useful to see if a symbol in a sequence
            is in the encoding in some form or other.
            </remarks>
        </member>
        <member name="T:Bio.UpdatedSequenceItem">
            <summary>
            Class to hold updated sequence item and type of update.
            </summary>
        </member>
        <member name="M:Bio.UpdatedSequenceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.UpdatedSequenceItem.#ctor(Bio.UpdatedSequenceItem)">
            <summary>
            Creates UpdatedSequenceItem from the specified updatedSequenceItem.
            </summary>
            <param name="updatedSequenceItem">UpdatedSequenceItem instance.</param>
        </member>
        <member name="M:Bio.UpdatedSequenceItem.#ctor(Bio.ISequenceItem,Bio.UpdateType)">
            <summary>
            Creates UpdatedSequenceItem from the specified sequence item and update type.
            </summary>
            <param name="sequenceItem">Sequence item.</param>
            <param name="type">Update type.</param>
        </member>
        <member name="P:Bio.UpdatedSequenceItem.SequenceItem">
            <summary>
            Gets or sets the updated sequence item.
            </summary>
        </member>
        <member name="P:Bio.UpdatedSequenceItem.Type">
            <summary>
            Gets or sets the update type.
            </summary>
        </member>
        <member name="T:Bio.IAlphabet">
            <summary>
            An alphabet defines a set of characters common to a particular representation
            of a biological sequence. The most common alphabets are DNA and RNA. The items
            in these alphabets are those you would find as the individual sequence items in
            an ISequence variable.
            <para>
            The characters in an alphabet may represent a particular biological structure
            or they may represent information helpful in understanding a sequence. For instance
            gap characters, termination characters, and characters representing items whose
            definition remains ambigious are all allowed.
            </para>
            </summary>
        </member>
        <member name="M:Bio.IAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Returns one of the items in the encoding based on the character
            symbol of that item.
            </summary>
            <param name="symbol">The character symbol to look up, such as 'G' for Guanine.</param>
            <returns>ISequenceItem corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.IAlphabet.LookupBySymbol(System.String)">
            <summary>
            Returns one of the items in the encoding based on the symbol of
            that item. If the string is only composed of one character then the
            result should be the same as calling the char overload of this method.
            For instance in an amino acid encoding "Ala" or "A" could return the
            item representing Alanine.
            </summary>
            <param name="symbol">The string symbol to look up, such as "G" or "Gua" for Guanine.</param>
            <returns>ISequenceItem corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.IAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{Bio.ISequenceItem})">
            <summary>
            Find the consensus symbol for a set of sequence items
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus sequence item</returns>
        </member>
        <member name="M:Bio.IAlphabet.GetBasicSymbols(Bio.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:Bio.IAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored symbols filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (e.g. in DNA: G, A, T, and C)</param>
            <param name="includeGaps">Include the gap items if any (e.g. -)</param>
            <param name="includeAmbiguities">Include the ambiguity items if any (e.g. in DNA: GA, GAT, GC, etc.)</param>
            <param name="includeTerminations">Include the termination item if any (e.g. *)</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="P:Bio.IAlphabet.Name">
            <summary>
            Gets a human readable name for the alphabet. 
            For example "DNA", "RNA", or "Amino Acid".
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent a gap.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent an ambigous item (i.e. and item for which it is not 
            precisely known what it represents)
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent terminal items.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide / amino acid corresponding to default gap character in alphabet
            </summary>
        </member>
        <member name="T:Bio.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AccessionSequenceNotFound">
            <summary>
              Looks up a localized string similar to Sequence for the accession number {0} not found..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ALPHABET_NULL">
            <summary>
              Looks up a localized string similar to SequenceAlphabet is null. Set it to correct alphabet!.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AlphabetMismatchInConstructor">
            <summary>
              Looks up a localized string similar to Alphabet in the specified sequence list does not have the same Alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AlphabetMismatchInEdit">
            <summary>
              Looks up a localized string similar to To add or replace with new sequence, Alphabet of the new sequence must match with the Alphabet of this SegmentedSequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AminoAcidsAndWeightsShouldMatch">
            <summary>
              Looks up a localized string similar to Total number of aminoacids and weights should match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AZURE_BLAST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Azure Blast hosted by Cloud Computing.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AZURE_BLAST_NAME">
            <summary>
              Looks up a localized string similar to Azure BLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BLASTREQUESTFAILED">
            <summary>
              Looks up a localized string similar to Failed on request &apos;{0}&apos; (status {1}, &apos;{2}&apos;)..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BLASTRETRIESEXCEEDED">
            <summary>
              Looks up a localized string similar to Too many retries, giving up on request &apos;{0}&apos; (status {1}, &apos;{2}&apos;)..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BREAK_LENGTH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Number of bases to be extended before stopping alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BREAK_LENGTH_NAME">
            <summary>
              Looks up a localized string similar to Break Length.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CannotAddNullSequence">
            <summary>
              Looks up a localized string similar to Can not add null to SegmentedSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CannotContinueWithRemove">
            <summary>
              Looks up a localized string similar to The sequences at index {0} and {1} of the underlying sequence list are refer to a same sequence instance thus cannot continue with this operation..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CanNotModifyReadonlySequence">
            <summary>
              Looks up a localized string similar to Can not modify a read only sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ComplementWithMorethanOneSubLocs">
            <summary>
              Looks up a localized string similar to Location with Complement operator cannot contain more than one sub locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DefaultNcbiBlastServiceUri">
            <summary>
              Looks up a localized string similar to http://www.ncbi.nlm.nih.gov/blast/Blast.cgi.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EBIWUBLAST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to The WU-BLAST Web Service hosted by EBI (www.ebi.ac.uk).
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EBIWUBLAST_NAME">
            <summary>
              Looks up a localized string similar to EBI WU-BLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EBIWURESULTTYPEFAILED">
            <summary>
              Looks up a localized string similar to Failed to get resultTypes..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EMPTYRESPONSE">
            <summary>
              Looks up a localized string similar to Service response was empty. Request: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EndDataCannotBeNull">
            <summary>
              Looks up a localized string similar to EndData can not be null or empty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTA_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fa,.mpfa,.fna,.faa,.fsa,.fas,.fasta.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTA_NAME">
            <summary>
              Looks up a localized string similar to Fasta.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTAFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. .
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTAPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_EmptyQualityScoreLine">
            <summary>
              Looks up a localized string similar to Quality score line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQ_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fq,.fastq.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoreHeaderData">
            <summary>
              Looks up a localized string similar to Quality scores header does not match with sequence header for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoreHeaderLine">
            <summary>
              Looks up a localized string similar to Input file or data stream is missing &quot;+&quot; in the quality score header line for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoresLength">
            <summary>
              Looks up a localized string similar to Total number of quality scores and sequence symbols are not same for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidSequence">
            <summary>
              Looks up a localized string similar to FastQ formatter can format IQualitativeSequence instances only..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidSequenceHeaderLine">
            <summary>
              Looks up a localized string similar to Input file or data stream is missing &quot;@&quot; in the sequence header line..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidSequenceLine">
            <summary>
              Looks up a localized string similar to Sequence data line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQ_NAME">
            <summary>
              Looks up a localized string similar to FastQ.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQFORMATTER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Writes an IQualitativeSequence to a particular location, usually a file. The output is formatted according to the FASTQ file format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A FastQParser reads from a source of text that is formatted according to the FASTQ file specification, and converts the data to in-memory IQualitativeSequence objects..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIXED_SEPERATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum fixed diagonal difference.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIXED_SEPERATION_NAME">
            <summary>
              Looks up a localized string similar to Fixed Seperation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of inserting a gap character.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Cost.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_EXTENSION_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of extending an already existing gap.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_EXTENSION_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Extension Cost.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANK_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gb,.gbk,.genbank.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANK_NAME">
            <summary>
              Looks up a localized string similar to GenBank.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANKFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANKPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFF_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gff.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFF_NAME">
            <summary>
              Looks up a localized string similar to GFF.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFFFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GFF file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFFPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GffParser reads from a source of text that is formatted according to the GFF flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.HTTPSUBMITFAILED">
            <summary>
              Looks up a localized string similar to SubmitHttpRequest failed. Status: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IndexParameterName">
            <summary>
              Looks up a localized string similar to index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALID_SYMBOL">
            <summary>
              Looks up a localized string similar to Symbol {0} is not a valid {1} symbol.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALIDBLASTFILTER">
            <summary>
              Looks up a localized string similar to Invalid filter setting: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidEncodingForAlphabet">
            <summary>
              Looks up a localized string similar to Specified encoding &quot;{0}&quot; is not valid for the {1} Alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidEndData">
            <summary>
              Looks up a localized string similar to Invalid end data: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALIDGENETICCODE">
            <summary>
              Looks up a localized string similar to The GeneticCode value is not allowed. Valid values: 1..16, 21, or 22..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidIndexAndLength">
            <summary>
              Looks up a localized string similar to Index and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidLength_Sequence_QualScores">
            <summary>
              Looks up a localized string similar to The number of characters in the sequence and number of bytes in the qualScores are must be equal..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidLocationString">
            <summary>
              Looks up a localized string similar to Invalid location string {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALIDNCBISTATUS">
            <summary>
              Looks up a localized string similar to Got HTML status, expected XML. Status: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidParameterValue">
            <summary>
              Looks up a localized string similar to Parameter value is not belongs to the specified encoding..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidPositionAndLength">
            <summary>
              Looks up a localized string similar to Position and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidQualityScore">
            <summary>
              Looks up a localized string similar to Invalid quality score: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidReferredAlphabet">
            <summary>
              Looks up a localized string similar to Alphabet of {0} sequence is invalid..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSeparator">
            <summary>
              Looks up a localized string similar to Invalid separator {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidStartAndLength">
            <summary>
              Looks up a localized string similar to Start and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidStartData">
            <summary>
              Looks up a localized string similar to Invalid start data: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidStartNEndPositions">
            <summary>
              Looks up a localized string similar to Start position must be less than or equal to the end position..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSymbol">
            <summary>
              Looks up a localized string similar to Could not recognize symbol: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSymbolInString">
            <summary>
              Looks up a localized string similar to Could not recognize one or more symbol in the sequence: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidTypeIndexedItem">
            <summary>
              Looks up a localized string similar to obj is not an IndexedItem&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidTypeIndexedSequenceItem">
            <summary>
              Looks up a localized string similar to obj is not an IndexedSequenceItem.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IOFormatErrorMessage">
            <summary>
              Looks up a localized string similar to {0} Format error - {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IONoTextToParse">
            <summary>
              Looks up a localized string similar to No text to parse in the specified input file or data stream..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ItemAlreadyExists">
            <summary>
              Looks up a localized string similar to Item already exists.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LENGTH_OF_MUM_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum legnth of Maximal Unique Match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LENGTH_OF_MUM_NAME">
            <summary>
              Looks up a localized string similar to Length of MUM.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LIST_EMPTY">
            <summary>
              Looks up a localized string similar to List is empty. Should contain atleast one element!.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LogFileName">
            <summary>
              Looks up a localized string similar to bio.log.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MAXIMUM_SEPARATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum seperation between the adjacent matches in clusters.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MAXIMUM_SEPARATION_NAME">
            <summary>
              Looks up a localized string similar to Maximum Separation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MINIMUM_SCORE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum output score.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MINIMUM_SCORE_NAME">
            <summary>
              Looks up a localized string similar to Minimum Score.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MinimumTwoSequences">
            <summary>
              Looks up a localized string similar to Minimum two sequences are required to run alignment..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMMER3">
            <summary>
              Looks up a localized string similar to MUMmer 3.0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMMER3DESC">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMmerIncompatibleAligner">
            <summary>
              Looks up a localized string similar to MUMmer currently runs only with Needleman-Wunsch / Smith-Waterman algorithms..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NCBIQBLAST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to The QBLAST Web Service hosted by NCBI (www.ncbi.nlm.nih.gov).
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NCBIQBLAST_NAME">
            <summary>
              Looks up a localized string similar to NCBI QBLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEEDLEMAN_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEEDLEMAN_NAME">
            <summary>
              Looks up a localized string similar to Needleman-Wunsch.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_FILE_EXTENSION">
            <summary>
              Looks up a localized string similar to .txt, .tre, .newick.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_FORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a PhylogeneticTree to a particular location, usually a file. The output is formatted
            according to the Newick format..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_NAME">
            <summary>
              Looks up a localized string similar to Newick.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_PARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Reads from a source of text that is formatted according to the Newick flat
            file specification, and converts the data to in-memory PhylogeneticTree object..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NoneWithSubLocs">
            <summary>
              Looks up a localized string similar to Location with None operator can not contain sub locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NotSupportedBasicDerivedSequence">
            <summary>
              Looks up a localized string similar to Not supported in BasicDerivedSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NotSupportedInVirtualSequence">
            <summary>
              Looks up a localized string similar to Not supported in VirtualSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NotSupportedSparseSequence">
            <summary>
              Looks up a localized string similar to Not supported in SparseSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NucleotidesAndWeightsShouldMatch">
            <summary>
              Looks up a localized string similar to Total number of nucleoties and weights should match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NUCMER3">
            <summary>
              Looks up a localized string similar to NUCmer 3.0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NUCMER3DESC">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NullLocationBuild">
            <summary>
              Looks up a localized string similar to LocationBuilder can not be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NullResolver">
            <summary>
              Looks up a localized string similar to Resolver can not be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OWNERVALUE">
            <summary>
              Looks up a localized string similar to MBF Client.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PAIRWISE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PAIRWISE_NAME">
            <summary>
              Looks up a localized string similar to Pairwise-Overlap.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterContainsNullValue">
            <summary>
              Looks up a localized string similar to Specified argument contains a null value..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERDATABASEREQUIRED">
            <summary>
              Looks up a localized string similar to The Database parameter is required..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETEREMAILREQUIRED">
            <summary>
              Looks up a localized string similar to The Email parameter is required..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterEmpty">
            <summary>
              Looks up a localized string similar to Specified argument was empty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERFORMATTYPENOTALLOWED">
            <summary>
              Looks up a localized string similar to The FormatType parameter cannot be set by the user..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterItemMustBeAminoAcid">
            <summary>
              Looks up a localized string similar to Parameter item must be of type AminoAcid.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterItemMustBeNucleotide">
            <summary>
              Looks up a localized string similar to Parameter item must be of type Nucleotide.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterMustLessThanCount">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative and less than the count of this sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterMustLessThanOrEqualToCount">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative and less than or equal to the count of this sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterMustNonNegative">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameAlphabet">
            <summary>
              Looks up a localized string similar to alphabet.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameAminoAcids">
            <summary>
              Looks up a localized string similar to aminoacids.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameArray">
            <summary>
              Looks up a localized string similar to array.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameEncoding">
            <summary>
              Looks up a localized string similar to encoding.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameEndPos">
            <summary>
              Looks up a localized string similar to endPos.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameiContig">
            <summary>
              Looks up a localized string similar to iContig.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameIndex">
            <summary>
              Looks up a localized string similar to index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameItem">
            <summary>
              Looks up a localized string similar to item.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameLength">
            <summary>
              Looks up a localized string similar to length.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameLocation">
            <summary>
              Looks up a localized string similar to location.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameNucleotides">
            <summary>
              Looks up a localized string similar to nucleotides.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNamePosition">
            <summary>
              Looks up a localized string similar to position.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameQualScore">
            <summary>
              Looks up a localized string similar to qualScore.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameQualScores">
            <summary>
              Looks up a localized string similar to qualScores.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameQualSequence">
            <summary>
              Looks up a localized string similar to qualSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameQuery">
            <summary>
              Looks up a localized string similar to query.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequence">
            <summary>
              Looks up a localized string similar to sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequenceItems">
            <summary>
              Looks up a localized string similar to sequenceItems.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequences">
            <summary>
              Looks up a localized string similar to sequences.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSize">
            <summary>
              Looks up a localized string similar to size.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSource">
            <summary>
              Looks up a localized string similar to source.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameStart">
            <summary>
              Looks up a localized string similar to start.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameStartPos">
            <summary>
              Looks up a localized string similar to startPos.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameValue">
            <summary>
              Looks up a localized string similar to value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameWeights">
            <summary>
              Looks up a localized string similar to weights.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameWriter">
            <summary>
              Looks up a localized string similar to writer.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNotKnownByAlphabet">
            <summary>
              Looks up a localized string similar to Specified argument was not known by the Alpabet of this sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERPROGRAMREQUIRED">
            <summary>
              Looks up a localized string similar to The Program parameter is required..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERSEQUENCEEMPTY">
            <summary>
              Looks up a localized string similar to The Query parameter (or a sequence argument) is required..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERSEQUENCEREQUIRED">
            <summary>
              Looks up a localized string similar to The Query parameter (or a sequence argument) is required..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERUNKNOWNAZURE">
            <summary>
              Looks up a localized string similar to Parameter \&quot;{0}\&quot; is not valid for Azure-BLAST..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERUNKNOWNEBIWU">
            <summary>
              Looks up a localized string similar to Parameter \&quot;{0}\&quot; is not valid for EBIWU BLAST..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETERUNKNOWNNCBI">
            <summary>
              Looks up a localized string similar to Parameter \&quot;{0}\&quot; is not valid for NCBI QBLAST..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.READ_ONLY_COLLECTION_MESSAGE">
            <summary>
              Looks up a localized string similar to Cannot modify a read-only collection..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.REGISTRATION_LOADING_ERROR">
            <summary>
              Looks up a localized string similar to Add-In Loading Issue on {0} , Instance : {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RIDEXTRACTFAILED">
            <summary>
              Looks up a localized string similar to Failed to extract a requestIdentifier. Error: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SEPARATION_FACTOR_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Separation factor.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SEPARATION_FACTOR_NAME">
            <summary>
              Looks up a localized string similar to Separation Factor.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeEndError">
            <summary>
              Looks up a localized string similar to End index of SequenceRange cannot be lesser than start index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeNonNegative">
            <summary>
              Looks up a localized string similar to SequenceRange start and end cannot be set to negative numbers.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeStartError">
            <summary>
              Looks up a localized string similar to Start index of SequenceRange cannot be greater than end index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMILARITY_MATRIX_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Describes matrix that determines the score for any possible pair of symbols.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMILARITY_MATRIX_NAME">
            <summary>
              Looks up a localized string similar to Similarity Matrix.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Implements a simple greedy assembly algorithm for DNA..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_NAME">
            <summary>
              Looks up a localized string similar to Simple-Sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Basic SNP Parser that uses XSV format.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .tsv.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_NAME">
            <summary>
              Looks up a localized string similar to Basic SNP.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SMITH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SMITH_NAME">
            <summary>
              Looks up a localized string similar to Smith-Waterman.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SparseSequenceConstructorIndexOutofRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the maximum value of an integer..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.StartDataCannotBeNull">
            <summary>
              Looks up a localized string similar to StartData can not be null or empty..
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.SequenceEncoder">
             <summary>
             This basic implementation of the ISequenceEncoder provides a one to one
             translation from characters to byte values. It uses an IEncoding to determine
             what the mapping is from character to byte value. This encoding should be set
             in the constructor.
             
             If one of the symbols passed in via string (charcters) or via ISequenceItem
             (ISequenceItem.Symbol) has a symbol that is not recognized by the IEncoding for
             your particular instance of this class, an Exception will be thrown when trying
             to encode that item.
             
             For example, using the following code:
             
             SequenceEncoder encoder = new SequenceEncoder(Encodings.Ncbi4Na);
             byte[] encoded = encoder.Encode("GATTC");
             
             will result in a byte array with the values:
             
             { 4, 1, 8, 8, 2 }
            
             
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and from the stored files 
             instances can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="T:Bio.IO.Encoding.ISequenceEncoder">
            <summary>
            Defines the interface for an implementation of an encoder that is able
            to convert ISequenceItems into byte values for internal storage of those
            items.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem},System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem},System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem})">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(Bio.ISequenceItem)">
            <summary>
            Encodes a single sequence item into its byte value
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.String,System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.String,System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceEncoder.Encode(System.Char)">
            <summary>
            Encodes a single sequence item symbol into its byte value
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Creates a sequence encoder by defining the encoding to use.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem},System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem},System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{Bio.ISequenceItem})">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(Bio.ISequenceItem)">
            <summary>
            Encodes a single sequence item into its byte value
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.String,System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.String,System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.Encode(System.Char)">
            <summary>
            Encodes a single sequence item symbol into its byte value
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceEncoder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceEncoder.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.IO.Encoding.SequenceEncoder.Encoding">
            <summary>
            The Encoding provides the map from symbol characters to byte values.
            Without a set encoding the encoder can not work.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceFeatures">
            <summary>
            Contains information about genes and gene products,
            as well as regions of biological significance reported 
            in the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.#ctor(Bio.IO.GenBank.SequenceFeatures)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceFeatures instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.GetFeatures(System.String)">
            <summary>
            Returns list of feature items for the specified feature key.
            </summary>
            <param name="featureKey">Feature key.</param>
            <returns>Returns List of feature items.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.Clone">
            <summary>
            Creates a new SequenceFeatures that is a copy of the current SequenceFeatures.
            </summary>
            <returns>A new SequenceFeatures that is a copy of this SequenceFeatures.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceFeatures that is a copy of the current SequenceFeatures.
            </summary>
            <returns>A new object that is a copy of this SequenceFeatures.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.All">
            <summary>
            Lists all features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Minus10Signals">
            <summary>
            Returns list of Minus10Signal (-10_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Minus35Signals">
            <summary>
            Returns list of Minus35Signal (-35_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ThreePrimeUTRs">
            <summary>
            Returns list of ThreePrimeUTR (3'UTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.FivePrimeUTRs">
            <summary>
            Returns list of FivePrimeUTR (5'UTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Attenuators">
            <summary>
            Returns list of Attenuator features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.CAATSignals">
            <summary>
            Returns list of CAATSignal (CAAT_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.CodingSequences">
            <summary>
            Returns list of CodingSequence (CDS) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.DisplacementLoops">
            <summary>
            Returns list of DisplacementLoop (D-loop) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Enhancers">
            <summary>
            Returns list of Enhancer features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Exons">
            <summary>
            Returns list of Exon features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.GCSignals">
            <summary>
            Returns list of GCSingal (GC_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Genes">
            <summary>
            Returns list of Gene features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.InterveningDNAs">
            <summary>
            Returns list of InterveningDNA (iDNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Introns">
            <summary>
            Returns list of Intron features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.LongTerminalRepeats">
            <summary>
            Returns list of LongTerminalRepeat (LTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MaturePeptides">
            <summary>
            Returns list of MaturePeptide (mat_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscBindings">
            <summary>
            Returns list of MiscBinding (misc_binding) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscDifferences">
            <summary>
            Returns list of MiscDifference (misc_difference) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscFeatures">
            <summary>
            Returns list of MiscFeature (misc_feature) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscRecombinations">
            <summary>
            Returns list of MiscRecombination (misc_recomb) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscRNAs">
            <summary>
            Returns list of MiscRNA (misc_RNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscSignals">
            <summary>
            Returns list of MiscSignal (misc_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscStructures">
            <summary>
            Returns list of MiscStructure (misc_structure) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ModifiedBases">
            <summary>
            Returns list of ModifiedBase (modified_base) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MessengerRNAs">
            <summary>
            Returns list of MessengerRNA (mRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.NonCodingRNAs">
            <summary>
            Returns list of NonCodingRNA (ncRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.OperonRegions">
            <summary>
            Returns list of OperonRegion (Operon) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PolyASignals">
            <summary>
            Returns list of PolyASignal (polyA_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PolyASites">
            <summary>
            Returns list of PolyASite (polyA_site) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PrecursorRNAs">
            <summary>
            Returns list of PrecursorRNA (precursor_RNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Promoters">
            <summary>
            Returns list of Promoter features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ProteinBindingSites">
            <summary>
            Returns list of ProteinBindingSite (protein_bind) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RibosomeBindingSites">
            <summary>
            Returns list of RibosomeBindingSite (RBS) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ReplicationOrigins">
            <summary>
            Returns list of ReplicationOrigin (rep_origin) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RepeatRegions">
            <summary>
            Returns list of RepeatRegion (repeat_region) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RibosomalRNAs">
            <summary>
            Returns list of RibosomalRNA (rRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.SignalPeptides">
            <summary>
            Returns list of SignalPeptide (sig_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.StemLoops">
            <summary>
            Returns list of StemLoop (stem_loop) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TATASignals">
            <summary>
            Returns list of TATASignal (TATA_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Terminators">
            <summary>
            Returns list of Terminator features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransferMessengerRNAs">
            <summary>
            Returns list of TransferMessengerRNA (tmRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransitPeptides">
            <summary>
            Returns list of TransitPeptide (transit_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransferRNAs">
            <summary>
            Returns list of TransferRNA (tRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.UnsureSequenceRegions">
            <summary>
            Returns list of UnsureSequenceRegion (unsure) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Variations">
            <summary>
            Returns list of Variation features.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RibosomeBindingSite">
            <summary>
            Ribosome binding site (RBS).
            In prokaryotes, known as the Shine-Dalgarno sequence: islocated 5 to 9 bases upstream of the initiation codon.
            Consensus GGAGGT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomeBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(System.String)">
            <summary>
            Creates new RibosomeBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(Bio.IO.GenBank.RibosomeBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomeBindingSite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.Clone">
            <summary>
            Creates a new RibosomeBindingSite that is a copy of the current RibosomeBindingSite.
            </summary>
            <returns>A new RibosomeBindingSite that is a copy of this RibosomeBindingSite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PolyASite">
            <summary>
            Site on an RNA transcript to which will be added adenine residues by post-transcriptional polyadenylation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASite feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(System.String)">
            <summary>
            Creates new PolyASite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(Bio.IO.GenBank.PolyASite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.Clone">
            <summary>
            Creates a new PolyASite that is a copy of the current PolyASite.
            </summary>
            <returns>A new PolyASite that is a copy of this PolyASite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscBinding">
            <summary>
            Site in nucleic acid which covalently or non-covalently binds another moiety that cannot be described
            by any other binding key (primer_bind or protein_bind).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscBinding feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(System.String)">
            <summary>
            Creates new MiscBinding feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(Bio.IO.GenBank.MiscBinding)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscBinding instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.Clone">
            <summary>
            Creates a new MiscBinding that is a copy of the current MiscBinding.
            </summary>
            <returns>A new MiscBinding that is a copy of this MiscBinding.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.FastQ.FastQFormatter">
            <summary>
            Writes an IQualitativeSequence to a particular location, usually a file. The output is formatted
            according to the FastQ file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="T:Bio.IO.BasicSequenceFormatter">
            <summary>
            This is an abstract class that provides some basic operations common to sequence
            formatters. It is meant to be used as the base class for formatter implementations
            if the implementer wants to make use of default behavior.
            </summary>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.Format(Bio.ISequence,System.String)">
            <summary>
            Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <remarks>
            This method should be overridden by any formatters that need to format file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="sequences">The sequences to write</param>
            <param name="writer">the TextWriter</param>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.String)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences to.</param>
        </member>
        <member name="M:Bio.IO.BasicSequenceFormatter.FormatString(Bio.ISequence)">
            <summary>
            Converts an ISequence to a formatted text.
            </summary>
            <param name="sequence">The sequence to format.</param> 
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:Bio.IO.BasicSequenceFormatter.Name">
            <summary>
            Gets the name of the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact name of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceFormatter.Description">
            <summary>
            Gets the description of the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact details of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.BasicSequenceFormatter.FileTypes">
            <summary>
            Gets the filetypes supported by the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an IQualitativeSequence to a FASTQ file in the location specified by the writer.
            </summary>
            <param name="sequence">The QualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(Bio.IQualitativeSequence,System.String)">
            <summary>
            Writes an IQualitativeSequence to the specified file.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param>
            <param name="fileName">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(System.Collections.Generic.ICollection{Bio.IQualitativeSequence},System.String)">
            <summary>
            Writes a list of IQualitativeSequence to the specified file.
            </summary>
            <param name="qualSequences">List of IQualitativeSequence to format.</param>
            <param name="fileName">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(System.Collections.Generic.ICollection{Bio.IQualitativeSequence},System.IO.TextWriter)">
            <summary>
            Writes a list of IQualitativeSequence to the specified text writer.
            </summary>
            <param name="qualSequences">List of IQualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(Bio.IQualitativeSequence,System.IO.TextWriter)">
            <summary>
            Writes an IQualitativeSequence to the specified text writer.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.FormatString(Bio.IQualitativeSequence)">
            <summary>
            Converts an IQualitativeSequence to a formatted text.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param> 
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.Name">
            <summary>
            Gets the name of Formatter i.e FastQ.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.Description">
            <summary>
            Gets the description of FastQ formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            FastQFormatter class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTQ file.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.NcbiEAAEncoding">
            <summary>
            A basic encoding that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This encoding closely
            follows the ProteinAlphabet and is based on the standard NCBIeaa.
            This encoding also contains the three letter symbols defined in the
            IUPAC3aa standard.
            
            This encoding assigns values based on the ASCII value of the one
            character symbol of the amino acid. For a more sequential byte value
            encodings see the NcbiStdAAEncoding.
            
            The entries in this dictionary are:
            
            Value - Symbol - Extended Symbol - Name
            
            42 - * - Ter - Termination
            45  - - --- - Gap
            65 - A - Ala - Alanine
            66 - B - Asx - Aspartic Acid or Asparagine
            67 - C - Cys - Cysteine
            68 - D - Asp - Aspartic Acid
            69 - E - Glu - Glutamic Acid
            70 - F - Phe - Phenylalanine
            71 - G - Gly - Glycine
            72 - H - His - Histidine
            73 - I - Ile - Isoleucine
            74 - J - Xle - Leucine or Isoleucine
            75 - K - Lys - Lysine
            76 - L - Leu - Leucine
            77 - M - Met - Methionine
            78 - N - Asn - Asparagine
            79 - O - Pyl - Pyrrolysine
            80 - P - Pro - Proline
            81 - Q - Gln - Glutamine
            82 - R - Arg - Arginine
            83 - S - Ser - Serine
            84 - T - Thr - Threoine
            85 - U - Sel - Selenocysteine
            86 - V - Val - Valine
            87 - W - Trp - Tryptophan
            88 - X - Xxx - Undetermined or atypical
            89 - Y - Tyr - Tyrosine
            90 - Z - Glx - Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Ala">
            <summary>
            Alanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Cys">
            <summary>
            Cysteine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Phe">
            <summary>
            Phenylalanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Gly">
            <summary>
            Glycine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.His">
            <summary>
            Histidine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Ile">
            <summary>
            Isoleucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Lys">
            <summary>
            Lysine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Leu">
            <summary>
            Leucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Met">
            <summary>
            Methionine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Asn">
            <summary>
            Asparagine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Pyl">
            <summary>
            Pyrrolysine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Pro">
            <summary>
            Proline
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Gln">
            <summary>
            Glutamine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Arg">
            <summary>
            Arginine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Ser">
            <summary>
            Serine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Thr">
            <summary>
            Threoine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Sel">
            <summary>
            Selenocysteine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Val">
            <summary>
            Valine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Trp">
            <summary>
            Tryptophan
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Tyr">
            <summary>
            Tyrosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiEAAEncoding.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves an encoded AminoAcid instance based on the byte value
            representation of that acid.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiEAAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.Instance">
            <summary>
            An instance of the NcbiStdAA encoding for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.Name">
            <summary>
            The name of this alphabet is always 'Protein'
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.Count">
            <summary>
            The number of alphabet symbols. For this alphabet the result should
            always be 28.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiEAAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.IO.Bed.BedParser">
            <summary>
            Parses ISequenceRange objects that are formatted according to the BED
            format. This is a format of tab delimited text where the each line
            represents one range and each defines an ID, start and stop index.
            
            Info for the specification of this format can be found at:
            http://genome.ucsc.edu/FAQ/FAQformat
            
            In this format indices start their count from zero. The chromosome start
            index is inclusive and the chromosome end index is exclusive.
            
            There are three required fields in each line as described above. There
            are also 9 option fields. These are: name, score, strand, thickStartm
            thickEnd, itemRgb, blockCount, blockSizes, and blockStarts.
            
            This parser does not support the bigBED format.
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceRangeParser">
            <summary>
            The interface defining the methods for parsing ISequenceRange
            objects from files or readers.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRange(System.String)">
            <summary>
            Parse a set of ISequenceRange objects from a file.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRangeGrouping(System.String)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a file.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRange(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects from a reader.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRangeGrouping(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a reader.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeParser.Name">
            <summary>
            Gets the name of the sequence range parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeParser.Description">
            <summary>
            Gets the description of the sequence range parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.ISequenceRangeParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRange(System.String)">
            <summary>
            Parse a set of ISequenceRange objects from a file.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRangeGrouping(System.String)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a file.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRange(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects from a reader.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRangeGrouping(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a reader.
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.Name">
            <summary>
            The name of this parser: BED
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.Description">
            <summary>
            A short description of the BED parser
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.FileTypes">
            <summary>
            Known file extensions for BED files
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.ProteinTranslation">
            <summary>
            Provides the means of translating an RNA sequence into an Protein
            sequence of amino acids.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.ProteinTranslation.Translate(Bio.ISequence)">
            <summary>
            Translates the RNA sequence passed in as source into a Protein
            sequence of amino acids. Works on the entire source sequence
            starting from the first triplet of nucleotides.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.ProteinTranslation.Translate(Bio.ISequence,System.Int32)">
            <summary>
            Translates the RNA sequence passed in as a source into a Protein
            sequence of amino acids. Allows the setting of a particular index
            into the source sequence for the start of translation.
            
            For instance if you wanted to translate all the phases of an RNA
            sequence you could perform the following:
            
            Sequence rnaSeq = new Sequence(Alphabets.RNA), "AUGCGCCCG");
            Sequence phase1 = ProteinTranslation.Translate(rnaSeq, 0);
            Sequence phase2 = ProteinTranslation.Translate(rnaSeq, 1);
            Sequence phase3 = ProteinTranslation.Translate(rnaSeq, 2);
            </summary>
            <param name="source">The source RNA sequence to translate from</param>
            <param name="nucleotideOffset">
            An offset into the source sequence from which to begin translation.
            Note that this offset begins counting from 0. Set this parameter to
            0 to translate the entire source sequence. Set it to 1 to ignore the
            first nucleotide in the source sequence, etc.
            </param>
            <returns></returns>
        </member>
        <member name="T:Bio.Algorithms.ISuffixTreeBuilder">
            <summary>
            This interface defines contract for classes implementing Suffix Tree Builder Algorithm.
            Suffix tree algorithm that takes a sequence as an input and produces an 
            Suffix Tree of the sequence as output.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.ISuffixTreeBuilder.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Build a Suffix Tree for the given input sequence.
            </summary>
            <param name="sequence">Sequence to build Suffix Tree for</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.ISuffixTreeBuilder.FindMatches(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="T:Bio.Web.ConfigParameters">
            <summary>
            Client configuration parameters for accessing a web service.
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.Connection">
            <summary>
            URI for the web interface
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.UserAgent">
            <summary>
            Useragent string for authentication to the web-interface 
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.DefaultTimeOut">
            <summary>
            Default timeout value
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.EMailAddress">
            <summary>
            User's Email address for connecting to the web-interface 
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.UseAsyncMode">
            <summary>
            Use Sync / Async calls
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.UseHTTPS">
            <summary>
            Use HTTP/HTTPS 
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.UseBrowserProxy">
            <summary>
            Use default browser proxy settings for web access
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.RetryCount">
            <summary>
            Number of times to requery a service when request is pending
            </summary>
        </member>
        <member name="P:Bio.Web.ConfigParameters.RetryInterval">
            <summary>
            Number of seconds between requeries when waiting for a service request
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastResult">
            <summary>
            A single BLAST search result. This is represented by a single XML
            document in BLAST XML format. It consist of some introductory information
            such as BLAST version, a structure listing the search parameters, and
            a list of Iterations (represented in the BlastSearchRecord class).
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.BlastResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastResult.Metadata">
            <summary>
            The summary data for the search
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastResult.Records">
            <summary>
            The list of BlastSearchRecords in the document.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.AzureBlastHandler">
            <summary>
            This class implements IBlastService interface and defines all the atomic
            operation required by the interface. Each method necessarily 
            invokes/instantiates an atomic operation on the server (Azure Blast server).
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.RETRYINTERVAL">
            <summary>
            Default interval of time in seconds to check the status of job
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.NOOFRETRIES">
            <summary>
            Default number of retries to be made to check the status
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.STATUSRUNNING">
            <summary>
            Job Status is running
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.STATUSSUCCEEDED">
            <summary>
            Job status is completed successfully
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.STATUSFAILED">
            <summary>
            Job status is failed
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.OPTIONMVALUE">
            <summary>
            Sets the output format expected from Azure Blast
            7 - Xml
            8 - Html
            Expect the xml output
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.PARTITIONVALUE">
            <summary>
            Number of partitions
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.PARAMETERDATABASE">
            <summary>
            Database parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.PARAMETERPROGRAM">
            <summary>
            Program parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler.PARAMETERFORMATTYPE">
            <summary>
            Output format type parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler._blastClient">
            <summary>
            Azure blast client object
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler._blastParser">
            <summary>
            Parser object that can parse the Blast Output
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler._workerThread">
            <summary>
            Background worker thread that tracks the status of job and notifies
            user on completion.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.AzureBlastHandler._configuration">
            <summary>
            Settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.#ctor(Bio.Web.Blast.IBlastParser,Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the AzureBlastHandler class. 
            </summary>
            <param name="parser">Parser to parse the Blast output</param>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.#ctor(Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the AzureBlastHandler class. 
            </summary>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.#ctor">
            <summary>
            Initializes a new instance of the AzureBlastHandler class. 
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.SubmitRequest(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters 
            and sequence. Implementation should make use of the Bio.IO formatters 
            to convert the sequence into the web interface compliant sequence format.
            This method performs parameter validation and throw Exception on invalid input.
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.SubmitRequest(System.Collections.Generic.IList{Bio.ISequence},Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the Bio.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequences">List of sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.GetRequestStatus(System.String)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.GetResult(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Gets the search results for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into MBF
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.FetchResultsSync(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="requestIdentifier">Identifier for the request of interest</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.CancelRequest(System.String)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.GetRequestParameter(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Get the blast service request object with all the request parameter set
            </summary>
            <param name="sequence">Input sequece</param>
            <param name="parameters">Blast parameters</param>
            <returns>Blast service request object</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.ProcessRequestThread(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Process the request. This method takes care of executing the rest of the steps
            to complete the blast search request in a background thread. Which involves
            1. Submit the job to server
            2. Ping the service with the request identifier to get the status of request.
            3. Repeat step 1, at "RetryInterval" for "RetryCount" till a "success"/"failure" 
                status.
            4. If the status is a "failure" raise an completed event to notify the user 
                with appropriate details.
            5. If the status "success". Get the output of search from server in xml format.
            6. Parse the xml and the framework object model.
            7. Raise the completed event and notify user with the output.
            </summary>
            <param name="sender">Client request Azure Blast search</param>
            <param name="e">Thread event argument</param>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.CompletedRequestThread(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is invoked when request status is completed
            </summary>
            <param name="sender">Invoker of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.ValidateParameters(Bio.Web.Blast.BlastParameters)">
            <summary>
            Check the currently set parameters for validity
            </summary>
            <param name="parameters">Blast input parameters</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.InitializeConfiguration">
            <summary>
            Initialize the configuration properties
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.AzureBlastHandler.InitializeBlastClient">
            <summary>
            Initialize Azure Blast client
            </summary>
        </member>
        <member name="E:Bio.Web.Blast.AzureBlastHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.Configuration">
            <summary>
            Gets or sets settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.Description">
            <summary>
            Gets user-friendly implementation description
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.Name">
            <summary>
            Gets user-friendly implementation name
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.Parser">
            <summary>
            Gets an instance of object that can parse the Blast Output
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.RetryInterval">
            <summary>
            Gets or sets the number of seconds between retries when a service request is pending. (This
            specifies the first interval, and subsequent retries occur at increasing multiples.)
            The caller can override the default by setting ConfigurationParameters.RetryInterval.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.AzureBlastHandler.RetryCount">
            <summary>
            Gets or sets the number of times to retry when a service request is pending. The caller
            can override the default value by setting ConfigurationParameters.RetryCount.
            </summary>
        </member>
        <member name="T:Bio.Util.Logging.ApplicationLog">
            <summary>
            log is a class that implements straightforward logging to a text file, 
            and tries to minimize clutter of the code that uses it.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Open(System.String)">
            <summary>
            Opens the specified filename for writing. If the file already
            exists, it is overwritten. If a different log file is open, it's 
            closed before the new one is opened.
            </summary>
            <param name="filename">the filename</param>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Reopen(System.String)">
            <summary>
            If log is already open with the same filename, do nothing.
            Otherwise open (in append mode, if file exists).
            </summary>
            <remarks>
            Be aware that log files that are never truncated can become very large.
            </remarks>
            <param name="filename">the filename</param>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.OpenAppend(System.String)">
            <summary>
            Open the specified filename (in append mode if it exists).
            </summary>
            <param name="filename">the filename</param>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Close">
            <summary>
            If a writer is open, flush, close, and dispose it.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Write(System.String)">
            <summary>
            Write a single string to the writer.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Write(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output.
            Same syntax as Stream.Write().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteLine(System.String)">
            <summary>
            Write a plain string to the output, then a newline.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output, then a newline.
            Same syntax as Stream.WriteLine().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteTime(System.String,System.Object[])">
            <summary>
            Write a formatted string to output, with the current date/time
            prepended, and a newline appended.
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string (including date/time) that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Exception(System.Exception)">
            <summary>
            Write an exception's message, its inner exception's message, and the
            stack trace to the log.
            </summary>
            <param name="ex">the Exception</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Flush">
            <summary>
            Flush any pending writes
            </summary>
        </member>
        <member name="P:Bio.Util.Logging.ApplicationLog.Autoflush">
            <summary>
            if true (default), a flush occurs after each write, to prevent loss of messages.
            if false, calling code should Flush() after critical writes.
            </summary>
        </member>
        <member name="P:Bio.Util.Logging.ApplicationLog.Ready">
            <summary>
            returns true if there is a valid writer. if not
            in this state, writes will be no-ops.
            </summary>
        </member>
        <member name="T:Bio.SequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="T:Bio.ISequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="M:Bio.SequenceRange.#ctor">
            <summary>
            Default constructor that does not set any fields.
            </summary>
        </member>
        <member name="M:Bio.SequenceRange.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Data constructor that sets the most commonly used fields.
            Note that if the end value is less than start value then the end values is assigned to the start value.
            </summary>
            <param name="ID">An ID for the range. This does not need to be unique, and often represents the chromosome of the range.</param>
            <param name="start">A starting index for the range. In the BED format this index starts counting from 0.</param>
            <param name="end">An ending index for the range. In the BED format this index is exclusive.</param>
        </member>
        <member name="M:Bio.SequenceRange.CompareTo(System.Object)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="obj">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="M:Bio.SequenceRange.CompareTo(Bio.ISequenceRange)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="other">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="P:Bio.SequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.Length">
            <summary>
            The length of the range, which can be zero. This result is the
            difference of the End and Start index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.Ncbi2NAEncoding">
            <summary>
            A very simple encoding that allows for great compression of DNA and RNA
            sequences. This encoding only allows for 4 nucleotides and thus has no
            room for gap, termination, or ambiguous characters. This is done so that
            the encodings can be done using only two bits of information. It is
            appropriate only where this extra information is not necessary.
            
            The encoding comes from the NCBIA2na standard and is summarized by:
            
            Value - Symbol - Name
            
            0 - A - Adenine
            1 - C - Cytosine
            2 - G - Guanine
            3 - T - Thymine / Uracil
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi2NAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi2NAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi2NAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi2NAEncoding.T">
            <summary>
            For DNA this symbol represents Thymine. For RNA it represents Uracil
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi2NAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.Instance">
            <summary>
            An instance of the Ncbi2Na encoding for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.Name">
            <summary>
            The name of this encoding is always 'NCBI2na'
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.HasTerminations">
            <summary>
            This encodings does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.HasAmbiguity">
            <summary>
            This encodings does not have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.HasGaps">
            <summary>
            This encodings does not have gap characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.Count">
            <summary>
            The number of encoded values. For this encoding the result should
            always be 4.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi2NAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StandardFeatureKeys">
            <summary>
            Static class to hold standard feature keys.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Minus10Signal">
            <summary>
            Holds key for Minus10Signal (-10_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Minus35Signal">
            <summary>
            Holds key for Minus35Signal (-35_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ThreePrimeUtr">
            <summary>
            Holds key for ThreePrimeUtr (3'UTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.FivePrimeUtr">
            <summary>
            Holds key for FivePrimeUtr (5'UTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Attenuator">
            <summary>
            Holds key for Attenuator feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.CaaTSignal">
            <summary>
            Holds key for CAATSignal (CAAT_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.CodingSequence">
            <summary>
            Holds key for CodingSequence (CDS) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.DisplacementLoop">
            <summary>
            Holds key for DisplacementLoop (D-loop) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Enhancer">
            <summary>
            Holds key for Enhancer feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Exon">
            <summary>
            Holds key for Exon feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.GCSingal">
            <summary>
            Holds key for GCSingal (GC_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Gene">
            <summary>
            Holds key for Gene feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.InterveningDNA">
            <summary>
            Holds key for InterveningDNA (iDNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Intron">
            <summary>
            Holds key for Intron feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.LongTerminalRepeat">
            <summary>
            Holds key for LongTerminalRepeat (LTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MaturePeptide">
            <summary>
            Holds key for MaturePeptide (mat_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscBinding">
            <summary>
            Holds key for MiscBinding (misc_binding) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscDifference">
            <summary>
            Holds key for MiscDifference (misc_difference) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscFeature">
            <summary>
            Holds key for MiscFeature (misc_feature) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscRecombination">
            <summary>
            Holds key for MiscRecombination (misc_recomb) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscRNA">
            <summary>
            Holds key for MiscRNA (misc_RNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscSignal">
            <summary>
            Holds key for MiscSignal (misc_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscStructure">
            <summary>
            Holds key for MiscStructure (misc_structure) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ModifiedBase">
            <summary>
            Holds key for ModifiedBase (modified_base) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MessengerRNA">
            <summary>
            Holds key for MessengerRNA (mRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.NonCodingRNA">
            <summary>
            Holds key for NonCodingRNA (ncRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.OperonRegion">
            <summary>
            Holds key for Operon feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PolyASignal">
            <summary>
            Holds key for PolyASignal (polyA_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PolyASite">
            <summary>
            Holds key for PolyASite (polyA_site) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PrecursorRNA">
            <summary>
            Holds key for PrecursorRNA (precursor_RNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Promoter">
            <summary>
            Holds key for Promoter feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ProteinBindingSite">
            <summary>
            Holds key for ProteinBindingSite (protein_bind) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RibosomeBindingSite">
            <summary>
            Holds key for RibosomeBindingSite (RBS) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ReplicationOrigin">
            <summary>
            Holds key for ReplicationOrigin (rep_origin) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RepeatRegion">
            <summary>
            Holds key for RepeatRegion (repeat_region) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RibosomalRNA">
            <summary>
            Holds key for RibosomalRNA (rRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.SignalPeptide">
            <summary>
            Holds key for SignalPeptide (sig_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.StemLoop">
            <summary>
            Holds key for StemLoop (stem_loop) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TataSignal">
            <summary>
            Holds key for TATASignal (TATA_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Terminator">
            <summary>
            Holds key for Terminator feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransferMessengerRNA">
            <summary>
            Holds key for TransferMessengerRNA (tmRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransitPeptide">
            <summary>
            Holds key for TransitPeptide (transit_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransferRNA">
            <summary>
            Holds key for TransferRNA (tRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.UnsureSequenceRegion">
            <summary>
            Holds key for UnsureSequenceRegion (unsure) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Variation">
            <summary>
            Holds key for Variation feature.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureKeys.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StandardFeatureKeys.All">
            <summary>
            Returns a list which contains standard feature keys.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceDivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.None">
            <summary>
            None - Division code is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PRI">
            <summary>
            Primate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.ROD">
            <summary>
            Rodent sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.MAM">
            <summary>
            Other mammalian sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.VRT">
            <summary>
            Other vertebrate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.INV">
            <summary>
            Invertebrate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PLN">
            <summary>
            Plant, fungal, and algal sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.BCT">
            <summary>
            Bacterial sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.VRL">
            <summary>
            Viral sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PHG">
            <summary>
            Bacteriophage sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.SYN">
            <summary>
            Synthetic sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.UNA">
            <summary>
            Unannotated sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.EST">
            <summary>
            EST sequences (expressed sequence tags).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PAT">
            <summary>
            Patent sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.STS">
            <summary>
            STS sequences (sequence tagged sites).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.GSS">
            <summary>
            GSS sequences (genome survey sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.HTG">
            <summary>
            HTGS sequences (high throughput genomic sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.HTC">
            <summary>
            HTC sequences (high throughput cDNA sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.ENV">
            <summary>
            Environmental sampling sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.CON">
            <summary>
            Constructed sequences.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Minus10Signal">
            <summary>
            Pribnow box; a conserved region about 10 bp upstream of the start point of bacterial transcription units
            which may be involved in binding RNA polymerase.
            Consensus=TAtAaT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus10Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(System.String)">
            <summary>
            Creates new Minus10Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(Bio.IO.GenBank.Minus10Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus10Signal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.Clone">
            <summary>
            Creates a new Minus10Signal that is a copy of the current Minus10Signal.
            </summary>
            <returns>A new Minus10Signal that is a copy of this Minus10Signal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.DisplacementLoop">
            <summary>
            Displacement Loop (D-Loop): A region within mitochondrial DNA in which a short stretch of RNA is paired with one strand
            of DNA, displacing the original partner DNA strand in this region; also used to describe the
            displacement of a region of one strand of duplex DNA by a single stranded invader in the 
            reaction catalyzed by RecA protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new DisplacementLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(System.String)">
            <summary>
            Creates new DisplacementLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(Bio.IO.GenBank.DisplacementLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other DisplacementLoop instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.Clone">
            <summary>
            Creates a new DisplacementLoop that is a copy of the current DisplacementLoop.
            </summary>
            <returns>A new DisplacementLoop that is a copy of this DisplacementLoop.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.FastQ.FastQParser">
            <summary>
            A FastQParser reads from a source of text that is formatted according to the FASTQ 
            file specification, and converts the data to in-memory IQualitativeSequence objects.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed IQualitativeSequence objects.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="fileName">The name of a biological sequence file.</param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="fileName">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a BioTextReader.
            </summary>
            <param name="bioReader">BioTextReader instance for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOneWithSpecificFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOneWithFastQFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.IdentifyFastQFormatType(System.Byte[])">
            <summary>
            Identifies Alphabet for the sepecified quality scores.
            This method returns,
             Illumina - if the quality scores are in the range of 64 to 104
             Solexa   - if the quality scores are in the range of 59 to 104
             Sanger   - if the quality scores are in the range of 33 to 126.
            </summary>
            <param name="qualScores">Quality scores.</param>
            <returns>Returns appropriate FastQFormatType for the specified quality scores.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single FastQ text from a BioTextReader.
            </summary>
            <param name="bioReader">BioTextReader instance for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Type">
            <summary>
            The FastQFormatType to be used for parsed IQualitativeSequence objects.
            Set AutoDetectFastQFormat property to false, else FastQ parser
            will ignore this property and try to identify the FastQFormatType for 
            each sequence data it parses.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Name">
            <summary>
            Gets the name of Parser i.e FastQ.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Description">
            <summary>
            Gets the description of FastQ parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            FastQParser class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTQ file.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.AutoDetectFastQFormat">
            <summary>
            If this flag is true then FastQParser will ignore the Type property 
            and try to identify the FastQFormatType for each sequence data it parses.
            By default this property is set to true.
            
            If this flag is false then FastQParser will parse the sequence data 
            according to the FastQFormatType specified in Type property.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.KurtzSuffixTreeBuilder">
            <summary>
            This class implements Kurtz Algorithm (using Hash Table) to build the Suffix Tree.
            Steps to build the suffix tree are:
                For every prefix in suffix of sequence string
                Add prefix to the tree, prefix can be added in to ways
                    1. New edge is created
                    2. Previous edge is updated (split the tree and and new edges)
            <remarks>
            Kurtz Algorithm adds a terminating symbol if the last character
            repeats anywhere in the string. This implementation has a method that
            (GetSequenceSymbol) takes care of terminating symbol without actually 
            adding the symbol to the sequence. Note that the Suffix Tree returned
            by this implementation will have index reference to symbol which actually
            does not exist in the Sequence.
            </remarks>
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder.TERMINATING_SYMBOL">
            <summary>
            Character used as terminating symbol for Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder.CONCATENATING_SYMBOL">
            <summary>
            Character used as Concatenating symbol for Suffix Tree
            Note: This is specific to NUCmer implementation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._maxHashKey">
            <summary>
            Hash table size for storing edges
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._minimumLengthOfMUM">
            <summary>
            Minimum Required length of MUM
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._secondSequenceStart">
            <summary>
            Start Index of last MUM found
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._secondSequenceEnd">
            <summary>
            Length of last MUM found
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._splitNodes">
            <summary>
            Contains list of nodes where suffix tree has a split
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._referenceString">
            <summary>
            Reference sequence string
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._queryString">
            <summary>
            Query sequence string
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._lastMatchPath">
            <summary>
            Traces the path of last match
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._lastMatch">
            <summary>
            Last Match found
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._lastEdge">
            <summary>
            Last edge in the previous match
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._lastEdgeTraversalCount">
            <summary>
            Number of index traversed in the last edge while finding the match
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._suffixTree">
            <summary>
            Current suffix tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.KurtzSuffixTreeBuilder._searchSequence">
            <summary>
            Sequence that is being searched in suffix tree
            </summary>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.#ctor">
            <summary>
            Initializes a new instance of the KurtzSuffixTreeBuilder class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Builds the Suffix Tree using Kurtz Algorithm(using Hash Table)
            </summary>
            <example>
            --------------------------------------------------
            Create the Sequence from string (let say DNA sequence "CACCAS")
            --------------------------------------------------
            string aOriginalStr = "CACCAS";
            Sequence aInput = new Sequence(Alphabets.DNA, aOriginalStr);
            --------------------------------------------------
            Instantiate and run the suffix tree builder
            --------------------------------------------------
            ISuffixTreeBuilder suffixTreeBuilder = new KurtzSuffixTreeBuilder();
            SuffixTree suffixTree = suffixTreeBuilder.BuildSuffixTree(aInput);
            </example>
            <param name="sequence">Input Sequence</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.FindMatches(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Hash(System.Int32,System.Int32)">
            <summary>
            Find the position (hash) of the edge in the hash table
            </summary>
            <param name="node">Start node of the edge</param>
            <param name="character">Starting character of the edge</param>
            <returns>Hash code of node</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.AppendPrefix(Bio.Algorithms.Suffix,System.Int32)">
            <summary>
            Add suffix to the tree, the loop inside will break under two conditions
                1. If you have reached the leaf node
                2. If you have reached end of prefix
            </summary>
            <param name="suffix">Root suffix</param>
            <param name="endIndex">Index of the last character of prefix</param>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Insert(Bio.Algorithms.Edge)">
            <summary>
            Insert an Edge into Hash Table, if not already in the list
            </summary>
            <param name="edge">Edge that has to be inserted</param>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.SplitEdge(Bio.Algorithms.Suffix,Bio.Algorithms.Edge)">
            <summary>
            Splitting the edge for creation of new node
                Remove the edge at given postion
                Add new edge to the parent of removed edge
                Add the removed edge to the new edge (requires start character to be recalculated)
            </summary>
            <param name="suffix">Input suffix</param>
            <param name="edge">Edge of tree which has to be split</param>
            <returns>Value of new edge End node</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Remove(Bio.Algorithms.Edge)">
            <summary>
            Remove the given edge from the tree and fill the gap
            </summary>
            <param name="edge">Edge that has to be removed</param>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Find(System.Int32,System.Int32)">
            <summary>
            Find the edge leading out of the node
            </summary>
            <param name="node">Start node</param>
            <param name="character">Starting character of the edge</param>
            <returns>Edge leading out from the node</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Canonize(Bio.Algorithms.Suffix)">
            <summary>
            If the suffix is explicit, recalculate the nodes till leafs
            </summary>
            <param name="suffix">Suffix which has to be canonized</param>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.CreateMUM(Bio.Algorithms.Edge,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate following conditions and create MUM only if valid
            1. Make sure there is no split edge in reference sequence (this 
                represent duplicate in reference sequence)
            2. Validate required length of MUM
            </summary>
            <param name="edge">Edge where the MUM ends</param>
            <param name="referenceEndIndex">End index of string found in reference sequence</param>
            <param name="queryStartIndex">Start index of string found in query sequence</param>
            <param name="length">Length of match</param>
            <returns>Maximum Unique Match</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.Search(System.Int32)">
            <summary>
            Search for a query sequence in give Suffix Tree for existence
            </summary>
            <param name="startIndex">Index of first suffix character in search sequence</param>
            <returns>Does query sequence exists</returns>
        </member>
        <member name="M:Bio.Algorithms.KurtzSuffixTreeBuilder.GetAlreadySearchQueryLength(System.Int32,System.Int32,Bio.Algorithms.Edge@)">
            <summary>
            Check if the given node was already found in the previous match path
            If yes, calculate the new query index position where the search has
            to be presumed. (if any, other leave the queryIndex and edge unchanged)
            </summary>
            <param name="currentNode">Current node number</param>
            <param name="currentIndex">Current query index</param>
            <param name="edge">Current edge</param>
            <returns>New query index</returns>
        </member>
        <member name="T:Bio.Algorithms.Edge">
            <summary>
            Data storage representation of an Edge in Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Edge._sequence">
            <summary>
            Sequence of Suffix Tree
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Edge.#ctor(Bio.Algorithms.Edge)">
            <summary>
            Initializes a new instance of the Edge class
                Edge from given edge
            </summary>
            <param name="edge">Input Edge</param>
        </member>
        <member name="M:Bio.Algorithms.Edge.#ctor(Bio.ISequence,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Sequence of Edge
                Index of First Character
                Index of Last Character
                Start node of edge
            </summary>
            <param name="sequence">Input Sequence</param>
            <param name="startIndex">Index of the First Character</param>
            <param name="endIndex">Index of the Last Character</param>
            <param name="startNode">Node where the Edge starts</param>
        </member>
        <member name="M:Bio.Algorithms.Edge.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the Edge class
                Sequence of Edge
                Set the Start node to root (-1)
            </summary>
            <param name="sequence">Input Sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Edge.#ctor(Bio.ISequence,System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Sequence of Edge
                Start node of Edge
            </summary>
            <param name="sequence">Input Sequence</param>
            <param name="startNode">Start Node</param>
        </member>
        <member name="P:Bio.Algorithms.Edge.StartIndex">
            <summary>
            Gets or sets index of first character
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Edge.EndIndex">
            <summary>
            Gets or sets index of last character
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Edge.StartNode">
            <summary>
            Gets or sets node where the Edge starts
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Edge.EndNode">
            <summary>
            Gets or sets node where the Edge ends
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Edge.Sequence">
            <summary>
            Gets sequence of Suffix Tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Edge.IsLeaf">
            <summary>
            Gets or sets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="T:Bio.Web.StringListValidator">
            <summary>
            A validator for string values that has a specific list of allowed values.
            </summary>
        </member>
        <member name="T:Bio.Web.IParameterValidator">
            <summary>
            A simple interface to an object that can check a value
            for conformance to any required validation rules.
            </summary>
        </member>
        <member name="M:Bio.Web.IParameterValidator.IsValid(System.Object)">
            <summary>
            Given a value as an object, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.Web.IParameterValidator.IsValid(System.String)">
            <summary>
            Given a value in string form, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.Web.StringListValidator.#ctor(System.String[])">
            <summary>
            Constructor that initializes the value list. IgnoreCase defaults to false.
            </summary>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:Bio.Web.StringListValidator.#ctor(System.Boolean,System.String[])">
            <summary>
            Constructor that allows case sensitivity to be specified.
            </summary>
            <param name="ignoreCase">true means case will be ignored when validating.</param>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:Bio.Web.StringListValidator.AddValidValues(System.String[])">
            <summary>
            Add one or more strings to the list of valid values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Bio.Web.StringListValidator.IsValid(System.Object)">
            <summary>
            Given a string value as an object, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.Web.StringListValidator.IsValid(System.String)">
            <summary>
            Given a string value, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:Bio.Web.StringListValidator.ValidValues">
            <summary>
            The list of allowed values.
            </summary>
        </member>
        <member name="P:Bio.Web.StringListValidator.IgnoreCase">
            <summary>
            If IgnoreCase is false (the default), a string will only be considered
            valid if it matches one of the stored values exactly, including case.
            Otherwise, any case (including mixed) is accepted.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.ParameterValidationResult">
            <summary>
            A data structure returned from validation of a set of parameters, allowing
            the caller to either diagnose validation errors, or proceed with a service call.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ParameterValidationResult.IsValid">
            <summary>
            True means that the parameters are valid for the service of interest.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ParameterValidationResult.ParametersObject">
            <summary>
            If a service requires a parameters object of a certain class, the validation
            routine can populate and set this object for the caller's use (on success).
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ParameterValidationResult.ValidationErrors">
            <summary>
            A human-readable summary of errors found during an unsuccessful validation.
            </summary>
        </member>
        <member name="T:Bio.SequenceStatistics">
            <summary>
            SequenceStatistics is used to keep track of the number of occurrances of each symbol within
            a sequence.
            </summary>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.IAlphabet)">
            <summary>
            Constructs sequence statistics with alphabet and 0 counts.
            </summary>
            <param name="alphabet">The alphabet for the sequence.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.IAlphabet,System.Int32[])">
            <summary>
            Constructs sequence statistics from the alphabet and symbol counts for a sequence.
            </summary>
            <param name="alphabet">The alphabet for the sequence.</param>
            <param name="symbolCounts">An array of length 256 containing the counts of each symbol
            indexed by that symbol's char representation.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.ISequence)">
            <summary>
            Constructs sequence statistics by iterating through a sequence.
            </summary>
            <param name="sequence">The sequence to construct statistics for.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Constructs sequence statistics by iterating through a list of sequences.
            </summary>
            <param name="sequences">The list of sequences to construct statistics for.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.SequenceStatistics)">
            <summary>
            Copy constructor.
            </summary>
            <param name="that">The sequence statistics to copy from.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.GetCount(System.Char)">
            <summary>
            Gets the number of occurences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The number of occurences of the given symbol.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetCount(Bio.ISequenceItem)">
            <summary>
            Gets the number of occurences of the specific sequence item.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="item">A sequence item.</param>
            <returns>The number of occurences of the given sequence item.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetFraction(System.Char)">
            <summary>
            Gets the fraction of occurences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The fraction of occurences of the given symbol.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetFraction(Bio.ISequenceItem)">
            <summary>
            Gets the fraction of occurences of a specific sequence item.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="item">A sequence item.</param>
            <returns>The fraction of occurences of the given sequence item.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.Add(System.String)">
            <summary>
            Adds the counts of the symbols in the given string to the existing counts.
            </summary>
            <param name="sequence">The symbols to add.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.Add(System.Char)">
            <summary>
            Increments the count of the given symbol.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.Add(Bio.ISequenceItem)">
            <summary>
            Increments the count of the given item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.Remove(Bio.ISequenceItem)">
            <summary>
            Decrements the count of the given item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.Clear">
            <summary>
            Removes all counts from the SequenceStatistics.
            </summary>
        </member>
        <member name="M:Bio.SequenceStatistics.Clone">
            <summary>
            Creates a new SequenceStatistics that is a copy of the current SequenceStatistics.
            </summary>
            <returns>A new SequenceStatistics that is a copy of this.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceStatistics.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.SequenceStatistics.Complement">
            <summary>
            The SequenceStatistics for the complement of the sequence that this was created from.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.ISequenceDecoder">
            <summary>
            Defines the interface for an implementation of a decoder that is able
            to convert byte values representing ISequenceItems into instances of
            ISequenceItem.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.ISequenceDecoder.Decode(System.Byte)">
            <summary>
            Converts a byte value representation of a sequence item into an
            ISequenceItem representation from the IEncoding specified for this
            instance of the decoder.
            </summary>
            <param name="value">The internal byte representation of an ISequenceItem</param>
        </member>
        <member name="T:Bio.IO.GenBank.TransferMessengerRNA">
            <summary>
            Transfer messenger RNA; tmRNA acts as a tRNA first, and then as an mRNA that encodes a peptide tag; 
            the ribosome translates this mRNA region of tmRNA and attaches the encoded peptide tag to the 
            C-terminus of the unfinished protein; this attached tag targets the protein for destruction or proteolysis.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferMessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRNA.#ctor(System.String)">
            <summary>
            Creates new TransferMessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRNA.#ctor(Bio.IO.GenBank.TransferMessengerRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferMessengerRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRNA.Clone">
            <summary>
            Creates a new TransferMessengerRNA that is a copy of the current TransferMessengerRNA.
            </summary>
            <returns>A new TransferMessengerRNA that is a copy of this TransferMessengerRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransferMessengerRNA.TagPeptide">
            <summary>
            Base location encoding the polypeptide for proteolysis tag of tmRNA and its termination codon.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceStrandType">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.None">
            <summary>
            None - StrandType is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Single">
            <summary>
            Single-stranded (ss).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Double">
            <summary>
            Double-stranded (ds).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Mixed">
            <summary>
            Mixed-stranded (ms).
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SignalPeptide">
            <summary>
            Signal peptide coding sequence; coding sequence for an N-terminal domain of a secreted protein; this 
            domain is involved in attaching nascent polypeptide to the membrane leader sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new SignalPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(System.String)">
            <summary>
            Creates new SignalPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(Bio.IO.GenBank.SignalPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other SignalPeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.Clone">
            <summary>
            Creates a new SignalPeptide that is a copy of the current SignalPeptide.
            </summary>
            <returns>A new SignalPeptide that is a copy of this SignalPeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RibosomalRNA">
            <summary>
            Mature ribosomal RNA (rRNA); RNA component of the ribonucleoprotein particle (ribosome) 
            which assembles amino acids into proteins.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomalRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRNA.#ctor(System.String)">
            <summary>
            Creates new RibosomalRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRNA.#ctor(Bio.IO.GenBank.RibosomalRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomalRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRNA.Clone">
            <summary>
            Creates a new RibosomalRNA that is a copy of the current RibosomalRNA.
            </summary>
            <returns>A new RibosomalRNA that is a copy of this RibosomalRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.InterveningDNA">
            <summary>
            Intervening DNA (iDNA) is a DNA which is eliminated through any of several kinds of recombination.
            For example, in the somatic processing of immunoglobulin genes.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new InterveningDNA feature item from the specified location.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDNA.#ctor(System.String)">
            <summary>
            Creates new InterveningDNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDNA.#ctor(Bio.IO.GenBank.InterveningDNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other InterveningDNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDNA.Clone">
            <summary>
            Creates a new InterveningDNA that is a copy of the current InterveningDNA.
            </summary>
            <returns>A new InterveningDNA that is a copy of this InterveningDNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Enhancer">
            <summary>
            A cis-acting sequence that increases the utilization of (some) eukaryotic promoters,
            and can function in either orientation and in any location (upstream or downstream) 
            relative to the promoter.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Enhancer feature item from the specified location.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(System.String)">
            <summary>
            Creates new Enhancer feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(Bio.IO.GenBank.Enhancer)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Enhancer instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.Clone">
            <summary>
            Creates a new Enhancer that is a copy of the current Enhancer.
            </summary>
            <returns>A new Enhancer that is a copy of this Enhancer.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.FastQFormatType">
            <summary>
            A FastQFormatType specifies which type of quality scores are stored in an IQualitativeSequence.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Illumina">
            <summary>
            Illumina 1.3 FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 62 and are encoded using ASCII 64 to 126.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Solexa">
            <summary>
            Solexa/Illumina 1.0 FastQFormatType.
            This type uses Solexa / Illumina quality scores ranges from -5 to 62 and are encoded using ASCII 59 to 126.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Sanger">
            <summary>
            Sanger FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 93 and are encoded using ASCII 33 to 126 
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.SimpleSequenceAssembler">
            <summary>
            Implements a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler._sequenceAlphabet">
            <summary>
            The alphabet type of sequences to be assembled
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.#ctor">
            <summary>
            Initializes a new instance of the SimpleSequenceAssembler class.
            Sets default threshold values, pairwise aligner, consensusResolver.
            Users will typically reset these using parameters 
            specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.Assemble(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <remarks>
            The algorithm is:
            1.  initialize list of contigs to empty list. List of seqs is passed as argument.
            2.  compute pairwise overlap scores for each pair of input seqs (with reversal and
                complementation as appropriate).
            3.  choose best overlap score. the “merge items” (can be seqs or contigs) are the 
                items with that score. If best score is less than threshold, assembly is finished.
            4.  merge the merge items into a single contig and remove them from their list(s)
            5.  compute the overlap between new item and all existing items
            6.  go to step 3
            </remarks>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>Returns the SequenceAssembly instance which contains list of 
            contigs and list of unmerged sequences which are result of this assembly.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MakeConsensus(Bio.IAlphabet,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            Public method to allow testing of consensus generation part.
            Used by test automation.
            </summary>
            <param name="alphabet">Sequence alphabet</param>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.SequenceWithoutTerminalGaps(Bio.ISequence)">
            <summary>
            Removes gaps that are inserted by overlap algorithm at beginning or end of sequence.
            </summary>
            <param name="inputSequence">input sequence</param>
            <returns>Sequence without gaps</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MergeLowerIndexedContig(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge lower-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score along with offsets information</param>
            <param name="consumedContig">Contig to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MergeLowerIndexedSequence(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore,Bio.ISequence)">
            <summary>
            Method to merge lower-indexed item with new constructed contig
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MergeHigherIndexedContig(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedContig">Consumed Contig to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MergeHigherIndexedSequence(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore,Bio.ISequence)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.Dump(System.Collections.Generic.IList{Bio.Algorithms.Alignment.ISequenceAlignment})">
            <summary>
            Write sequence alignment to application log
            </summary>
            <param name="alignment">sequence alignment</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.Dump(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Write contig to application log
            </summary>
            <param name="contig">contig to be dumped</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.AlignSequence(Bio.ISequence,Bio.ISequence,System.Int32,System.Int32)">
            <summary>
            Aligns the two input sequences, their reverseComplement, complement and reverse
            Keeps track of best score for these combinations.
            </summary>
            <param name="lowerIndexedSequence">Lower-indexed sequence to be aligned</param>
            <param name="higherIndexedSequence">Higher-indexed sequence to be aligned</param>
            <param name="lowerIndex">Index of first sequence in pool</param>
            <param name="higherIndex">Index of second sequence in pool</param>
            <returns>ItemScore containing score, consensus, offset of best alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.AlignAndUpdateBestScore(Bio.ISequence,Bio.ISequence,System.Boolean,System.Boolean,Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore,System.Int32,System.Int32,System.String)">
            <summary>
            Alignes the two input sequence
            Updates best score, if necessary
            </summary>
            <param name="sequence1">First Sequence to be aligned</param>
            <param name="sequence2">Second Sequence to be aligned</param>
            <param name="reversed">Is first sequence reversed?</param>
            <param name="complement">Is first sequence complemented?</param>
            <param name="bestScore">Structure to track best score</param>
            <param name="sequence1PoolIndex">Index of first sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="sequence2PoolIndex">Index of second sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="message">Message to be printed for debug purpose</param>
            <returns>Updated best score</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.RunAlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            Execute Simple Align and return Sequence alignment
            </summary>
            <param name="sequence1">First sequence item</param>
            <param name="sequence2">Second sequence item</param>
            <returns>List of Sequence alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MakeConsensus(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            </summary>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.Name">
            <summary>
            Gets the name of the current assembly algorithm used.
            This property returns the Name of our assembly algorithm i.e 
            Simple-sequence algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.Description">
            <summary>
            Gets the description of the current assembly algorithm used.
            This property returns a simple description of what 
             SimpleSequenceAssembler class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore">
            <summary>
            An ItemScore is the overlap score between the current item (owner of this struct)
            and a lower-indexed item. The lower-indexed item may have been reversed or 
            complemented (or both) to get that score. We always perform reverse and/or
            complement on the lower-indexed item (at no loss of generality).
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.OtherItem">
            <summary>
            the pool index of the lower-indexed item 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.OverlapScore">
            <summary>
            the overlap score 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.Reversed">
            <summary>
            true if the lower-indexed item was reversed 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.Complemented">
            <summary>
            true if the lower-indexed item was complemented 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.FirstOffset">
            <summary>
            the offset to apply to the first sequence (from the
            right if reversed, from the left if not reversed) 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.SecondOffset">
            <summary>
            the offset to apply to the second sequence (always from 
            the left, since it's never reversed)
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ItemScore struct
            constructor that sets all properties 
            </summary>
            <param name="otherItem">Pool index of the lower-indexed item</param>
            <param name="overlapScore">Overlap score</param>
            <param name="reversed">Was lower-indexed item reversed</param>
            <param name="complemented">Was lower-indexed item complemented</param>
            <param name="firstOffset">First sequence offset</param>
            <param name="secondOffset">Second sequence offset</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore.#ctor(Bio.Algorithms.Assembly.SimpleSequenceAssembler.ItemScore)">
            <summary>
            Initializes a new instance of the ItemScore struct
            copy constructor
            </summary>
            <param name="other">instance from which item score need to be copied</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem">
            <summary>
            A PoolItem is one item in the merge pool (either a sequence or a contig)
            along with its overlap scores with lower-numbered items.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem._isContig">
            <summary>
            Flag that distinguished whether _item is a contig or sequence. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.#ctor(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for contig.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for sequence.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor that sets item and type.
            </summary>
            <param name="item">Pool object</param>
            <param name="isContig">Is it contig</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.FreeSequences">
            <summary>
            Free the item reference when no longer needed.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.IsContig">
            <summary>
            Gets a value indicating whether item is a contig. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.Contig">
            <summary>
            Gets stored Contig, assuming there is one.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.Sequence">
            <summary>
            Gets stored sequence, assuming there is one.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.SequenceOrConsensus">
            <summary>
            Gets the sequence that will be aligned with other pool items. For
            a contig, this is the consensus; for a sequence, it's just the sequence. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.Item">
            <summary>
            Gets or sets the item.
            Item can either be an ISequence, or a Contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.Scores">
            <summary>
            Gets or sets list of overlap scores.
            List stores the overlap scores with all pool items 
            that have a lower index than this.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SimpleSequenceAssembler.PoolItem.ConsumedBy">
            <summary>
            Gets or sets the index of the pool item that replaced it.
            If a pool item has been merged, consumedBy will be
            the index of the pool item that replaced it.
            A negative value means the  item is still unmerged.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.ISequenceAssembly">
            <summary>
            An ISequenceAssembly is the result of running Assembly on a set of two or more sequences. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembly.Contigs">
            <summary>
            List of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembly.UnmergedSequences">
            <summary>
            List of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.ISequenceAssembly.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a SequenceAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SequenceAlignment">
            <summary>
            A simple implementation of ISequenceAlignment that stores the 
            results as list of Aligned Sequences 
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ISequenceAlignment">
            <summary>
            An ISequenceAlignment is the result of running an alignment algorithm on a set 
            of two or more sequences. This could be a pairwise alignment, an MSA (multiple 
            sequence alignment), or an overlap alignment of the sort needed for sequence
            assembly.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ISequenceAlignment.AddSequence(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="alignment">The alignment to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.AlignedSequences">
            <summary>
            Gets list of the (output) aligned sequences with score, offset and consensus 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAlignment._alignedSequences">
            <summary>
            List of alignments
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAlignment._firstSequence">
            <summary>
            Accessor for the first sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SequenceAlignment._secondSequence">
            <summary>
            Accessor for the second sequence
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.#ctor">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Constructs an empty SequenceAlignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.#ctor(Bio.ISequence,Bio.ISequence)">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Constructs SequenceAlignment with input sequences
            </summary>
            <param name="firstSequence">First input sequence</param>
            <param name="secondSequence">Second input sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.AddSequence(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="alignment">The sequence to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.Add(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Adds an aligned sequence to the list of aligned sequences in the SequenceAlignment.
            Throws exception if sequence alignment is read only.
            </summary>
            <param name="item">AlignedSequence to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.Clear">
            <summary>
            Clears the SequenceAlignment
            Throws exception if SequenceAlignment is read only.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.Contains(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Returns true if the SequenceAlignment contains the aligned sequence in the
            list of aligned sequences.
            </summary>
            <param name="item">Alignment sequence object</param>
            <returns>True if contains item, otherwise returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.CopyTo(Bio.Algorithms.Alignment.AlignedSequence[],System.Int32)">
            <summary>
            Copies the aligned sequences from the SequenceAlignment into an existing aligned sequence array.
            </summary>
            <param name="array">Array into which to copy the sequences.</param>
            <param name="arrayIndex">Starting index in array at which to begin the copy.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.Remove(Bio.Algorithms.Alignment.AlignedSequence)">
            <summary>
            Removes item from the list of aligned sequences in the SequenceAlignment.
            Throws exception if SequenceAlignment is read only.
            </summary>
            <param name="item">Aligned sequence object</param>
            <returns>True if item was removed, false if item was not found.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceAlignment.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the SequenceAlignment.
            </summary>
            <returns>Returns the enumerator for AlignedSequence</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the SequenceAlignment.
            </summary>
            <returns>Returns the enumerator for AlignedSequence</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.AlignedSequences">
            <summary>
            Gets the list of alignments.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Item(System.Int32)">
            <summary>
            Returns the ith aligned sequence in the alignment.
            </summary>
            <param name="i">The index.</param>
            <returns>The aligned sequence.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Count">
            <summary>
            Gets number of aligned sequence objects in the SequenceAlignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether SequenceAlignment is read-only
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MaxUniqueMatchExtension">
            <summary>
            This is an extension to MaxUniqueMatch class. And add its own set of properties
            to existing properties of MUM
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.#ctor(Bio.Algorithms.Alignment.MaxUniqueMatch)">
            <summary>
            Initializes a new instance of the MaxUniqueMatchExtension class
            </summary>
            <param name="mum">Maximum Unique Match</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.CopyTo(Bio.Algorithms.Alignment.MaxUniqueMatchExtension)">
            <summary>
            Copy the content to match
            </summary>
            <param name="match">Maximum unique match</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.MUM">
            <summary>
            Gets or sets MaxUniqueMatch object
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.ID">
            <summary>
            Gets or sets cluster Identifier
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.IsGood">
            <summary>
            Gets or sets a value indicating whether MUM is Good candidate
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.IsTentative">
            <summary>
            Gets or sets a value indicating whether MUM is Tentative candidate
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.Score">
            <summary>
            Gets or sets score of MUM
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.Adjacent">
            <summary>
            Gets or sets offset to adjacent MUM
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.From">
            <summary>
            Gets or sets From (index representing the previous MUM to form LIS) of MUM
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatchExtension.WrapScore">
            <summary>
            Gets or sets wrap score
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MaxUniqueMatch">
            <summary>
            Mum class will hold order and sequence start position of
            two input sequences. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MaxUniqueMatch.CopyTo(Bio.Algorithms.Alignment.MaxUniqueMatch)">
            <summary>
            Copy the content to MUM
            </summary>
            <param name="match">Maximun unique match</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.FirstSequenceMumOrder">
            <summary>
            Gets or sets Sequence one's MaxUniqueMatch order 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.FirstSequenceStart">
            <summary>
            Gets or sets Sequence one - MaxUniqueMatch's starting poistion 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.SecondSequenceMumOrder">
            <summary>
            Gets or sets Sequence Two's MaxUniqueMatch order 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.SecondSequenceStart">
            <summary>
            Gets or sets  Sequence Two - MaxUniqueMatch's starting poistion 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.Length">
            <summary>
            Gets or sets Mum length 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MaxUniqueMatch.Query">
            <summary>
            Gets or sets the Query sequence
            </summary>
        </member>
        <member name="T:Bio.Web.IntRangeValidator">
            <summary>
            A validator for int values that defines an inclusive range of 
            allowed values.
            </summary>
        </member>
        <member name="M:Bio.Web.IntRangeValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="first">The lowest value.</param>
            <param name="last">The highest value.</param>
        </member>
        <member name="M:Bio.Web.IntRangeValidator.IsValid(System.Object)">
            <summary>
            Given an int value as an object, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.Web.IntRangeValidator.IsValid(System.String)">
            <summary>
            Given an int value as a string, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:Bio.Web.IntRangeValidator.First">
            <summary>
            The lowest allowed value.
            </summary>
        </member>
        <member name="P:Bio.Web.IntRangeValidator.Last">
            <summary>
            The highest value allowed.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastXmlParser">
            <summary>
            Parse text containing XML BLAST results into a list
            of SequenceSearchRecord objects.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.IBlastParser">
            <summary>
            This interface defines the contract that has to be implemented by a class
            that parse an output from blast service.
            Blast service can be in different format e.g., text / xml
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.IBlastParser.Parse(System.IO.TextReader)">
            <summary>
            Read BLAST data from the reader, and build one or more BlastRecordGroup 
            objects (each containing one or more BlastSearchRecord results).
            </summary>
            <param name="reader">Blast data source</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="M:Bio.Web.Blast.BlastXmlParser.ParseXML(System.Text.StringBuilder)">
            <summary>
            This method expects a single XML document and returns one BlastResult.
            </summary>
            <param name="doc">A Stringbuilder containing the XML document.</param>
            <returns>The BlastResult.</returns>
        </member>
        <member name="M:Bio.Web.Blast.BlastXmlParser.Parse(System.IO.TextReader)">
            <summary>
            Read XML BLAST data from the reader, and build one or more
            BlastRecordGroup objects (each containing one or more
            BlastSearchRecord results).
            </summary>
            <param name="reader">The text source</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="M:Bio.Web.Blast.BlastXmlParser.Parse(System.String)">
            <summary>
            Read XML BLAST data from the specified file, and build one or more
            BlastRecordGroup objects (each containing one or more
            BlastSearchRecord results).
            </summary>
            <param name="filename">The name of the file</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="T:Bio.SequenceRangeGrouping">
            <summary>
            A grouping of SequenceRange objects sorted by their ID values. The
            purpose of these groups is to allow a set of SequenceRange objects
            to be associated together by bucketing them into groups where each
            bucket has a unique SequenceRange ID and all SequenceRange objects
            within the bucket has that same ID.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.#ctor">
            <summary>
            Creates an empty grouping.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.#ctor(System.Collections.Generic.IEnumerable{Bio.ISequenceRange})">
            <summary>
            Creates a grouping object from a set of currently ungrouped
            ISequenceRange objects.
            </summary>
            <param name="ranges">Sequence ranges.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Add(Bio.ISequenceRange)">
            <summary>
            Adds a SequenceRange to the grouping, creating a new bucket
            if the ID of the range has not yet been added to the grouping
            or adding to an existing bucket if it has.
            </summary>
            <param name="range">The range item to add to the grouping</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.GetGroup(System.String)">
            <summary>
            Returns a list of SequenceRange objects each of which has the
            ID specified in the rangeID parameter.
            </summary>
            <param name="rangeID">The identification to look up in the grouping</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Flatten">
            <summary>
            Ungroups each of the ISequenceRanges and places them into a flat list
            of every ISequenceRange stored across each of the groups in this grouping.
            The resulting list will still be ordered in such a way that each item of
            a particular group will be enumerated before starting the enumeration of
            items from another group.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps">
            <summary>
            For each group in the grouping, this method traverses through each range
            in the group and normalizes the ranges down to the minimal spanning set
            required to still show the same range spans.
            
            For instance if you had in group 'Chr1' the following ranges:
            
            -> 10 to 100
            -> 200 to 250
            -> 35 to 45
            -> 90 to 150
            
            The result of MergeOverlaps would reduce the ranges in the 'Chr1' group to:
            
            -> 10 to 150
            -> 200 to 250
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps(Bio.SequenceRangeGrouping)">
            <summary>
            Merges query sequence ranges with this sequence ranges.
            For example,
            
             Ranges in this instance   Ranges in the query 
               3 to  15                   4 to 10
               5 to  18                  11 to 20
            
             Result.
              3 to 20
              
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query sequence ranges.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Intersect(Bio.SequenceRangeGrouping,System.Int64,System.Boolean)">
            <summary>
            Returns overlapping sequence ranges from this and specified SequenceRangeGroup for each group in this grouping.
            
            For instance if you had in group 'Chr1' the following ranges:
            
             Ranges in this instance   Ranges in the query 
               0 to   10                 20 to   40
              30 to   50                 70 to  100     
              60 to   80                400 to  800
             300 to  500                850 to  900
             600 to  700                900 to 1200
             800 to 1000                
            
            Result for minOverlap set to 1
                1. If overlappingBasePairsOnly is set true.
                    30 to 40
                    70 to 80
                    400 to 500
                    600 o 700
                    850 to 900
                    900 to 1000
                2.  If overlappingBasePairsOnly is set false.
                     30 to   50
                     60 to   80
                    300 to  500
                    600 to  700
                    800 to 1000
                    
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
            <param name="overlappingBasePairsOnly">
            If this flag is set to true then returned ranges will contain start and end position of overlapping bases, 
            otherwise start and end position will be as that of ranges in this grouping.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Subtract(Bio.SequenceRangeGrouping,System.Int64,System.Boolean)">
            <summary>
            Subtracts the query SequenceRangeGrouping from this SequenceRangeGrouping.
            
            For example,
            
             Ranges in this instance   Ranges in the query 
                1 to  4                   2 to  6
                4 to  8                   3 to  6
                8 to 12                   9 to 14
               25 to 35
               
            Result for minOverlap set to 1
            1. If intervalsWithNoOverlap is set to true
               25 to 35
               
            1. If intervalsWithNoOverlap is set to false
               1 to  2
               6 to  8
               8 to  9
              25 to 35
              
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of overlap.</param>
            <param name="intervalsWithNoOverlap">
            If this flag is set to true then returned ranges will contain only the non overlapping ranges from this instance
            , otherwise non overlapping pieces of intervels along with non overlapping ranges from this instance will be returned.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Subtract(Bio.SequenceRangeGrouping,System.Int64,System.Boolean,System.Boolean)">
             <summary>
             Subtracts the query SequenceRangeGrouping from this SequenceRangeGrouping.
             
             For example,
             
              Ranges in this instance   Ranges in the query 
                 1 to  4                   2 to  6
                 4 to  8                   3 to  6
                 8 to 12                   9 to 14
                25 to 35
                
             Result for minOverlap set to 1
             1. If intervalsWithNoOverlap is set to true
                25 to 35
                
             1. If intervalsWithNoOverlap is set to false
                1 to  2
                6 to  8
                8 to  9
               25 to 35
               
             Running this method creates all new ISequenceRange objects and adds them
             to the newly created SequenceRangeGrouping returned here.
             </summary>
             <param name="query">Query grouping.</param>
             <param name="minOverlap">Minmum length of overlap.</param>
             <param name="intervalsWithNoOverlap">
             If this flag is set to true then returned ranges will contain only the non overlapping ranges from this instance
             , otherwise non overlapping pieces of intervels along with non overlapping ranges from this instance will be returned.</param>
            <param name="considerMetadata">If this flag is set to true then the metadata is also be considered for this operation.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Intersect(Bio.SequenceRangeGrouping,System.Int64,System.Boolean,System.Boolean)">
             <summary>
             Returns overlapping sequence ranges from this and specified SequenceRangeGroup for each group in this grouping.
             
             For instance if you had in group 'Chr1' the following ranges:
             
              Ranges in this instance   Ranges in the query 
                0 to   10                 20 to   40
               30 to   50                 70 to  100     
               60 to   80                400 to  800
              300 to  500                850 to  900
              600 to  700                900 to 1200
              800 to 1000                
             
             Result for minOverlap set to 1
                 1. If overlappingBasePairsOnly is set true.
                     30 to 40
                     70 to 80
                     400 to 500
                     600 o 700
                     850 to 900
                     900 to 1000
                 2.  If overlappingBasePairsOnly is set false.
                      30 to   50
                      60 to   80
                     300 to  500
                     600 to  700
                     800 to 1000
                     
             Running this method creates all new ISequenceRange objects and adds them
             to the newly created SequenceRangeGrouping returned here.
             </summary>
             <param name="query">Query grouping.</param>
             <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
             <param name="overlappingBasePairsOnly">
             If this flag is set to true then returned ranges will contain start and end position of overlapping bases, 
             otherwise start and end position will be as that of ranges in this grouping.</param>
            <param name="considerMetadata">If this flag is set to true then the metadata is also be considered for this operation.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps(Bio.SequenceRangeGrouping,System.Boolean)">
            <summary>
            Merges query sequence ranges with this sequence ranges.
            For example,
            
             Ranges in this instance   Ranges in the query 
               3 to  15                   4 to 10
               5 to  18                  11 to 20
            
             Result.
              3 to 20
              
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query sequence ranges.</param>
            <param name="considerMetadata">If this flag is set to true then the metadata is also be considered for this operation.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps(System.Boolean)">
            <summary>
            For each group in the grouping, this method traverses through each range
            in the group and normalizes the ranges down to the minimal spanning set
            required to still show the same range spans.
            
            For instance if you had in group 'Chr1' the following ranges:
            
            -> 10 to 100
            -> 200 to 250
            -> 35 to 45
            -> 90 to 150
            
            The result of MergeOverlaps would reduce the ranges in the 'Chr1' group to:
            
            -> 10 to 150
            -> 200 to 250
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="considerMetadata">If this flag is set to true then the metadata is also be considered for this operation.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.IsRangesContainMetadata(Bio.SequenceRangeGrouping)">
            <summary>
            Returns true if any of the sequence ranges in the specified sequence range grouping contains metadata,
            otherwise returns false.
            </summary>
            <param name="seqRagneGrouping">Sequence range grouping instance.</param>
            <returns></returns>
        </member>
        <member name="P:Bio.SequenceRangeGrouping.GroupIDs">
            <summary>
            An enumeration of all the SequenceRange IDs contained in
            this grouping.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.Ncbi4NAEncoding">
            <summary>
            A standard encoding for nucleic acids that allows for compression of DNA and RNA
            sequences. This encoding allows for the common ambiguities found when sequencing
            DNA and RNA and also allows for gap characters
            
            The encoding comes from the NCBIA4na standard and is summarized by:
            
            Value - Symbol - Name
            
            0  - - - Gap 
            1  - A - Adenine
            2  - C - Cytosine
            3  - M - A or C
            4  - G - Guanine
            5  - R - G or A
            6  - S - G or C
            7  - V - G or C or A
            8  - T - Thymine/Uracil
            9  - W - A or T
            10 - Y - T or C
            11 - H - A or C or T
            12 - K - G or T
            13 - D - G or A or T
            14 - B - G or T or C
            15 - N - A or G or C or T
            
            Notice that this encoding allows for bitwise comparison on 4 bit numbers
            to determine the makeup of the value. The leftmost bit for instance when
            set to 1 indicates that Thymine/Uracil is a possible value. The rightmost
            bit does the same for Adenine.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.M">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.R">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.S">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.V">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.T">
            <summary>
            Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.W">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.Y">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.H">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.K">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.D">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.B">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Ncbi4NAEncoding.N">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.Ncbi4NAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.Instance">
            <summary>
            An instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.Name">
            <summary>
            The name of this encoding is always 'NCBI4na'
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.Count">
            <summary>
            The number of encoding symbols. For this encoding the result should
            always be 16.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Ncbi4NAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.RnaAlphabet">
            <summary>
            The basic alphabet that describes symbols used in RNA sequences.
            This alphabet allows not only for the four base nucleotide symbols,
            but also for various ambiguities, termination, and gap symbols.
            <para>
            The character representations come from the NCBI4na standard and
            are used in many sequence file formats. The NCBI4na standard is the
            same as the IUPACna standard with only the addition of the gap
            character.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Name
            A - Adenine
            C - Cytosine
            M - A or C
            G - Guanine
            R - G or A
            S - G or C
            V - G or V or A
            U - Uracil
            W - A or U
            Y - U or C
            H - A or C or U
            K - G or U
            D - G or A or U
            B - G or U or C
            - - Gap
            N - A or G or U or C
            </para>
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.A">
            <summary>
            Nucleotide Adenine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.C">
            <summary>
            Nucleotide Cytosine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.G">
            <summary>
            Nucleotide Guanine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.U">
            <summary>
            Nucleotide Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.AC">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GA">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GC">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.AU">
            <summary>
            Adenine or Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.UC">
            <summary>
            Uracil or Cytosine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GU">
            <summary>
            Gaunine or Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GCA">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.ACU">
            <summary>
            Adenine, Cytosine, or Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GAU">
            <summary>
            Gaunine, Adenine, or Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.GUC">
            <summary>
            Gaunine, Uracil, or Cytosine
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.Any">
            <summary>
            Adenine, Guanine, Cytosine, or Uracil
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.instance">
            <summary>
            Static instance of this class.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.values">
            <summary>
            Stores the list of Nucleotides for RNA
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in RNA
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.#cctor">
            <summary>
            Initializes static members of the RnaAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.#ctor">
            <summary>
            Prevents a default instance of the RnaAlphabet class from being created.
            Populates nucleotide values, and ambiguous maps.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{Bio.ISequenceItem})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus nucleotide</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetBasicSymbols(Bio.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (G, A, U, and C)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (GA, GAU, GC, etc.)</param>
            <param name="includeTerminations">Has no effect in this alphabet</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:Bio.RnaAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same nucleotide.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:Bio.RnaAlphabet.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Instance">
            <summary>
            Gets an instance of the RNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'RNA'
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide that denotes default gap character in RNA
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 16.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Node">
            <summary>
            Node : Node of the tree which can be either Leaf or another branch node.
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Node.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Node.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Node as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Children">
            <summary>
            Get Childern nodes
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Nodes">
            <summary>
            Get list of Nodes
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Edges">
            <summary>
            Get list of Edges
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.IsLeaf">
            <summary>
            Either node is leaf or not
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.IsRoot">
            <summary>
            Either node is root node or not
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Name">
            <summary>
            If its leaf node, then use name
            </summary>
        </member>
        <member name="T:Bio.IO.SimpleSnpParser">
            <summary>
            Simple SNP Parser that uses an XsvSnpReader for parsing files with 
            chromosome number, position, allele 1 and allele 2 in tab separated 
            columns into sequences with the first allele.
            </summary>
        </member>
        <member name="M:Bio.IO.SimpleSnpParser.#ctor(Bio.IO.Encoding.IEncoding,Bio.IAlphabet)">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            given alphabet and encoding.
            NOTE: Given that this parses Snps, should we always use the DnaAlphabet?
            </summary>
            <param name="encoding">Encoding to use in the sequence parsed.</param>
            <param name="alphabet">Alphabet to use in the sequence parsed.</param>
        </member>
        <member name="M:Bio.IO.SimpleSnpParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            given encoding and the DnaAlphabet.
            </summary>
            <param name="encoding">Encoding to use in the sequence parsed.</param>
        </member>
        <member name="M:Bio.IO.SimpleSnpParser.#ctor">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            Ncbi4NAEncoding and DnaAlphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.SimpleSnpParser.GetSnpReader(System.IO.TextReader)">
            <summary>
            Returns a XsvSnpReader that wraps the given TextReader. 
            Reads SNP Files with the following tab separated value format:
            chrom   pos     allele1 allele2
            1       45162   C       T
            1       72434   G       A
            </summary>
            <param name="reader"></param>
            <returns>Returns the ISnpReader created for the TextReader</returns>
        </member>
        <member name="P:Bio.IO.SimpleSnpParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:Bio.IO.SimpleSnpParser.Description">
            <summary>
            Gets the description of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.SimpleSnpParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.UnsureSequenceRegion">
            <summary>
            UnsureSequenceRegion (Unsure) is a region in which author is unsure of exact sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new UnsureSequenceRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(System.String)">
            <summary>
            Creates new UnsureSequenceRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(Bio.IO.GenBank.UnsureSequenceRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other UnsureSequenceRegion instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.Clone">
            <summary>
            Creates a new UnsureSequenceRegion that is a copy of the current UnsureSequenceRegion.
            </summary>
            <returns>A new UnsureSequenceRegion that is a copy of this UnsureSequenceRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StemLoop">
            <summary>
            Hairpin; a double-helical region formed by base-pairing between adjacent (inverted) complementary sequences 
            in a single strand of RNA or DNA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new StemLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(System.String)">
            <summary>
            Creates new StemLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(Bio.IO.GenBank.StemLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other StemLoop instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.Clone">
            <summary>
            Creates a new StemLoop that is a copy of the current StemLoop.
            </summary>
            <returns>A new StemLoop that is a copy of this StemLoop.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StandardQualifierNames">
            <summary>
            Static class to hold standard qualifier names.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Allele">
            <summary>
            Qualifier name for Allele.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.AntiCodon">
            <summary>
            Qualifier name for AntiCodon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.BioMaterial">
            <summary>
            Qualifier name for Bio_Material.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.BoundMoiety">
            <summary>
            Qualifier name for Bound_Moiety.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CellLine">
            <summary>
            Qualifier name for Cell_Line.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CellType">
            <summary>
            Qualifier name for Cell_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Chromosome">
            <summary>
            Qualifier name for Chromosome.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Citation">
            <summary>
            Qualifier name for Citation.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ClonedFrom">
            <summary>
            Qualifier name for Clone.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CloneLibrary">
            <summary>
            Qualifier name for Clone_Lib.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Codon">
            <summary>
            Qualifier name for Codon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CodonStart">
            <summary>
            Qualifier name for Codon_Start.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CollectedBy">
            <summary>
            Qualifier name for Collected_By.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CollectionDate">
            <summary>
            Qualifier name for Collection_Date.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Compare">
            <summary>
            Qualifier name for Compare.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Country">
            <summary>
            Qualifier name for Country.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CultivatedVariety">
            <summary>
            Qualifier name for Cultivar.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CultureCollection">
            <summary>
            Qualifier name for Culture_Collection.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.DatabaseCrossReference">
            <summary>
            Qualifier name for DatabaseCrossReference (Db_Xref).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.DevelopmentalStage">
            <summary>
            Qualifier name for Dev_Stage.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Direction">
            <summary>
            Qualifier name for Direction.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EnzymeCommissionNumber">
            <summary>
            Qualifier name for EC_Number.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Ecotype">
            <summary>
            Qualifier name for Ecotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EnvironmentalSample">
            <summary>
            Qualifier name for Environmental_Sample.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EstimatedLength">
            <summary>
            Qualifier name for Estimated_Length.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Exception">
            <summary>
            Qualifier name for Exception.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Experiment">
            <summary>
            Qualifier name for Experiment.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Focus">
            <summary>
            Qualifier name for Focus.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Frequency">
            <summary>
            Qualifier name for Frequency.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Function">
            <summary>
            Qualifier name for Function.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GeneSymbol">
            <summary>
            Qualifier name for GeneSymbol.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GeneSynonym">
            <summary>
            Qualifier name for Gene_Synonym.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Germline">
            <summary>
            Qualifier name for Germline.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Haplotype">
            <summary>
            Qualifier name for Haplotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Host">
            <summary>
            Qualifier name for Host.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.IdentifiedBy">
            <summary>
            Qualifier name for Identified_By.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Inference">
            <summary>
            Qualifier name for Inference.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Isolate">
            <summary>
            Qualifier name for Isolate.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.IsolationSource">
            <summary>
            Qualifier name for Isolation_Source.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LabHost">
            <summary>
            Qualifier name for Lab_Host.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Label">
            <summary>
            Qualifier name for Label.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LatitudeLongitude">
            <summary>
            Qualifier name for Lat_Lon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LocusTag">
            <summary>
            Qualifier name for Locus_Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Macronuclear">
            <summary>
            Qualifier name for Macronuclear.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GenomicMapPosition">
            <summary>
            Qualifier name for Map.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MatingType">
            <summary>
            Qualifier name for Mating_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MobileElement">
            <summary>
            Qualifier name for Mobile_Element.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ModifiedNucleotideBase">
            <summary>
            Qualifier name for Mod_Base.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MoleculeType">
            <summary>
            Qualifier name for Mol_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.NonCodingRNAClass">
            <summary>
            Qualifier name for ncRNA_Class.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Note">
            <summary>
            Qualifier name for Note.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Number">
            <summary>
            Qualifier name for Number.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.OldLocusTag">
            <summary>
            Qualifier name for Old_Locus_Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Operon">
            <summary>
            Qualifier name for Operon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Organelle">
            <summary>
            Qualifier name for Organelle.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Organism">
            <summary>
            Qualifier name for Organism.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PCRConditions">
            <summary>
            Qualifier name for PCR_Conditions.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PCRPrimers">
            <summary>
            Qualifier name for PCR_Primers.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Phenotype">
            <summary>
            Qualifier name for Phenotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Plasmid">
            <summary>
            Qualifier name for Plasmid.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PopulationVariant">
            <summary>
            Qualifier name for Pop_Variant.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Product">
            <summary>
            Qualifier name for Product.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ProteinId">
            <summary>
            Qualifier name for Protein_Id.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Proviral">
            <summary>
            Qualifier name for Proviral.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Pseudo">
            <summary>
            Qualifier name for Pseudo.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Rearranged">
            <summary>
            Qualifier name for Rearranged.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Replace">
            <summary>
            Qualifier name for Replace.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RibosomalSlippage">
            <summary>
            Qualifier name for Ribosomal_Slippage.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequenceFamily">
            <summary>
            Qualifier name for Rpt_Family.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequenceType">
            <summary>
            Qualifier name for Rpt_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedRange">
            <summary>
            Qualifier name for Rpt_Unit_Range.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequence">
            <summary>
            Qualifier name for Rpt_Unit_Seq.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Satellite">
            <summary>
            Qualifier name for Satellite.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Segment">
            <summary>
            Qualifier name for Segment.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Serotype">
            <summary>
            Qualifier name for Serotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Serovar">
            <summary>
            Qualifier name for Serovar.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Sex">
            <summary>
            Qualifier name for Sex.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SpecimenVoucher">
            <summary>
            Qualifier name for Specimen_Voucher.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.StandardName">
            <summary>
            Qualifier name for Standard_Name.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Strain">
            <summary>
            Qualifier name for Strain.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubClone">
            <summary>
            Qualifier name for Sub_Clone.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubSpecies">
            <summary>
            Qualifier name for Sub_Species.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubStrain">
            <summary>
            Qualifier name for Sub_Strain.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TagPeptide">
            <summary>
            Qualifier name for Tag_Peptide.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TissueLibrary">
            <summary>
            Qualifier name for Tissue_Lib.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TissueType">
            <summary>
            Qualifier name for Tissue_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TransSplicing">
            <summary>
            Qualifier name for Trans_Splicing.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Transgenic">
            <summary>
            Qualifier name for Transgenic.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TranslationalExcept">
            <summary>
            Qualifier name for Transl_Except.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TranslationTable">
            <summary>
            Qualifier name for Transl_Table.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Translation">
            <summary>
            Qualifier name for Translation.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Variety">
            <summary>
            Qualifier name for Variety.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardQualifierNames.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StandardQualifierNames.All">
            <summary>
            Returns a list of standard qualifier names.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ProjectIdentifier">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flatfile format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.#ctor(Bio.IO.GenBank.ProjectIdentifier)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">ProjectIdentifier instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.Clone">
            <summary>
            Creates a new ProjectIdentifier that is a copy of the current ProjectIdentifier.
            </summary>
            <returns>A new ProjectIdentifier that is a copy of this ProjectIdentifier.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.System#ICloneable#Clone">
            <summary>
            Creates a new ProjectIdentifier that is a copy of the current ProjectIdentifier.
            </summary>
            <returns>A new object that is a copy of this ProjectIdentifier.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ProjectIdentifier.Name">
            <summary>
            Name of the project.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProjectIdentifier.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RepeatRegion">
            <summary>
             Region of genome containing repeating units.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RepeatRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(System.String)">
            <summary>
            Creates new RepeatRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(Bio.IO.GenBank.RepeatRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RepeatRegion instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.Clone">
            <summary>
            Creates a new RepeatRegion that is a copy of the current RepeatRegion.
            </summary>
            <returns>A new RepeatRegion that is a copy of this RepeatRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.MobileElement">
            <summary>
            Type and name or identifier of the mobile element which is described by the parent feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedRange">
            <summary>
            rpt_unit_range; Identity of a repeat range.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequence">
            <summary>
            rpt_unit_seq; Identity of a repeat sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequenceFamily">
            <summary>
            rpt_family; Type of repeated sequence; ""Alu"" or ""Kpn"", for example.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequenceType">
            <summary>
            rpt_type; Organization of repeated sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Satellite">
            <summary>
            Identifier for a satellite DNA marker, compose of many tandem repeats 
            (identical or related) of a short basic repeated unit.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Intron">
            <summary>
            A segment of DNA that is transcribed, but removed from within the transcript by splicing together the sequences
            (exons) on either side of it.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Intron feature item from the specified location.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(System.String)">
            <summary>
            Creates new Intron feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(Bio.IO.GenBank.Intron)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Intron instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.Clone">
            <summary>
            Creates a new Intron that is a copy of the current Intron.
            </summary>
            <returns>A new Intron that is a copy of this Intron.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankAccession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            It contains primary accession number and may contain secondary accession numbers.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.#ctor">
            <summary>
            Default Constructor.
            Creates a new GenBankAccession instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.#ctor(Bio.IO.GenBank.GenBankAccession)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankAccession instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.Contains(System.String)">
            <summary>
            Validates whether the specified accession number is present in 
            this Accession as primary or secondary accession number.
            </summary>
            <param name="accession">Accession number.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.Clone">
            <summary>
            Creates a new GenBankAccession that is a copy of the current GenBankAccession.
            </summary>
            <returns>A new GenBankAccession that is a copy of this GenBankAccession.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankAccession that is a copy of the current GenBankAccession.
            </summary>
            <returns>A new object that is a copy of this GenBankAccession.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankAccession.Primary">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankAccession.Secondary">
            <summary>
            List of secondary accession numbers.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CrossReferenceType">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            refering to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.None">
            <summary>
            None - CrossReferenceType is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.Project">
            <summary>
            Project.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.TraceAssemblyArchive">
            <summary>
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CodingSequence">
            <summary>
            Coding sequence (CDS); sequence of nucleotides that corresponds with the sequence of amino acids 
            in a protein (location includes stop codon); feature includes amino acid conceptual translation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new CodingSequence feature item from the specified location.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(System.String)">
            <summary>
            Creates new CodingSequence feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(Bio.IO.GenBank.CodingSequence)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CodingSequence instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.GetTranslation">
            <summary>
            Returns protein sequence from the translation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.Clone">
            <summary>
            Creates a new CodingSequence that is a copy of the current CodingSequence.
            </summary>
            <returns>A new CodingSequence that is a copy of this CodingSequence.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Codon">
            <summary>
            Specifies a codon which is different from any found in the reference genetic code.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.CodonStart">
            <summary>
            Indicates the offset at which the first complete codon of a coding feature can be found, 
            relative to the first base of that feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Exception">
            <summary>
            Indicates that the coding region cannot be translated using standard biological rules.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.ProteinId">
            <summary>
            Protein identifier, issued by International collaborators. this qualifier consists of a stable ID 
            portion (3+5 format with 3 position letters and 5 numbers) plus a version number after the decimal point.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.RibosomalSlippage">
            <summary>
            During protein translation, certain sequences can program ribosomes to change to an alternative 
            reading frame by a mechanism known as ribosomal slippage.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Translation">
            <summary>
            Automatically generated one-letter abbreviated amino acid sequence derived from either 
            the universal genetic code or the table as specified in Transl_table qualifier and as 
            determined by exceptions in the Transl_except and Codon qualifiers.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TranslationalExcept">
            <summary>
            Translational exception: single codon the translation of which does not conform 
            to genetic code defined by Organism and Codon qualifier.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TranslationTable">
            <summary>
            Definition of genetic code table used if other than universal genetic code table.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.NcbiStdAAEncoding">
            <summary>
            A basic encoding that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This encoding closely
            follows the ProteinAlphabet and is based on the standard NCBIstdaa.
            This encoding also contains the three letter symbols defined in the
            IUPAC3aa standard.
            
            This encoding assigns values starting at 0 and working consecutively
            through 27. See NcbiEaaEncoding for the same alphabet with different
            assigned values.
            
            The entries in this dictionary are:
            
            Value - Symbol - Extended Symbol - Name
            
            0  - - --- - Gap
            1  - A - Ala - Alanine
            2  - B - Asx - Aspartic Acid or Asparagine
            3  - C - Cys - Cysteine
            4  - D - Asp - Aspartic Acid
            5  - E - Glu - Glutamic Acid
            6  - F - Phe - Phenylalanine
            7  - G - Gly - Glycine
            8  - H - His - Histidine
            9  - I - Ile - Isoleucine
            10 - K - Lys - Lysine
            11 - L - Leu - Leucine
            12 - M - Met - Methionine
            13 - N - Asn - Asparagine
            14 - P - Pro - Proline
            15 - Q - Gln - Glutamine
            16 - R - Arg - Arginine
            17 - S - Ser - Serine
            18 - T - Thr - Threoine
            19 - V - Val - Valine
            20 - W - Trp - Tryptophan
            21 - X - Xxx - Undetermined or atypical
            22 - Y - Tyr - Tyrosine
            23 - Z - Glx - Glutamic Acid or Glutamine
            24 - U - Sel - Selenocysteine
            25 - * - Ter - Termination
            26 - O - Pyl - Pyrrolysine
            27 - J - Xle - Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Ala">
            <summary>
            Alanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Cys">
            <summary>
            Cysteine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Phe">
            <summary>
            Phenylalanine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Gly">
            <summary>
            Glycine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.His">
            <summary>
            Histidine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Ile">
            <summary>
            Isoleucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Lys">
            <summary>
            Lysine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Leu">
            <summary>
            Leucine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Met">
            <summary>
            Methionine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Asn">
            <summary>
            Asparagine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Pro">
            <summary>
            Proline
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Gln">
            <summary>
            Glutamine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Arg">
            <summary>
            Arginine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Ser">
            <summary>
            Serine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Thr">
            <summary>
            Threoine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Val">
            <summary>
            Valine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Trp">
            <summary>
            Tryptophan
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Tyr">
            <summary>
            Tyrosine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Sel">
            <summary>
            Selenocysteine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Pyl">
            <summary>
            Pyrrolysine
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.NcbiStdAAEncoding.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves an encoded AminoAcid instance based on the byte value
            representation of that acid.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.NcbiStdAAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.Instance">
            <summary>
            An instance of the NcbiStdAA encoding for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.Name">
            <summary>
            The name of this alphabet is always 'Protein'
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.Count">
            <summary>
            The number of alphabet symbols. For this alphabet the result should
            always be 28.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.NcbiStdAAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.Codons">
            <summary>
            A class which stores a table of mappings from triplets of RNA nucleotides
            to Amino Acids. This mapping comes from the standard Axiom of Genetics
            triplet rule. This class provides the basic lookup functionality from the
            codons. The ProteinTranslation class provides methods for translating
            whole RNA sequences.
            
            In order to perform mapping from DNA, it is suggested that you first
            use the Transcription class to create the RNA sequence
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.Lookup(Bio.Nucleotide,Bio.Nucleotide,Bio.Nucleotide)">
            <summary>
            Lookup an amino acid based on a triplet of nucleotides. U U U for instance
            will result in Phenylalanine.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.Lookup(Bio.ISequence,System.Int32)">
            <summary>
            Lookup an amino acid within a sequence starting a certian offset.
            </summary>
            <param name="sequence">The source sequence to lookup from.</param>
            <param name="offset">
            The offset within the sequence from which to look at the next three
            nucleotides. Note that this offset begins its count at zero. Thus
            looking at a sequence described by "AUGGCG" and using a offset of 0
            would lookup the amino acid for codon "AUG" while using a offset of 1
            would lookup the amino acid for codon "UGG".
            </param>
            <returns>An amino acid from the protein alphabet</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DeltaAlignment">
            <summary>
            Represents a alignment object in terms of delta.
            Delta is an encoded representation of alignments between input sequences.
            It contains the start and end indices of alignment in reference and
            query sequence followed by error values and list of integera in 
            following lines. Each integer represent an insertion (+ve) in reference
            sequence and deletion (-ve) in reference sequence.
            This class represents such alignment with required properties and
            utility methods.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.#ctor">
            <summary>
            Initializes a new instance of the DeltaAlignment class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.NewAlignment(Bio.ISequence,Bio.ISequence,Bio.Algorithms.Alignment.Cluster,Bio.Algorithms.Alignment.MaxUniqueMatchExtension)">
            <summary>
            Create a new delta alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="cluster">Cluster object</param>
            <param name="match">Match object</param>
            <returns>Newly created DeltaAlignment object</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.ConvertDeltaToSequences">
            <summary>
            Convert the delta alignment object to its sequence representation
            </summary>
            <returns>Reference sequence alignment at 0th index and
            Query sequence alignment at 1st index</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.QueryDirection">
            <summary>
            Gets or sets the query sequence direction
                FORWARD_CHAR or REVERSE_CHAR
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.FirstSequenceStart">
            <summary>
            Gets or sets the start index of first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.FirstSequenceEnd">
            <summary>
            Gets or sets the end index of first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SecondSequenceStart">
            <summary>
            Gets or sets the start index of second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SecondSequenceEnd">
            <summary>
            Gets or sets the end index of second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.Errors">
            <summary>
            Gets or sets errors
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SimilarityErrors">
            <summary>
            Gets or sets similarity errors
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.NonAlphas">
            <summary>
            Gets or sets number of non alphabets encountered during alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.DeltaReferencePosition">
            <summary>
            Gets or sets the value of delta reference position
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.Deltas">
            <summary>
            Gets or sets list of integers that pointing the insertion and 
            deletion indices
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.ReferenceSequence">
            <summary>
            Gets or sets reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.QuerySequence">
            <summary>
            Gets or sets query sequence
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.Hsp">
            <summary>
            a High-scoring Segment Pair.
            </summary>
            <remarks>
            Represents an aligned section of the query and hit sequences with high similarity.
            </remarks>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.Score">
            <summary>
            The score for the pair
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.BitScore">
            <summary>
            Normalized form of the score
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.EValue">
            <summary>
            Expectation value
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.QueryStart">
            <summary>
            The start location of the match in the query sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.QueryEnd">
            <summary>
            The end location of the match in the query sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.HitStart">
            <summary>
            The start location of the match in the hit sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.HitEnd">
            <summary>
            The end location of the match in the hit sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.QueryFrame">
            <summary>
            The frame for the query sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.HitFrame">
            <summary>
            The frame for the hit sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.IdentitiesCount">
            <summary>
            Number of residues that matched exactly
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.PositivesCount">
            <summary>
            Number of residues that matched conservatively (for proteins)
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.AlignmentLength">
            <summary>
            The length of the local match
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.Density">
            <summary>
            The score density
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.QuerySequence">
            <summary>
            The local match in the query sequence, as a string
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hsp.HitSequence">
            <summary>
            The local match in the hit sequence, as a string
            </summary>
        </member>
        <member name="T:Bio.SequenceRangeParsers">
            <summary>
            SequenceRangeParsers class is an abstraction class which provides instances
            and lists of all Range-Parsers currently supported by MBF.
            </summary>
        </member>
        <member name="F:Bio.SequenceRangeParsers.bed">
            <summary>
            A singleton instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="F:Bio.SequenceRangeParsers.all">
            <summary>
            List of all supported Range-Parsers.
            </summary>
        </member>
        <member name="P:Bio.SequenceRangeParsers.Bed">
            <summary>
            Gets an instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="P:Bio.SequenceRangeParsers.All">
            <summary>
            Gets the list of all Range-parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.Encodings">
            <summary>
            The currently supported and built-in encodings for sequence items.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.IupacNA">
            <summary>
            The NCBI2na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.Ncbi2NA">
            <summary>
            The NCBI2na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.Ncbi4NA">
            <summary>
            The NCBI4na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.NcbiEAA">
            <summary>
            The NCBIeaa encoding standard - For Amino Acids
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.NcbiStdAA">
            <summary>
            The NCBIstdaa encoding standrad - For Amino Acids
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.Encodings.all">
            <summary>
            List of all supported encodings.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.Encodings.All">
            <summary>
             Gets the list of all encodings which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.EncodingMapDirection">
            <summary>
            Indicates which direction the encoding map provides mapping for.
            AlphabetToEncoding converts ISequenceItems from an IAlphabet and
            turns the into ISequenceItems from an IEncoding. EncodingToAlphabet
            does the reverse.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMapDirection.AlphabetToEncoding">
            <summary>
            Converts ISequenceItems from an IAlphabet into ISequenceItems from an Encoding.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMapDirection.EncodingToAlphabet">
            <summary>
            Converts ISequenceItems from an Encoding into ISequenceItems from an IAlphabet.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.EncodingMap">
            <summary>
            An encoding map provides the translation between items in an Alphabet and
            items in an Encoding. This is important because many alphabets have several
            encodings associated with them and thus you need an explicit map from one
            to the other.
            
            EncodingMap provides static methods for looking up known maps from Alphabet
            to Encoding and from Encoding to Alphabet. It also provides the means for
            defining your own mapping.
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.Ncbi4NAToDna">
            <summary>
            Map from Encoding NCBI4na to Alphabet DNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.Ncbi2NAToDna">
            <summary>
            Map from Encoding NCBI2na to Alphabet DNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.IupacNAToDna">
            <summary>
            Map from Encoding IUPACna to Alphabet DNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.Ncbi4NAToRna">
            <summary>
            Map from Encoding NCBI4na to Alphabet RNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.Ncbi2NAToRna">
            <summary>
            Map from Encoding NCBI2na to Alphabet RNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.IupacNAToRna">
            <summary>
            Map from Encoding IUPACna to Alphabet RNA
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.DnaToNcbi4NA">
            <summary>
            Map from Alphabet DNA to Encoding NCBI4na
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.DnaToNcbi2NA">
            <summary>
            Map from Alphabet DNA to Encoding NCBI2na
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.DnaToIupacNA">
            <summary>
            Map from Alphabet DNA to Encoding IUPACna
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.RnaToNcbi4NA">
            <summary>
            Map from Alphabet RNA to Encoding NCBI4na
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.RnaToNcbi2NA">
            <summary>
            Map from Alphabet RNA to Encoding NCBI2na
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.RnaToIupacNA">
            <summary>
            Map from Alphabet RNA to Encoding IUPACna
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.ProteinToNcbiStdAA">
            <summary>
            Map from Alphabet Protein to Encoding NCBIstdaa
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.ProteinToNcbiEAA">
            <summary>
            Map from Alphabet Protein to Encoding NCBIeaa
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.NcbiStdAAToProtein">
            <summary>
            Map from Encoding NCBIstdaa to Alphabet Protein
            </summary>
        </member>
        <member name="F:Bio.IO.Encoding.EncodingMap.NcbiEAAToProtein">
            <summary>
            Map from Encoding NCBIstdaa to Alphabet Protein
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.EncodingMap.GetDefaultMap(Bio.IAlphabet)">
            <summary>
            Looks up the default encoding map for known alphabets to the default
            encoding for that alphabet. Several encodings may exist for any one
            particular alphabet. If you want to select a particular encoding,
            consider using the GetMapToEncoding() method.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.EncodingMap.GetDefaultMap(Bio.IO.Encoding.IEncoding)">
            <summary>
            Looks up the default encoding map for a known encoding to the
            default alphabet for that encoding. Several alphabets may exist
            for any one particular encoding. If you want to select a particular
            alphabet, consider using the GetMapToAlphabet() method.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.EncodingMap.GetMapToEncoding(Bio.IAlphabet,Bio.IO.Encoding.IEncoding)">
            <summary>
            Looks amongst all the known encoding maps for one that provides a mapping
            from the alphabet passed in as a parameter to the encoding passed in as a
            parameter.
            </summary>
            <returns>The known encoding map, or null if one is not available</returns>
        </member>
        <member name="M:Bio.IO.Encoding.EncodingMap.GetMapToAlphabet(Bio.IO.Encoding.IEncoding,Bio.IAlphabet)">
            <summary>
            Looks amongst all the known encoding maps for one that provides a mapping
            from the encoding passed in as a parameter to the alphabet passed in as a
            parameter.
            </summary>
            <returns>The known encoding map, or null if one is not available</returns>
        </member>
        <member name="M:Bio.IO.Encoding.EncodingMap.Convert(Bio.ISequenceItem)">
            <summary>
            Converts the ISequenceItem passed in as a parameter from one collection
            of such items to another. This is useful in going from encoded items to
            alphabet items for instance.
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.EncodingMap.Alphabet">
            <summary>
            The alphabet source for the encoding map
            </summary>
        </member>
        <member name="P:Bio.IO.Encoding.EncodingMap.Encoding">
            <summary>
            The encoding source for the encoding map
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankMetadata">
            <summary>
            GenBankMetadata class holds metadata provided 
            by the gen bank flat file format.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.#ctor">
            <summary>
            Default Constructor.
            Creates GenBankMetadata instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.#ctor(Bio.IO.GenBank.GenBankMetadata)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankMetadata instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetFeatures(System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="startPosition">Start postion.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetFeatures(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range 
            and belongs to specified accession.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="accession">Accession number.</param>
            <param name="startPosition">Start postion.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeature(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Returns list of citation references in this metadata which are referred in the specified feature.
            </summary>
            <param name="item">Feature Item.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeatures">
            <summary>
            Returns list of citation references in this metadata which are referred in features.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.Clone">
            <summary>
            Creates a new GenBankMetadata that is a copy of the current GenBankMetadata.
            </summary>
            <returns>A new GenBankMetadata that is a copy of this GenBankMetadata.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankMetadata that is a copy of the current GenBankMetadata.
            </summary>
            <returns>A new object that is a copy of this GenBankMetadata.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Locus">
            <summary>
            Gets or sets the locaus information.
            Locus is a short mnemonic name for the entry, chosen to suggest the
            sequence's definition
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Definition">
            <summary>
            Gets or sets the defination.
            Definition is a concise description of the sequence
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Accession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Version">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Project">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flatfile format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.DBLink">
            <summary>
            DBLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.DBSource">
            <summary>
            DBSource provies reference to the GenBank record from which the protein 
            translation was obtained.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Keywords">
            <summary>
            Short phrases describing gene products and other information about the sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Segment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Source">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.References">
            <summary>
            Citations for all articles containing data reported in this entry.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Comments">
            <summary>
            Cross-references to other sequence entries, comparisons to
            other collections, notes of changes in LOCUS names, and other remarks.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Primary">
            <summary>
            Provides the reference to the primary GenBank files from which annotaions 
            in this file are derived.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Features">
            <summary>
            Containing information on portions of the sequence that code for 
            proteins and RNA molecules and information on experimentally determined 
            sites of biological significance.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.BaseCount">
            <summary>
            Summary of the number of occurrences of each basepair code 
            (a, c, t, g, and other) in the sequence.
            
            This is obsolete and was removed from the GenBank flatfile 
            format in October 2003.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Origin">
            <summary>
            Specification of how the first base of the reported sequence is 
            operationally located within the genome. Where possible, this 
            includes its location within a larger genetic map.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Contig">
            <summary>
            provides information about how individual sequence records can be 
            combined to form larger-scale biological objects, such as chromosomes 
            or complete genomes. Rather than presenting actual sequence data, a 
            special join() statement provides the accession numbers and basepair 
            ranges of the underlying records which comprise the object.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationOperator">
            <summary>
            Enum for location operators.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.None">
            <summary>
            No Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Complement">
            <summary>
            Complement Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Join">
            <summary>
            Join Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Order">
            <summary>
            Order Operator.
            </summary>
        </member>
        <member name="T:Bio.Alphabets">
            <summary>
            The currently supporteed and built-in alphabets for sequence items.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.DNA">
            <summary>
            The DNA alphabet
            </summary>
        </member>
        <member name="F:Bio.Alphabets.RNA">
            <summary>
            The DNA alphabet
            </summary>
        </member>
        <member name="F:Bio.Alphabets.Protein">
            <summary>
            The protein alphabet consisting of amino acids
            </summary>
        </member>
        <member name="F:Bio.Alphabets.all">
            <summary>
            List of all supported Alphabets.
            </summary>
        </member>
        <member name="M:Bio.Alphabets.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Bio.Alphabets.All">
            <summary>
             Gets the list of all Alphabets which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Contig">
            <summary>
            Contig is a data storage object representing a set of sequences
            that have been assembled into a new, longer sequence.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Sequences">
            <summary>
            The set of sequences that have been assembled to form the contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Consensus">
            <summary>
            A sequence derived from the input sequences as assembled, representing the
            contents of the whole range of the contig.
            <remarks>
            This is built by an IConsensusMethod.
            </remarks>
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Length">
            <summary>
            The length of the contig equals the length of its consensus.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Contig.AssembledSequence">
            <summary>
            A sequence, as it has been located into the contig. This includes
            possible reversal, complementation, or both.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Contig.AssembledSequence.Sequence">
            <summary>
            The sequence, as possibly modified (via gap insertion) by
            the overlap algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Contig.AssembledSequence.Position">
            <summary>
            The offset from the start of the contig where this sequence begins.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Contig.AssembledSequence.IsComplemented">
            <summary>
            Whether the sequence was complemented in order to find sufficient overlap.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Contig.AssembledSequence.IsReversed">
            <summary>
            Whether the orientation of the sequence was reversed in order to find
            sufficient overlap.
            <remarks>
            If the assembly algorithm used AssumeStandardOrientation=true, then IsReversed
            and IsComplemented will both be true (reverse complement) or both be false.
            </remarks>
            </summary>
        </member>
        <member name="T:Bio.Sequence">
             <summary>
             This is the standard implementation of the ISequence interface. It contains
             the raw data that defines the contents of a sequence. You can access that
             data in two ways. The first is by treating the Sequence as a list of
             SequenceItems. For example:
             
             Sequence mySequence = new Sequence(Alphabets.DNA, "GATTC");
             foreach (Nucleotide nucleotide in mySequence) { ... }
             
             You can also retrieve the data and work with it as a string. For example:
             
             String nucleotides = mySequence.ToString();
             
             In both cases the results will be based on the Alphabet associated with the
             sequence. Common alphabets include those for DNA, RNA, and Amino Acids.
             
             For users who wish to get at the underlying data directly, Sequence provides
             a means to do this as well. This may be useful for those writing algorithms
             against the sequence where performance is especially important. For these
             advanced users access is provided to the encoding classes associated with the
             sequence.
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.Sequence)">
            <summary>
            Constructor for clone method.
            </summary>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,Bio.Sequence)">
            <summary>
            Constructor to create a new sequence from the specified sequence 
            alphabet and encoding.
            </summary>
            <param name="alphabet">Alphabet for the new sequence.</param>
            <param name="encoding">Encoding for the new sequence.</param>
            <param name="sequence">Sequence instance.</param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a sequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.String)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            Sequence mySequence = new Sequence(Alphabets.DNA, someSequenceData);
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            Sequence mySequence = new Sequence(Alphabets.RNA, someSequenceData);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,System.String)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,Bio.IO.Encoding.ISequenceEncoder,Bio.IO.Encoding.ISequenceDecoder,System.String)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="encoder">
            The class that performs the encoding work from an ISequenceItem to
            the underlying byte array.
            </param>
            <param name="decoder">
            The class that performs the decoding work from a byte value to an=
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.String,Bio.SequenceStatistics)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter, when sequence statistics have already been calculated for
            the sequence data. The characters in the sequence parameter must be
            contained in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            SequenceStatistics someStatistics = ...
            Sequence mySequence = new Sequence(Alphabets.DNA, someSequenceData, someStatistics);
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            SequenceStatistics someStatistics = ...
            Sequence mySequence = new Sequence(Alphabets.RNA, someSequenceData, someStatistics);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="statistics">
            The statistics for the given sequence data, or null if no statistics have been
            calculated.
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,System.String,Bio.SequenceStatistics)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter, when sequence statistics have already been calculated for
            the sequence data. The characters in the sequence parameter must be
            contained in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="statistics">
            The statistics for the given sequence data, or null if no statistics have been
            calculated.
            </param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,Bio.IO.Encoding.ISequenceEncoder,Bio.IO.Encoding.ISequenceDecoder,System.String,Bio.SequenceStatistics)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter, when sequence statistics have already been calculated for
            the sequence data. The characters in the sequence parameter must be
            contained in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="encoder">
            The class that performs the encoding work from an ISequenceItem to
            the underlying byte array.
            </param>
            <param name="decoder">
            The class that performs the decoding work from a byte value to an=
            </param>
            <param name="statistics">
            The statistics for the given sequence data, or null if no statistics have been
            calculated.
            </param>
        </member>
        <member name="M:Bio.Sequence.Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new Sequence that is a copy of this Sequence.</returns>
        </member>
        <member name="M:Bio.Sequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.InsertRange(System.Int32,System.String)">
            <summary>
            Encodes sequence parameter and places the values obtained at the
            indicated position within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The sequence to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.Insert(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:Bio.Sequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the sequence data at the indicated position for an indicated
            number of characters.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="length">The number of characters to remove.</param>
        </member>
        <member name="M:Bio.Sequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.Replace(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The symbol of the item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Encodes the sequence and places it at the indicated position
            within the current sequence data, replacing the items currently
            located within that range. The number of items replaced will
            match the length of the sequence passed in.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.Sequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:Bio.Sequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:Bio.Sequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.Bio#ISequence#Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new ISequence that is a copy of this Sequence.</returns>
        </member>
        <member name="M:Bio.Sequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter. This does not do a symbol
            comparison. The match must be the exact same ISequenceItem.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:Bio.Sequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:Bio.Sequence.Clear">
            <summary>
            Removes all sequence data from the Sequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:Bio.Sequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            Note that the SequenceItem must be taken from the alphabet defined
            for this sequence in order for this method to return true.
            </summary>
        </member>
        <member name="M:Bio.Sequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items into a preallocated array.
            </summary>
        </member>
        <member name="M:Bio.Sequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes the first instance found of a particular sequence item.
            This item must be from the alphabet defined for the Sequence.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.Sequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Sequence.System#ICloneable#Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new object that is a copy of this Sequence.</returns>
        </member>
        <member name="M:Bio.Sequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Sequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.Sequence.Encoding">
            <summary>
            The encoding being used to translate the sequence items into string
            representations when needed, such as when calling ToString(). This
            value may also be used by individual implementations of ISequence to
            convert strings or characters passed into constructors or methods to
            convert to sequence items.
            </summary>
        </member>
        <member name="P:Bio.Sequence.EncodedValues">
            <summary>
            Provides a means of accessing the underlying data where the sequence
            is stored in memory. To understand the byte values encoded here you
            will likely also need to make use of the Encoding or Decoder associated
            with this sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Encoder">
            <summary>
            The encoder provides the means of converting a string representation
            of the sequence into the underlying memory structure of the sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Decoder">
            <summary>
            The decoder provides the means of converting the memory represenation
            of the sequence into a string representation.
            </summary>
        </member>
        <member name="P:Bio.Sequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.Sequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.Sequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.Sequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            When IsReadOnly is true, the sequence data is stored in a compact
            array and any method for editing that data will throw an exception.
            When IsReadOnly is false, the sequence data is stored in a less
            compact structure that allows for quick edits.
            
            You can set the IsReadOnly flag. The result of doing so will transfer
            the internal storage of the data from one mechanism to the other.
            </summary>
        </member>
        <member name="T:Bio.SequenceEnumerator">
            <summary>
            Enumerator implementation for the Sequence class
            </summary>
        </member>
        <member name="M:Bio.SequenceEnumerator.#ctor(Bio.ISequence)">
            <summary>
            Constructs an enumerator for a Sequence object.
            </summary>
        </member>
        <member name="M:Bio.SequenceEnumerator.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:Bio.SequenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item
            </summary>
            <returns>True if the enumerator can advance. False if the end of the sequence is reached.</returns>
        </member>
        <member name="M:Bio.SequenceEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the sequence
            </summary>
        </member>
        <member name="P:Bio.SequenceEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:Bio.SequenceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:Bio.IO.Fasta.FastaFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the FASTA file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.Fasta.FastaFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.Fasta.FastaFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a FASTA file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="P:Bio.IO.Fasta.FastaFormatter.Name">
            <summary>
            Gets the type of Formatter i.e FASTA.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.Fasta.FastaFormatter.Description">
            <summary>
            Gets the description of Fasta formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            FastaFormatter class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.Fasta.FastaFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTA file.
            </summary>
        </member>
        <member name="T:Bio.Registration.RegisteredAddIn">
            <summary>
            Self registration is used to get the collection of object which uses the 
            specific custom attribute as part of registration process with MBF
            </summary>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetAligners(System.Boolean)">
            <summary>
            Gets all registered aligners in core folder and addins (optional) folders
            </summary>
            <param name="includeAddInFolder">include add-ins folder or not</param>
            <returns>List of registered aligners</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetAssemblers(System.Boolean)">
            <summary>
            Get all registered assemblers in core folder and addins (optional) folders
            </summary>
            <param name="includeAddInFolder">include add-ins folder or not</param>
            <returns>List of registered assemblers</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetAlphabets(System.Boolean)">
            <summary>
            Gets all registered alphabets in core folder and addins (optional) folders
            </summary>
            <param name="includeAddInFolder">include add-ins folder or not</param>
            <returns>List of registered alphabets</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetFormatters(System.Boolean)">
            <summary>
            Gets all registered formatters in core folder and addins (optional) folders
            </summary>
            <param name="includeAddInFolder">include add-ins folder or not</param>
            <returns>List of registered formatters</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetParsers(System.Boolean)">
            <summary>
            Gets all registered parsers in core folder and addins (optional) folders
            </summary>
            <param name="includeAddInFolder">include add-ins folder or not</param>
            <returns>List of registered parsers</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetInstancesFromAssemblyPath``1(System.String,System.String)">
            <summary>
            Gets the instances from any given assembly path with specific filter
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <param name="assemblyPath">assemblies folder location</param>
            <param name="filter">file filter</param>
            <returns>List of Ts</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetInstancesFromAssembly``1(System.String)">
            <summary>
            Gets the instances from any given assembly file 
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <param name="assemblyName">assembly file</param>
            <returns>List of Ts</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.GetInstancesFromExecutingAssembly``1">
            <summary>
            Gets the instances from the executing assembly
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <returns>List of Ts</returns>
        </member>
        <member name="M:Bio.Registration.RegisteredAddIn.Register``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            Registers the set of registrable objects into collection
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <returns>List of Ts</returns>
        </member>
        <member name="P:Bio.Registration.RegisteredAddIn.AddInFolderPath">
            <summary>
            Gets the AddIns folder from MBF installation 
            </summary>
        </member>
        <member name="P:Bio.Registration.RegisteredAddIn.CoreFolderPath">
            <summary>
            Gets the Core folder from MBF installation 
            </summary>
        </member>
        <member name="T:Bio.QualitativeSequence">
            <summary>
            QualitativeSequence stores sequence item information along with its quality score.
            
            Following are three types of QualitativeSequence.
             1. Sanger type: 
                    A QualitativeSequence of type Sanger stores Phred quality scores.
                    Phred quality score values range from 0 to 93 are encoded and stored using ASCII 33 to 126.
                    Although in raw read data the Phred quality score rarely exceeds 60, higher scores are possible 
                    in assemblies or read maps.
             2. Solexa type: 
                    A QualitativeSequence of type Solexa stores Solexa / Illumina quality scores.
                    Score values ranges from -5 to 62 and these scores are encoded and stored using ASCII 59 to 126.
             3. Illumina type:
                    A QualitativeSequence of type Illumina stores Phred quality scores.
                    Score values ranges from 0 to 62 and these scores are encoded and stored using ASCII 64 to 126.
                    This is similar to Sanger but in this case base value is ASCII 64.
            By default this class assumes FastQFormatType as Illumina.
            Type property of this class specifies the type of QualitativeSequence.
            Note that all quality scores are ASCII encoded.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SangerMinQualScore">
            <summary>
            Minimum quality score for Sanger type.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SolexaMinQualScore">
            <summary>
            Minimum quality score for Solexa type.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.IlluminaMinQualScore">
            <summary>
            Minimum quality score for Illumina type.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SangerMaxQualScore">
            <summary>
            Maximum quality score for Sanger type
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SolexaMaxQualScore">
            <summary>
            Maximum quality score for Solexa type.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.IlluminaMaxQualScore">
            <summary>
            Maximum quality score for Illumina type.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.DefaultQualScore">
            <summary>
            Default quality score.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SangerAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Sanger format.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.SolexaAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Solexa/Illumina 1.0 format.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.IlluminaAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Illumina 1.3 format.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence._sequence">
            <summary>
            Sequence instance to hold sequence items.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence._scores">
            <summary>
            Holds quality scores when this sequence is in readonly mode.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence._scoreList">
            <summary>
            Holds quality scores when the sequence is not in readonly mode.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.QualitativeSequence)">
            <summary>
            Private constructor for Clone method.
            </summary>
            <param name="qualSequence">QualitativeSequence instance.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.IO.Encoding.IEncoding,Bio.QualitativeSequence)">
            <summary>
            Constructor to create a new QualitativeSequence from the specified QualitativeSequence,
            alphabet and encoding.
            </summary>
            <param name="alphabet">Alphabet for the new QualitativeSequence.</param>
            <param name="encoding">Encoding for the new QualitativeSequence.</param>
            <param name="qualSequence">QualitativeSequence instance.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a QualitativeSequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType)">
            <summary>
            Creates a QualitativeSequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.String)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and with default quality score.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData);
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.String,System.Byte)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and with specified quality score.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData, 40);
            All sequence item of mySequence will have quality score 40.
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData, 40);
            All sequence item of mySequence will have quality score 40.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and quality score via qualScores parameter.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            The number of characters in the sequence and number of bytes in the 
            qualScores must be equal, otherwise an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
             byte[] someQualityScores = new byte[]{33,40,45,40,39,40,40,40,50,45,38,45};
            Sequence mySequence = new Sequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData, someQualityScores);
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            byte[] someQualityScores = new byte[]{33,40,45,40,39,40,40,40,50,45,38,45};
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData, someQualityScores);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,System.String)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
             </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,System.String,System.Byte)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScore">Quality score, this score is used for all characters in sequence parameter.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,Bio.IO.Encoding.ISequenceEncoder,Bio.IO.Encoding.ISequenceDecoder,System.String)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="encoder">
            The class that performs the encoding work from an ISequenceItem to
            the underlying byte array.
            </param>
            <param name="decoder">
            The class that performs the decoding work from a byte value to an=
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,Bio.IO.Encoding.ISequenceEncoder,Bio.IO.Encoding.ISequenceDecoder,System.String,System.Byte)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="encoder">
            The class that performs the encoding work from an ISequenceItem to
            the underlying byte array.
            </param>
            <param name="decoder">
            The class that performs the decoding work from a byte value to an=
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScore">Quality score, this score is used for all characters in sequence parameter.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,Bio.IO.Encoding.IEncoding,Bio.IO.Encoding.ISequenceEncoder,Bio.IO.Encoding.ISequenceDecoder,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="encoder">
            The class that performs the encoding work from an ISequenceItem to
            the underlying byte array.
            </param>
            <param name="decoder">
            The class that performs the decoding work from a byte value to an=
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSangerToIllumina(System.Byte)">
            <summary>
            Converts Sanger quality score to Illumina quality score.
            </summary>
            <param name="qualScore">Sanger quality score.</param>
            <returns>Returns Illumina quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSangerToSolexa(System.Byte)">
            <summary>
            Converts Sanger quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Sanger quality score.</param>
            <returns>Returns Solexa quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSolexaToSanger(System.Byte)">
            <summary>
            Converts Solexa quality score to Sanger quality score.
            </summary>
            <param name="qualScore">Solexa quality score.</param>
            <returns>Returns Sanger quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSolexaToIllumina(System.Byte)">
            <summary>
            Converts Solexa quality score to Illumina quality score.
            </summary>
            <param name="qualScore">Solexa quality score.</param>
            <returns>Returns Illumina quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromIlluminaToSanger(System.Byte)">
            <summary>
            Converts Illumina quality score to Sanger quality score.
            </summary>
            <param name="qualScore">Illumina quality score.</param>
            <returns>Returns Sanger quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromIlluminaToSolexa(System.Byte)">
            <summary>
            Converts Illumina quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Illumina quality score.</param>
            <returns>Returns Solexa quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSangerToSolexa(System.Byte[])">
            <summary>
            Converts Sanger quality scores to Solexa quality scores.
            </summary>
            <param name="qualScores">Sanger quality scores.</param>
            <returns>Returns Solexa quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSangerToIllumina(System.Byte[])">
            <summary>
            Converts Sanger quality scores to Illumina quality scores.
            </summary>
            <param name="qualScores">Sanger quality scores.</param>
            <returns>Returns Illumina quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSolexaToSanger(System.Byte[])">
            <summary>
            Converts Solexa quality scores to Sanger quality scores.
            </summary>
            <param name="qualScores">Solexa quality scores.</param>
            <returns>Returns Sanger quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSolexaToIllumina(System.Byte[])">
            <summary>
            Converts Solexa quality scores to Illumina quality scores.
            </summary>
            <param name="qualScores">Solexa quality scores.</param>
            <returns>Returns Illumina quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromIlluminaToSanger(System.Byte[])">
            <summary>
            Converts Illumina quality scores to Sanger quality scores.
            </summary>
            <param name="qualScores">Illumina quality scores.</param>
            <returns>Returns Sanger quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromIlluminaToSolexa(System.Byte[])">
            <summary>
            Converts Illumina quality scores to Solexa quality scores.
            </summary>
            <param name="qualScores">Illumina quality scores.</param>
            <returns>Returns Solexa quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDefaultQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the default quality score for the specified FastQFormatType.
            </summary>
             /// <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetMaxQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the maximum quality score for the specified FastQFormatType.
            </summary>
             /// <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetMinQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the minimum quality score for the specified FastQFormatType.
            </summary>
            <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new QualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertTo(Bio.FastQFormatType)">
            <summary>
            Converts the current instance to the specified FastQ format type 
            and returns a new instance of QualitativeSequence.
            </summary>
            <param name="type">FastQ format type to convert</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Contains(System.Byte)">
            <summary>
            Indicates if the specified quality value is contained in the sequence anywhere.
            </summary>
            <param name="qualScore">Quality score to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Add(Bio.ISequenceItem,System.Byte)">
            <summary>
            Adds a sequence item and its quality score to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Insert(System.Int32,Bio.ISequenceItem,System.Byte)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Insert(System.Int32,System.Char,System.Byte)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.InsertRange(System.Int32,System.String,System.Byte)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.InsertRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Replace(System.Int32,System.Char,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Replace(System.Int32,Bio.ISequenceItem,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
            /// <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ReplaceRange(System.Int32,System.String,System.Byte)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ReplaceRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Bio#IQualitativeSequence#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new IQualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence which is sub sequence of this sequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Insert(System.Int32,System.Char)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified postion.
            </summary>
            <param name="position">Position from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Replace(System.Int32,System.Byte)">
            <summary>
            Replaces the quality score present in the specified postion in this sequence 
            with the specified quality score.
            </summary>
            <param name="position">Position at which the quality score has to be replaced.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ReplaceRange(System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the quality scores present in the specified position in this sequence with the specified quality scores.
            </summary>
            <param name="position">Position from which the replace of quality scores has to be started.</param>
            <param name="qualScores">List of quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence data present in the specified position in this sequence with the specified sequence data.
            </summary>
            <param name="position">Position from which the replace of sequence data has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new ISequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns index of the first item matching the specified item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>If found returns index of first occurrence; otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data present in the specified position.
            </summary>
            <param name="position">Position at which the sequence data has to be removed.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Clear">
            <summary>
            Clears the underlying sequence data in this sequence.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this QualitativeSequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this QualitativeSequence.
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this QualitativeSequence.
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.System#ICloneable#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new object that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the QualitativeSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetQualScore(System.Byte,Bio.FastQFormatType)">
            <summary>
            Gets the quality score from the ASCII encoded quality score.
            </summary>
            <param name="qualScore">ASCII Encoded quality score.</param>
            <param name="type">FastQ format type.</param>
            <returns>Returns quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualScore(System.Int32,Bio.FastQFormatType)">
            <summary>
            Gets the ASCII encoded quality score for the given quality score.
            </summary>
            <param name="qualScore">Quality Score.</param>
            <param name="type">FastQ format type</param>
            <returns>ASCII encoded quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ValidateQualScore(System.Byte,Bio.FastQFormatType)">
            <summary>
            Validates whether the specified quality score is within the FastQFormatType limit or not.
            </summary>
            <param name="qualScore">Quality score.</param>
            <param name="type">Fastq format type.</param>
            <returns>Returns true if the specified quality score is with in the limit, otherwise false.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromPhredToSolexa(System.Int32)">
            <summary>
            Converts Phred quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Quality score to be converted.</param>
            <returns>Solexa quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertFromSolexaToPhared(System.Int32)">
            <summary>
            Converts Solexa quality score to Phred quality score.
            </summary>
            <param name="qualScore">Quality score to be converted.</param>
            <returns>Phred quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDefaultQualScore">
            <summary>
            Gets the default quality score depending on the QualitativeSequenceItem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ValidateQualScore(System.Byte)">
            <summary>
            Validates whether the specified quality score is within the FastQFormatType limit or not.
            </summary>
            <param name="qualScore">Quality score.</param>
            <returns>Returns true if the specified quality score is with in the limit, otherwise false.</returns>
        </member>
        <member name="P:Bio.QualitativeSequence.Encoding">
            <summary>
            The encoding being used to translate the sequence items into string
            representations when needed, such as when calling ToString(). This
            value may also be used by individual implementations of ISequence to
            convert strings or characters passed into constructors or methods to
            convert to sequence items.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.EncodedValues">
            <summary>
            Provides a means of accessing the underlying data where the sequence
            is stored in memory. To understand the byte values encoded here you
            will likely also need to make use of the Encoding or Decoder associated
            with this sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Encoder">
            <summary>
            The encoder provides the means of converting a string representation
            of the sequence into the underlying memory structure of the sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Decoder">
            <summary>
            The decoder provides the means of converting the memory represenation
            of the sequence into a string representation.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Type">
            <summary>
            Gets the type of this QualitativeSequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Scores">
            <summary>
            Gets the quality scores.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular OrganismInfo
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["OrganismInfo"] = myOrganismInfo;
            
            To fetch the data you would use:
            
            OrganismInfo myOrganismInfo = mySequence.Metadata["OrganismInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Count">
            <summary>
            The number of sequence items contained in the QualitativeSequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this QualitativeSequence.
            When IsReadOnly is true, the sequence data is stored in a compact
            array and any method for editing that data will throw an exception.
            When IsReadOnly is false, the sequence data is stored in a less
            compact structure that allows for quick edits.
            
            You can set the IsReadOnly flag. The result of doing so will transfer
            the internal storage of the data from one mechanism to the other.
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Tree">
            <summary>
            Tree: The full input Newick Format for a single tree
            Tree --> Subtree ";" | Branch ";"
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Tree.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Tree.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Tree as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Tree.Name">
            <summary>
            Name of the tree
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Tree.Root">
            <summary>
            Root of the tree
            </summary>
        </member>
        <member name="T:Bio.MetadataListItem`1">
            <summary>
            It is common for a biological sequence file to contain lists of certain types of metadata,
            such as features or references, which can be stored as MetadataListItems.  A
            MetadataListItem contains a key (which might not be unique) a free-text field of top level
            information (such as a sequence location), and a list of sub-items, each consisting of
            a key and a data field of type T.  If the sub-items have unique keys, a string type can be
            used for T.  But if the sub-item keys are not unique, a list of strings should be used
            for T.
            </summary>
        </member>
        <member name="M:Bio.MetadataListItem`1.#ctor(System.String,System.String)">
            <summary>
            Constructs list item with given key and free text.
            </summary>
            <param name="key">The key, which might not be unique among items in the list.</param>
            <param name="freeText">The top level free-text information, such as a location string.
            </param>
        </member>
        <member name="M:Bio.MetadataListItem`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.MetadataListItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the metadata list item.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.MetadataListItem`1.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            ommitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:Bio.MetadataListItem`1.FreeText">
            <summary>
            Gets the free-text for this item.  This will often be a location string.
            </summary>
        </member>
        <member name="P:Bio.MetadataListItem`1.SubItems">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="T:Bio.IO.XsvSparseReader">
            <summary>
            This is used to read a sparse sequences from a text reader available as 
            character separated values in a line. There is one sequence item per line and 
            each record has two fields: position (int) and sequence item symbol (char).
            A comment line should be the first line for the reader and it contains
            the following fields separated by the separator character:
            1. the starting offset (in case this is an aligned sequence, 0 by default),
            2. the count of the sequence, and 
            3. the sequence ID string (newlines removed).
            e.g. reader for sparse sequence source with '#' as sequence ID prefix and ',' as separator 
            would read the following file contents:
            
            #0,100,A sparse sequence with 5 items
            12,A
            29,T
            56,G
            85,A
            32,C
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSparseReader.SkipCommentLines">
            <summary>
            Do not allow changing IgnoreComment since comments are required to 
            be enabled to set sequence I.
            </summary>
        </member>
        <member name="F:Bio.IO.XsvSparseReader.CommentPrefixes">
            <summary>
            Do not allow changing CommentPrefix since it is set by the constructor 
            as the sequenceIDPrefix.
            </summary>
        </member>
        <member name="M:Bio.IO.XsvSparseReader.#ctor(System.IO.TextReader,System.Char,System.Char)">
            <summary>
            Creates a reader for a sparse sequence that has sequence items as 
            character separated values, one per line.
            </summary>
            <param name="reader">The text reader with the contents of the sparse sequence</param>
            <param name="separator">The character that separates the sequence item position from its symbol. 
            This is also used to separate the offset, count, id in the sequence comment line.</param>
            <param name="sequenceIDPrefix">The character used to prefix the sequence comment line that 
            contains the offset, count, id in the sequence. this is used as a comment prefix character
            in the underlysing XsvTextReader.</param>
        </member>
        <member name="M:Bio.IO.XsvSparseReader.GetSequenceId">
            <summary>
            If the current line is the sequence start line it returns the sequence ID field in it.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence id is not present as the third character separated field.
            </summary>
            <returns>The sequence ID string for this sparse sequence</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseReader.GetSequenceOffset">
            <summary>
            If the current line is the sequence start line it returns the sequence offset field.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence offset is not present as an integer in the first character separated field.
            </summary>
            <returns>The sequence offset integer for this sparse sequence</returns>
        </member>
        <member name="M:Bio.IO.XsvSparseReader.GetSequenceCount">
            <summary>
            If the current line is the sequence start line it returns the sequence count field.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence count is not present as an integer in the second character separated field.
            </summary>
            <returns>The sequence count integer for this sparse sequence</returns>
        </member>
        <member name="T:Bio.IO.GenBank.MiscSignal">
            <summary>
            Any region containing a signal controlling or altering gene function or expression that cannot be described 
            by other signal keys (promoter, CAAT_signal, TATA_signal, -35_signal, -10_signal, GC_signal, RBS, polyA_signal, 
            enhancer, attenuator, terminator, and rep_origin).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(System.String)">
            <summary>
            Creates new MiscSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(Bio.IO.GenBank.MiscSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscSignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.Clone">
            <summary>
            Creates a new MiscSignal that is a copy of the current MiscSignal.
            </summary>
            <returns>A new MiscSignal that is a copy of this MiscSignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LongTerminalRepeat">
            <summary>
            Long terminal repeat (LTR), a sequence directly repeated at both ends of a defined sequence,
            of the sort typically found in retroviruses.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new LongTerminalRepeat feature item from the specified location.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(System.String)">
            <summary>
            Creates new LongTerminalRepeat feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(Bio.IO.GenBank.LongTerminalRepeat)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other LongTerminalRepeat instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.Clone">
            <summary>
            Creates a new LongTerminalRepeat that is a copy of the current LongTerminalRepeat.
            </summary>
            <returns>A new LongTerminalRepeat that is a copy of this LongTerminalRepeat.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IndexedItem`1">
            <summary>
            IndexedItem holds an item and its index.
            Index is a zero based position of item.
            This class is used in Sparse Sequence to get the known sequence items with their positions.
            
            This class implements IComparable interface and all comparisons are based on index 
            and not on item.
            </summary>
            <typeparam name="T">The type of item in IndexedItem.</typeparam>
        </member>
        <member name="M:Bio.IndexedItem`1.#ctor(System.Int32,`0)">
            <summary>
            Creates a new IndexedItem from the specified index and item.
            </summary>
            <param name="index">Index of the item specified.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Bio.IndexedItem`1.op_LessThan(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is less than 
            the index of rightHandSideObject then returns true, else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_LessThanOrEqual(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is 
            less than or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_GreaterThan(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than 
            the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_GreaterThanOrEqual(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than
            or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.CompareTo(Bio.IndexedItem{`0})">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            </summary>
            <param name="other">IndexedItem to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of other.
            Return value Description:
                  Less than zero index of this instance is less than the index of other.
                  Zero index of this instance is equal to the index of other.
                  Greater than zero index of this instance is greater than the index of other 
                    or other is null.
            </returns>
        </member>
        <member name="M:Bio.IndexedItem`1.Equals(Bio.IndexedItem{`0})">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both Index and Item. If both Index and Item of this instance and 
            other are equal then it returns true, else returns false.
            </summary>
            <param name="other">IndexedItem instance to compare.</param>
            <returns>Returns true if other has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both index and item. If both Index and Item of this instance and 
            obj are equal then it returns true else returns false.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>Returns true if obj has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.CompareTo(System.Object)">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            
            Parameter obj must be of IndexedItem, else an ArgumentException wull occure.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of specified IndexedItem.
            Return Value Description:
                  Less than zero index of this instance is less than the index of specified IndexedItem.
                  Zero index of this instance is equal to the index of specified IndexedItem.
                  Greater than zero index of this instance is greater than the index of specified IndexedItem 
                    or specified IndexedItem is null.
            </returns>
        </member>
        <member name="P:Bio.IndexedItem`1.Index">
            <summary>
            Gets or sets the index.
            Specifies the zero based position of the item.
            </summary>
        </member>
        <member name="P:Bio.IndexedItem`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="T:Bio.DerivedSequence">
            <summary>
            DerivedSequence maintains source sequence along with changes.
            Source property provides the source sequence.
            
            This class internally maintains separate indices to keep track of the changes, this is called internal indices. 
            Count of internal indices will increase with insert of sequence items and it will decrease only when previously 
            inserted sequence items are removed.
            Note that it will not decrease if the removed item had not been inserted previously.
            
            For example:
            Consider a source sequence "AGCT". 
            
                              A G C T
            original indices  0 1 2 3 
            current indices   0 1 2 3 
            internal indices  0 1 2 3
            
            Insert sequence item "A" at position 2. This will increase the count of internal indices.
                              A G A C T
            original indices  0 1   2 3 
            current indices   0 1 2 3 4
            internal indices  0 1 2 3 4
            
            Remove item at position 1. This will not decrease the count of internal indices.
                              A G A C T
            original indices  0 1   2 3 
            current indices   0   1 2 3
            internal indices  0 1 2 3 4
            
            Remove item at position 1 which was previously inserted. This will reduce the count of interal indices.
            
                              A G C T
            original indices  0 1 2 3                  
            current indices   0   1 2 
            internal indices  0 1 2 3 
            </summary>
        </member>
        <member name="F:Bio.DerivedSequence._source">
            <summary>
            Holds original sequence.
            </summary>
        </member>
        <member name="F:Bio.DerivedSequence._updatedItems">
            <summary>
            Holds changes made to this DerivedSequence.
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.#ctor(Bio.DerivedSequence)">
            <summary>
            Constructor for clone method.
            </summary>
            <param name="otherDerivedSequence">otherDerivedSequence to clone.</param>
        </member>
        <member name="M:Bio.DerivedSequence.#ctor(Bio.ISequence)">
            <summary>
            Creates DerivedSequence from the specified source sequence.
            </summary>
            <param name="source">source sequence.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new DerivedSequence that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetUpdatedItems">
            <summary>
            Returns the changes made to the derived sequence as a list of IndexedItem&lt;UpdatedSequenceItem&gt;.
            Note that this method returns internal indices and not the current indices. 
            In case of insert and replace operations UpdatedSequenceItem will contain sequence item which 
            was inserted or replaced. For remove operation it will contain removed sequence item.
            </summary>
            <returns>List of IndexedItem&lt;UpdatedSequenceItem&gt;.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetAllRemovedItemsCount">
            <summary>
            Returns count of removed items.
            </summary>
            <returns>Total number of removed items.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetAllInsertedItemsCount">
            <summary>
            Returns total number of inserted items.
            </summary>
            <returns>Total number of inserted items.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetRemovedItemsCount(System.Int32)">
            <summary>
            Returns removed items from zero to specified index (including specified index).
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns count of removed items.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetInsertedItemsCount(System.Int32)">
            <summary>
            Returns inserted items from zero to specified index (excluding specified index).
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns count of inserted items.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.UpdatePositions(System.Int32,System.Int32)">
            <summary>
            Updates indices of items which is greater than or equal to the specified index
            with the specified value.
            </summary>
            <param name="index">Index from which update has to be done.</param>
            <param name="value">Value with which positions have to be updated.</param>
        </member>
        <member name="M:Bio.DerivedSequence.GetInternalIndex(System.Int32)">
            <summary>
            Gets the internal index for the specified index.
            </summary>
            <param name="index">Index for which the internal index is required.</param>
            <returns>Returns internal index for specified index.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetItem(System.Int32)">
            <summary>
            Gets the item present at specified index.
            </summary>
            <param name="index">index at which the sequence item is required.</param>
            <returns>Sequence item present at specified index.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetItemFromSource(System.Int32)">
            <summary>
            Gets the sequence item present at specified internal index.
            </summary>
            <param name="internalIndex">Internal index.</param>
            <returns>Returns sequence item.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Converts the specified character to a sequence item and insert at the specified index.
            </summary>
            <param name="index">Index at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:Bio.DerivedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Converts each character in the specified sequence string to sequence items
            and inserts them to the specified index. 
            </summary>
            <param name="index">Index at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.DerivedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified index.
            </summary>
            <param name="index">Index from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified index in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="index">Index at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified index in this sequence with the specified sequence item. 
            </summary>
            <param name="index">Index at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:Bio.DerivedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence items present in the specified index with the specified sequence item.
            </summary>
            <param name="index">Index from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.DerivedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new DerivedSequence that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns the index of first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item of which the index is required.</param>
            <returns>If found returns zero based index of first occurance of the specified sequence item else returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified index in this sequence.
            </summary>
            <param name="index">Index at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:Bio.DerivedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence item present in the specified index.
            </summary>
            <param name="index">Index at which the sequence item has to be removed.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Clear">
            <summary>
            Clears the changes made to this sequence.
            Note that this method will not clear the source sequence.
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Bio.DerivedSequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new object that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.DerivedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the DerivedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.DerivedSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Source">
            <summary>
            Gets source sequence specified while creating this instance.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Alphabet">
            <summary>
            Gets the alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.MoleculeType">
            <summary>
            Gets the molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Metadata">
            <summary>
            Gets the metadata of the source sequence.
            Note that changing the metadata will change the metadata of source sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Documentation">
            <summary>
            Gets or sets the documentation of source sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns sequence item present at specified index.</returns>
        </member>
        <member name="P:Bio.DerivedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            </summary>
        </member>
        <member name="T:Bio.Registration.AssemblyResolver">
            <summary>
            Internal class gets the instance of defined (RegistrableAttribute) 
            attribute in Bio namespace
            </summary>
        </member>
        <member name="M:Bio.Registration.AssemblyResolver.Resolve">
            <summary>
            Resolves the local/loaded assembly with the registed attribute
            </summary>
            <returns>List of objects</returns>
        </member>
        <member name="M:Bio.Registration.AssemblyResolver.Resolve(System.String)">
            <summary>
            Resolves the specified assembly with the registed attribute
            </summary>
            <param name="assemblyName">assembly name</param>
            <returns>List of objects</returns>
        </member>
        <member name="M:Bio.Registration.AssemblyResolver.Resolve(System.Reflection.Assembly)">
            <summary>
            Creates the instance of specified type
            </summary>
            <param name="assembly">assembly reference</param>
            <returns>List of objects</returns>
        </member>
        <member name="P:Bio.Registration.AssemblyResolver.BioInstallationPath">
            <summary>
            Gets the MBF installed path from current assembly location
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NeedlemanWunschAligner">
            <summary>
            Implements the NeedlemanWunsch algorithm for global alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NeedlemanWunschAligner._optScore">
            <summary>
            Tracks optimal score for alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetOptimalScoreSimple">
            <summary>
            Sets the score in last cell of _FScore to be the optimal score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetOptimalScoreAffine">
            <summary>
            Sets the score in last cell of _MaxScore to be the optimal score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for zeroth row in NeedlemanWunsch global alignment.
            Uses single gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth column in NeedlemanWunsch global alignment.
            Uses single gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for zeroth row in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth column in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback for global alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment
            of sequence1 with respect to sequence2</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NeedlemanWunschAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Needleman-Wunsch algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NeedlemanWunschAligner.Description">
            <summary>
            Gets the description of the NeedlemanWunsch algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            NeedlemanWunschAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Web.WebServices">
            <summary>
            WebServices class is an abstraction class which provides instances
            and lists of all Webservices currently supported by MBF. 
            </summary>
        </member>
        <member name="F:Bio.Web.WebServices.ncbiBlast">
            <summary>
            A singleton instance of NcbiQBlast class which implements the client side 
            functionality required to perform Blast Search Requests against the 
            the NCBI QBlast system using their Blast URL APIs.
            </summary>
        </member>
        <member name="F:Bio.Web.WebServices.ebiBlast">
            <summary>
            A singleton instance of EBIWUBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the EBI WUBlast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="F:Bio.Web.WebServices.azureBlast">
            <summary>
            A singleton instance of AzureBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the Azure BLAST web-service using their published interface proxy.
            </summary>
        </member>
        <member name="F:Bio.Web.WebServices.all">
            <summary>
            List of supported Webservices by the MBF.
            </summary>
        </member>
        <member name="P:Bio.Web.WebServices.NcbiBlast">
            <summary>
            Gets an instance of NcbiQBlast class which implements the client side 
            functionality required to perform Blast Search Requests against the 
            the NCBI QBlast system using their Blast URL APIs. 
            </summary>
        </member>
        <member name="P:Bio.Web.WebServices.EbiBlast">
            <summary>
            Gets an instance of BIWUBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the EBI WUBlast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="P:Bio.Web.WebServices.AzureBlast">
            <summary>
            Gets an instance of AzureBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the Azure Blast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="P:Bio.Web.WebServices.All">
            <summary>
            Gets the list of all Webservices supported by the MBF.
            </summary>
        </member>
        <member name="T:Bio.Web.DoubleRangeValidator">
            <summary>
            A validator for double values that defines an inclusive range of 
            allowed values.
            </summary>
        </member>
        <member name="M:Bio.Web.DoubleRangeValidator.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="first">The lowest value.</param>
            <param name="last">The highest value.</param>
        </member>
        <member name="M:Bio.Web.DoubleRangeValidator.IsValid(System.Object)">
            <summary>
            Given an int value as an object, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.Web.DoubleRangeValidator.IsValid(System.String)">
            <summary>
            Given an int value as a string, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:Bio.Web.DoubleRangeValidator.First">
            <summary>
            The lowest allowed value.
            </summary>
        </member>
        <member name="P:Bio.Web.DoubleRangeValidator.Last">
            <summary>
            The highest value allowed.
            </summary>
        </member>
        <member name="T:Bio.DifferenceNode">
            <summary>
            Node that tracks difference between the two sequences
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence1Start">
            <summary>
            Start position of difference in first sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence1End">
            <summary>
            End position of difference in first sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence2Start">
            <summary>
            Start position of difference in second sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence2End">
            <summary>
            End position of difference in second sequence 
            </summary>
        </member>
        <member name="M:Bio.DifferenceNode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DifferenceNode class.
            </summary>
            <param name="startIndex1">Start index in first sequence</param>
            <param name="startIndex2">Start index in second sequence</param>
            <param name="endIndex1">End index in first sequence</param>
            <param name="endIndex2">End index in second sequence</param>
        </member>
        <member name="M:Bio.DifferenceNode.CompareDifferenceNode(Bio.WordMatch,Bio.WordMatch)">
            <summary>
            Comparison of two word match list nodes
            based on the first sequence start indices
            </summary>
            <param name="n1">First match list node</param>
            <param name="n2">Second match list node</param>
            <returns>Integer value indicating zero if equal.</returns>
        </member>
        <member name="M:Bio.DifferenceNode.BuildDiffList(System.Collections.Generic.List{Bio.WordMatch},Bio.ISequence,Bio.ISequence)">
            <summary>
            Builds difference list from match list
            </summary>
            <param name="matchList">List of matching segments</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <returns>List of difference nodes</returns>
        </member>
        <member name="M:Bio.DifferenceNode.OutputDiffList(System.Collections.Generic.List{Bio.DifferenceNode},Bio.ISequence,Bio.ISequence)">
            <summary>
            Constructs output from input difference list
            </summary>
            <param name="diffList">Difference list</param>
            <param name="sequence1">First Sequence</param>
            <param name="sequence2">Second Sequence</param>
            <returns>List of features</returns>
        </member>
        <member name="M:Bio.DifferenceNode.ComputeFeatures(System.Int32,System.Int32,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence,System.Int32,System.Int32)">
            <summary>
            Computes features for current difference
            </summary>
            <param name="sequence1Start">Start index of difference in first sequence</param>
            <param name="sequence2Start">Start index of difference in second sequence</param>
            <param name="sequence1End">End index of difference in first sequence</param>
            <param name="sequence2End">End index of difference in second sequence</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <param name="sequence1Index">First sequence index</param>
            <param name="sequence2Index">Second sequence index</param>
            <returns>List of features</returns>
        </member>
        <member name="M:Bio.DifferenceNode.ToString">
            <summary>
            Constructs a user-friendly string representation.
            Used for debug purpose.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence1Start">
            <summary>
            Gets start index of difference in first sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence2Start">
            <summary>
            Gets start index of difference in second sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence1End">
            <summary>
            Gets end index of difference in first sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence2End">
            <summary>
            Gets end index of difference in second sequence
            </summary>
        </member>
        <member name="T:Bio.DifferenceNode.CompareFeature">
            <summary>
            Structure that maintains node structure for feature list.
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.start">
            <summary>
            Difference start position
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.end">
            <summary>
            Difference end position
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.featureType">
            <summary>
            Type of feature
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.feature">
            <summary>
            Feature Description
            </summary>
        </member>
        <member name="M:Bio.DifferenceNode.CompareFeature.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the CompareFeature class.
            </summary>
            <param name="startPosition">Difference start position</param>
            <param name="endPosition">Difference end position</param>
            <param name="featureType">Type of feature</param>
            <param name="feature">Feature details</param>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.Start">
            <summary>
            Gets value of start index 
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.End">
            <summary>
            Gets value of end index 
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.FeatureType">
            <summary>
            Gets value of feature type
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.Feature">
            <summary>
            Gets feature description
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.AlignmentAttribute">
            <summary>
            This class defines generic properties of any alignment algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentAttribute.IntType">
            <summary>
            "int" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentAttribute.FloatType">
            <summary>
            "float" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentAttribute.StringListType">
            <summary>
            "string" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentAttribute._dataType">
            <summary>
            Data type of the parameter
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignmentAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,Bio.Web.IParameterValidator)">
            <summary>
            Initializes a new instance of the AlignmentAttribute class, 
            specifying all properties.
            </summary>
            <param name="name">Name of the property</param>
            <param name="description">A friendly description of property.</param>
            <param name="required">True if this is a required property.</param>
            <param name="defaultValue">The default value that will be used (expressed as a string).</param>
            <param name="dataType">The data type: INT, FLOAT, or STRINGLIST.</param>
            <param name="validator">The validation object, or null if no validation is required.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignmentAttribute.ValidateDataType(System.String)">
            <summary>
            Validate the data type value
            </summary>
            <param name="dataType">Type to be validated</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.Name">
            <summary>
            Gets or sets the name of attribute.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.Description">
            <summary>
            Gets or sets description of the parameter's meaning.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the parameter is required property.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.DefaultValue">
            <summary>
            Gets or sets default value (as a string). Ignored if Required = true.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.DataType">
            <summary>
            Gets or sets data type ("int", "double", "float" or "string") of parameter.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentAttribute.Validator">
            <summary>
            Gets or sets validation object that tests values. If this is null, 
            any value will be accepted
            </summary>
        </member>
        <member name="T:Bio.Matrix.Resources.SimilarityMatrixResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.AmbiguousDna">
             <summary>
               Looks up a localized string similar to AmbiguousDNA
             A   T   G   C   S   W   R   Y   K   M   B   V   H   D   N
             5  -4  -4  -4  -4   1   1  -4  -4   1  -4  -1  -1  -1   0
            -4   5  -4  -4  -4   1  -4   1   1  -4  -1  -4  -1  -1   0
            -4  -4   5  -4   1  -4   1  -4   1  -4  -1  -1  -4  -1   0
            -4  -4  -4   5   1  -4  -4   1  -4   1  -1  -1  -1  -4   0
            -4  -4   1   1	 5  -4  -2  -2  -2  -2  -1  -1  -3  -3   0
             1   1  -4  -4  -4   5  -2  -2  -2  -2  -3  -3  -1  -1   0
             1  -4   1  -4  -2  -2   5  -4  -2  -2  -3  -1  -3  -1   0
            -4   1  -4   1  -2  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.AmbiguousRna">
             <summary>
               Looks up a localized string similar to AmbiguousRNA
             A   U   G   C   S   W   R   Y   K   M   B   V   H   D   N
             5  -4  -4  -4  -4   1   1  -4  -4   1  -4  -1  -1  -1   0
            -4   5  -4  -4  -4   1  -4   1   1  -4  -1  -4  -1  -1   0
            -4  -4   5  -4   1  -4   1  -4   1  -4  -1  -1  -4  -1   0
            -4  -4  -4   5   1  -4  -4   1  -4   1  -1  -1  -1  -4   0
            -4  -4   1   1	 5  -4  -2  -2  -2  -2  -1  -1  -3  -3   0
             1   1  -4  -4  -4   5  -2  -2  -2  -2  -3  -3  -1  -1   0
             1  -4   1  -4  -2  -2   5  -4  -2  -2  -3  -1  -3  -1   0
            -4   1  -4   1  -2  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Blosum45">
            <summary>
              Looks up a localized string similar to BLOSUM45
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -1  -2  -1  -1  -1   0  -2  -1  -1  -1  -1  -2  -1   1   0  -2  -2   0  -1  -1  -1  -1  -5
            -2   7   0  -1  -3   1   0  -2   0  -3  -2   3  -1  -2  -2  -1  -1  -2  -1  -2  -1  -3   1  -1  -5
            -1   0   6   2  -2   0   0   0   1  -2  -3   0  -2  -2  -2   1   0  -4  -2  -3   5  -3   0  -1  -5
            -2  -1   2   7  -3   0   2  -1   0  -4  -3   0  -3  -4  -1   0  -1  -4  -2  -3   6  -3   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Blosum50">
            <summary>
              Looks up a localized string similar to BLOSUM50
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -1  -2  -1  -1  -1   0  -2  -1  -2  -1  -1  -3  -1   1   0  -3  -2   0  -2  -2  -1  -1  -5
            -2   7  -1  -2  -4   1   0  -3   0  -4  -3   3  -2  -3  -3  -1  -1  -3  -1  -3  -1  -3   0  -1  -5
            -1  -1   7   2  -2   0   0   0   1  -3  -4   0  -2  -4  -2   1   0  -4  -2  -3   5  -4   0  -1  -5
            -2  -2   2   8  -4   0   2  -1  -1  -4  -4  -1  -4  -5  -1   0  -1  -5  -3  -4   6  -4   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Blosum62">
            <summary>
              Looks up a localized string similar to BLOSUM62
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             4  -1  -2  -2   0  -1  -1   0  -2  -1  -1  -1  -1  -2  -1   1   0  -3  -2   0  -2  -1  -1  -1  -4
            -1   5   0  -2  -3   1   0  -2   0  -3  -2   2  -1  -3  -2  -1  -1  -3  -2  -3  -1  -2   0  -1  -4
            -2   0   6   1  -3   0   0   0   1  -3  -3   0  -2  -3  -2   1   0  -4  -2  -3   4  -3   0  -1  -4
            -2  -2   1   6  -3   0   2  -1  -1  -3  -4  -1  -3  -3  -1   0  -1  -4  -3  -3   4  -3   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Blosum80">
            <summary>
              Looks up a localized string similar to BLOSUM80
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -2  -2  -1  -1  -1   0  -2  -2  -2  -1  -1  -3  -1   1   0  -3  -2   0  -2  -2  -1  -1  -6
            -2   6  -1  -2  -4   1  -1  -3   0  -3  -3   2  -2  -4  -2  -1  -1  -4  -3  -3  -1  -3   0  -1  -6
            -2  -1   6   1  -3   0  -1  -1   0  -4  -4   0  -3  -4  -3   0   0  -4  -3  -4   5  -4   0  -1  -6
            -2  -2   1   6  -4  -1   1  -2  -2  -4  -5  -1  -4  -4  -2  -1  -1  -6  -4  -4   5  -5   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Blosum90">
            <summary>
              Looks up a localized string similar to BLOSUM90
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -2  -3  -1  -1  -1   0  -2  -2  -2  -1  -2  -3  -1   1   0  -4  -3  -1  -2  -2  -1  -1  -6
            -2   6  -1  -3  -5   1  -1  -3   0  -4  -3   2  -2  -4  -3  -1  -2  -4  -3  -3  -2  -3   0  -1  -6
            -2  -1   7   1  -4   0  -1  -1   0  -4  -4   0  -3  -4  -3   0   0  -5  -3  -4   5  -4  -1  -1  -6
            -3  -3   1   7  -5  -1   1  -2  -2  -5  -5  -1  -4  -5  -3  -1  -2  -6  -4  -5   5  -5   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.DiagonalScoreMatrix">
            <summary>
              Looks up a localized string similar to DiagonalScoreMatrix
             A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
             3, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7,  3, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Pam250">
            <summary>
              Looks up a localized string similar to PAM250
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             2  -2   0   0  -2   0   0   1  -1  -1  -2  -1  -1  -3   1   1   1  -6  -3   0   0  -1   0  -1  -8
            -2   6   0  -1  -4   1  -1  -3   2  -2  -3   3   0  -4   0   0  -1   2  -4  -2  -1  -3   0  -1  -8
             0   0   2   2  -4   1   1   0   2  -2  -3   1  -2  -3   0   1   0  -4  -2  -2   2  -3   1  -1  -8
             0  -1   2   4  -5   2   3   1   1  -2  -4   0  -3  -6  -1   0   0  -7  -4  -2   3  -3   3  -1  -8
            [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Pam30">
            <summary>
              Looks up a localized string similar to PAM30
              A     R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X   *
              6    -7   -4   -3   -6   -4   -2   -2   -7   -5   -6   -7   -5   -8   -2    0   -1  -13   -8   -2   -3   -6   -3   -1  -17
             -7     8   -6  -10   -8   -2   -9   -9   -2   -5   -8    0   -4   -9   -4   -3   -6   -2  -10   -8   -7   -7   -4   -1  -17
             -4    -6    8    2  -11   -3   -2   -3    0   -5   -7   -1   -9   -9   -6    0   -2   -8   -4   -8    6   -6   -3   -1  -17 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Bio.Matrix.Resources.SimilarityMatrixResources.Pam70">
            <summary>
              Looks up a localized string similar to PAM70
             A     R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X    *
             5    -4   -2   -1   -4   -2   -1    0   -4   -2   -4   -4   -3   -6    0    1    1   -9   -5   -1   -1   -3   -1   -1  -11
            -4     8   -3   -6   -5    0   -5   -6    0   -3   -6    2   -2   -7   -2   -1   -4    0   -7   -5   -4   -5   -2   -1  -11
            -2    -3    6    3   -7   -1    0   -1    1   -3   -5    0   -5   -6   -3    1    0   -6   -3   -5    5   -4   -1   -1  -11
             [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CrossReferenceLink">
            <summary>
            CrossReferenceLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.#ctor(Bio.IO.GenBank.CrossReferenceLink)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">CrossReferenceLink instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.Clone">
            <summary>
            Creates a new CrossReferenceLink that is a copy of the current CrossReferenceLink.
            </summary>
            <returns>A new CrossReferenceLink that is a copy of this CrossReferenceLink.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.System#ICloneable#Clone">
            <summary>
            Creates a new CrossReferenceLink that is a copy of the current CrossReferenceLink.
            </summary>
            <returns>A new object that is a copy of this CrossReferenceLink.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CrossReferenceLink.Type">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            refering to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CrossReferenceLink.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.Transcription">
            <summary>
            Provides basic nucleotide transcription across DNA and RNA sequences.
            Static methods in the class provide lookup for single nucleotide
            complements as well as creating RNA (transcription) or DNA (reverse
            transcription) from a DNA or RNA sequence, respectively.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.GetRnaComplement(Bio.Nucleotide)">
            <summary>
            Returns the complement nucleotide from DNA to RNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.GetDnaComplement(Bio.Nucleotide)">
            <summary>
            Returns the complement nucleotide from RNA to DNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.Transcribe(Bio.ISequence)">
             <summary>
             Transcribes a DNA sequence into an RNA sequence. The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence rna = Transcription.Transcribe(dna);
            
             rna.ToString() would produce "AUGGCG"
             </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.ReverseTranscribe(Bio.ISequence)">
             <summary>
             Does reverse transcription from an RNA sequence into an DNA sequence.
             The length of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence rna = new Sequence(Alphabets.RNA, "UACCGC");
             Sequence dna = Transcription.ReverseTranscribe(rna);
            
             dna.ToString() would produce "ATGGCG"
             </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.SequenceAssembly">
            <summary>
            SequenceAssembly is a implementation of ISequenceAssembly that stores the 
            assembly result.
            
            This class contains list of contigs and list of unmerged sequences.
            To maintain the information like history or context, use Documentation property of this class.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SequenceAssembly._contigs">
            <summary>
            Holds list of contigs created after Assembly.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.SequenceAssembly._unmergedSequences">
            <summary>
            Holds list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SequenceAssembly.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SequenceAssembly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.SequenceAssembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceAssembly.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SequenceAssembly.Contigs">
            <summary>
            List of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SequenceAssembly.UnmergedSequences">
            <summary>
            List of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.SequenceAssembly.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a SequenceAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="T:Bio.Matrix.DiagonalSimilarityMatrix">
            <summary>
            Diagonal similarity matrix is a special case and needs its own class.
            It does not have an actual matrix, instead using a test "if (col == row)" and
            returning the diagonal value if true, and the off diagonal value if false.
            </summary>
        </member>
        <member name="T:Bio.Matrix.SimilarityMatrix">
            <summary>
            Representation of a matrix that contains similarity scores for every 
            pair of symbols in an alphabet. BLOSUM and PAM are well-known examples.
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.GapChar">
            <summary>
            Gap character used in aligned sequence strings.
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.GapCode">
            <summary>
            Value used in the similarity matrix and alignment codes when a new gap is created.
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix._encoding">
            <summary>
            Encoding that maps the symbols and ordering used in the similarity matrix to the symbols used in the sequences.
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix._similarityMatrix">
            <summary>
            Array containing the scores for each pair of symbols.
            The indices of the array are byte values of alphabet symbols.
            The byte values are obtained based on the encoding used.
            </summary>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.#ctor">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            </summary>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.#ctor(Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            Constructs one of the standard similarity matrices.
            </summary>
            <param name="matrixId">
            Matrix to load, BLOSUM and PAM currently supported.
            The enum StandardSimilarityMatrices contains list of available matrices.
            </param>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.#ctor(System.IO.TextReader)">
            <remarks>
            File or stream format:
            There are two slightly different formats.
            <para>
            For custom similarity matrices:
            First line is descriptive name, will be stored as a string.
            Second line define the molecule type.  Must be "DNA", "RNA", or "Protein".
            Third line is alphabet (symbol map). It contains n characters and optional white space.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines
            </para>
            <para>
            In some cases the molecule type is implicit in the matrix.  This is true for the
            supported standard matrices (BLOSUM and PAM series at this point), and for the standard
            encodings IUPACna, NCBIA2na, NCBI2na, NCBI4na, and NCBIeaa.
            For these cases:
            First line is descriptive name, will be stored as a string.
            Second line is the encoding name for the standard encodings (IUPACna, NCBIA2na, NCBI2na, NCBI4na, or NCBIeaa)
                or the alphabet (symbol map) for the standard matrices.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines; or in the case of the supported encoding, sufficient
            entries to handle all possible indices (0 through max index value).
            </para>
            </remarks>
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            Constructs SimilarityMatrix from an input stream.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream</param>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            Constructs SimilarityMatrix from an input file.
            </summary>
            <param name="fileName">File name of input sequence</param>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.#ctor(System.Int32[0:,0:],System.String,System.String,Bio.MoleculeType)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            Constructs a custom SimilarityMatrix.
            </summary>
            <param name="similarityMatrix">2-d array containing the correlation scoring matrix.</param>
            <param name="symbolMap">Symbols (alphabet) associated with the array.</param>
            <param name="name">Description of the custom matrix.</param>
            <param name="moleculeType">Type of molecule for which this matrix is designed.  Must be DNA, RNA or Protein.</param>
            <remarks>
            The array must be NxN, where there are N symbols in the symbolMap.
            The ordering of the symbolMap must match the ordering in the array.
            </remarks>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.ValidateSequence(Bio.ISequence)">
            <summary>
            Confirms that there is a symbol in the similarity matrix for every
            symbol in the sequence.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <returns>true if sequence is valid.</returns>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.ToByteArray(System.String)">
            <summary>
            Converts sequence string to byte array for use by alignment engines.
            Mapping from character to integer uses index ordering associated with matrix.
            </summary>
            <param name="sequence">String of sequence symbols</param>
            <returns>Byte array representation of input sequence</returns>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.ToString(System.Byte[])">
            <summary>
            Converts sequence as integer array to string using SimilarityMatrix symbol map.
            </summary>
            <param name="array">Byte array corresponding to sequence</param>
            <returns>String representation of sequence</returns>
        </member>
        <member name="M:Bio.Matrix.SimilarityMatrix.LoadFromStream(System.IO.TextReader,System.Boolean)">
            <summary>
            Reads similarity matrix from a stream.  File (or stream) format defined
            above with constructors to create SimilarityMatrix from stream or file.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream</param>
            <param name="isSupportedStandardMatrix">true for BLOSUM and PAM series supported matrices, otherwise false</param>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.Name">
            <summary> 
            Gets or sets descriptive name of the particular SimilarityMatrix being used. 
            </summary>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.Matrix">
            <summary>
            Gets or sets similarity matrix values in a 2-D integer array.
            </summary>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.MatrixEncoding">
            <summary>
            Gets or sets value of encoding
            </summary>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.MatrixMoleculeType">
            <summary>
            Gets or sets molecule type for matrix.
            DNA, RNA, NA or Protein; used to determine whether encoding items are AminoAcid or Nucleotide
            </summary>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of matrix at [row, col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column
            </param>
            <returns>Score value of matrix at [row, col]</returns>
        </member>
        <member name="P:Bio.Matrix.SimilarityMatrix.Item(Bio.ISequenceItem,Bio.ISequenceItem)">
            <summary>
            Returns value of matrix at row, column corresponding to input ISequenceItems.
            </summary>
            <param name="rowItem">ISequenceItem on the row</param>
            <param name="colItem">ISequenceItem on the column</param>
            <returns>Score at matrix[row, col]</returns>
        </member>
        <member name="T:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices">
            <summary>
            List of available standard similarity matrices.
            </summary>
            <remarks>
            BLOSUM matrices reference:
            S Henikoff and J G Henikoff,
            "Amino acid substitution matrices from protein blocks."
            Proc Natl Acad Sci U S A. 1992 November 15; 89(22): 10915–10919.  PMCID: PMC50453
            <para>
            Available at:
            <![CDATA[http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=EBI&pubmedid=1438297]]>
            </para>
            <para>
            PAM matrices reference:
            Dayhoff, M.O., Schwartz, R. and Orcutt, B.C. (1978), 
            "A model of Evolutionary Change in Proteins", 
            Atlas of protein sequence and structure (volume 5, supplement 3 ed.), 
            Nat. Biomed. Res. Found., p. 345-358, ISBN 0912466073
            </para>
            </remarks>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Blosum45">
            <summary>
            BLOSUM45 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Blosum50">
            <summary>
            BLOSUM50 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Blosum62">
            <summary>
            BLOSUM62 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Blosum80">
            <summary>
            BLOSUM80 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Blosum90">
            <summary>
            BLOSUM90 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Pam250">
            <summary>
            PAM250 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Pam30">
            <summary>
            PAM30 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.Pam70">
            <summary>
            PAM70 Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.AmbiguousDna">
            <summary>
            Simple DNA Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.AmbiguousRna">
            <summary>
            RNA with ambiguous
            </summary>
        </member>
        <member name="F:Bio.Matrix.SimilarityMatrix.StandardSimilarityMatrices.DiagonalScoreMatrix">
            <summary>
            Diagonal matrix
            </summary>
        </member>
        <member name="F:Bio.Matrix.DiagonalSimilarityMatrix._diagonalValue">
            <summary>
            Score value at diagonals. To be used when (col == row)
            </summary>
        </member>
        <member name="F:Bio.Matrix.DiagonalSimilarityMatrix._offDiagonalValue">
            <summary>
            Score value off diagonals. To be used when (col != row)
            </summary>
        </member>
        <member name="M:Bio.Matrix.DiagonalSimilarityMatrix.#ctor(System.Int32,System.Int32,Bio.MoleculeType)">
            <summary>
            Initializes a new instance of the DiagonalSimilarityMatrix class.
            Creates a SimilarityMatrix with one value for match and one for mis-match.
            </summary>
            <param name="matchValue">diagonal score for (col == row)</param>
            <param name="mismatchValue">off-diagonal score for (col != row)</param>
            <param name="moleculeType">DNA, RNA or Protein</param>
        </member>
        <member name="P:Bio.Matrix.DiagonalSimilarityMatrix.DiagonalValue">
            <summary>
            Gets or sets the diagonal value (match value) for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:Bio.Matrix.DiagonalSimilarityMatrix.OffDiagonalValue">
            <summary>
            Gets or sets the off diagonal value (mis-match value for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:Bio.Matrix.DiagonalSimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of diagonal similarity matrix at [row,col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column
            </param>
            <returns>Score value of matrix at [row,col]</returns>
        </member>
        <member name="P:Bio.Matrix.DiagonalSimilarityMatrix.Item(Bio.ISequenceItem,Bio.ISequenceItem)">
            <summary>
            Returns value of matrix at row, column corresponding to input ISequenceItems.
            </summary>
            <param name="rowItem">ISequenceItem on the row</param>
            <param name="colItem">ISequenceItem on the column</param>
            <returns>Score at matrix[row, col]</returns>
        </member>
        <member name="T:Bio.Web.Blast.Hit">
            <summary>
            A database sequence with high similarity to the query sequence.
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.Hit.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hit.ID">
            <summary>
            The string identifying the hit sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hit.Def">
            <summary>
            The "defline" or definition line for the hit
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hit.Accession">
            <summary>
            The accession number of the hit, as string
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hit.Length">
            <summary>
            The length of the hit sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.Hit.Hsps">
            <summary>
            The list of HSPs returned for this Hit.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastXmlMetadata">
            <summary>
            Container for the Output segment of the XML BLAST format. This
            contains metadata for the search.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.Program">
            <summary>
            The name of the program invoked (blastp, etc.)
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.Version">
            <summary>
            The BLAST version
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.Reference">
            <summary>
            Literature reference for BLAST (always the same)
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.Database">
            <summary>
            The database(s) searched
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.QueryID">
            <summary>
            The query identifier defined by the service
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.QueryDefinition">
            <summary>
            The query definition line (if any)
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.QueryLength">
            <summary>
            The length of the query sequence
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.QuerySequence">
            <summary>
            The query sequence (optional, may not be returned)
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterMatrix">
            <summary>
            The name of the similarity matrix used
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterExpect">
            <summary>
            The Expect value used for the search
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterInclude">
            <summary>
            The inclusion threshold for a PSI-Blast iteration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterMatchScore">
            <summary>
            The match score for nucleotide-nucleotide comparisons
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterMismatchScore">
            <summary>
            The match score for nucleotide-nucleotide comparisons
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterGapOpen">
            <summary>
            The gap open penalty
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterGapExtend">
            <summary>
            The gap extend penalty
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterFilter">
            <summary>
            The filtering options used for the search
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterPattern">
            <summary>
            The pattern used for PHI-Blast
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastXmlMetadata.ParameterEntrezQuery">
            <summary>
            The ENTREZ query used to limit the search
            </summary>
        </member>
        <member name="T:Bio.Registration.RegistrableAttribute">
            <summary>
            Self registerable mechanism's attribute
            </summary>
        </member>
        <member name="M:Bio.Registration.RegistrableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="IsRegistrable">Registrable or not</param>
        </member>
        <member name="P:Bio.Registration.RegistrableAttribute.IsRegistrable">
            <summary>
            If its registrable or not
            </summary>
        </member>
        <member name="T:Bio.IO.Gff.GffParser">
            <summary>
            A GffParser reads from a source of text that is formatted according to the GFF flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GFF file format can be found at
            http://www.sanger.ac.uk/Software/formats/GFF/GFF_Spec.shtml
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.Parse(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a list of GFF sequences using a BioTextReader.
            </summary>
            <remarks>
            This method is overridden to process file-scope metadata that applies to all
            of the sequences in the file.
            </remarks>
            <param name="bioReader">A reader for a GFF text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.ParseOneWithSpecificFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single GFF text from a reader into a sequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.CopyMetadata(System.Boolean)">
            <summary>
            Copy file-scope metadata to all the sequences in the list.
            </summary>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.Name">
            <summary>
            Gets the type of Parser i.e GFF.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.Description">
            <summary>
            Gets the description of GFF parser.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GffParser class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GFF file.
            </summary>
        </member>
        <member name="T:Bio.IO.Gff.GffFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GFF file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.Format(System.Collections.Generic.ICollection{Bio.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <remarks>
            This method is overridden to format file-scope metadata that applies to all
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="sequences">The sequences to write</param>
            <param name="writer">the TextWriter</param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.ShouldWriteSequenceData">
            <summary>
            Whether or not sequence data will be written as part of the GFF header information;
            defaults to false, since GFF files normally do not contain this data.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.Name">
            <summary>
            Gets the type of Formatter i.e GFF.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GFF file.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.Description">
            <summary>
            Gets the description of GFF formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GffFormatter class acheives.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TransferRNA">
            <summary>
            Mature transfer RNA (tRNA), a small RNA molecule (75-85 bases long) that mediates the translation of 
            a nucleic acid sequence into an amino acid sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRNA.#ctor(System.String)">
            <summary>
            Creates new TransferRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRNA.#ctor(Bio.IO.GenBank.TransferRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRNA.Clone">
            <summary>
            Creates a new TransferRNA that is a copy of the current TransferRNA.
            </summary>
            <returns>A new TransferRNA that is a copy of this TransferRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.AntiCodon">
            <summary>
            Location of the anticodon of tRNA and the amino acid for which it codes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceStrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.None">
            <summary>
            None - StrandTopology is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.Circular">
            <summary>
            Circular.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ReplicationOrigin">
            <summary>
            Origin of replication (rep_origin); starting site for duplication of nucleic acid to give two identical copies.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ReplicationOrigin feature item from the specified location.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(System.String)">
            <summary>
            Creates new ReplicationOrigin feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(Bio.IO.GenBank.ReplicationOrigin)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ReplicationOrigin instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.Clone">
            <summary>
            Creates a new ReplicationOrigin that is a copy of the current ReplicationOrigin.
            </summary>
            <returns>A new ReplicationOrigin that is a copy of this ReplicationOrigin.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Direction">
            <summary>
            Direction of DNA replication.
            Values: left, right, or both where left indicates toward the 5' end of the entry sequence 
                    (as presented) and right indicates toward the 3' end.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PrecursorRNA">
            <summary>
            Any RNA species that is not yet the mature RNA product; may include 5' untranslated region (5'UTR), 
            coding sequences (CDS, exon), intervening sequences (intron) and 3' untranslated region (3'UTR).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PrecursorRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRNA.#ctor(System.String)">
            <summary>
            Creates new PrecursorRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRNA.#ctor(Bio.IO.GenBank.PrecursorRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PrecursorRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRNA.Clone">
            <summary>
            Creates a new PrecursorRNA that is a copy of the current PrecursorRNA.
            </summary>
            <returns>A new PrecursorRNA that is a copy of this PrecursorRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.NonCodingRNA">
            <summary>
            A non-protein-coding gene (ncRNA), other than ribosomal RNA and transfer RNA, the functional 
            molecule of which is the RNA transcript.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new NonCodingRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRNA.#ctor(System.String)">
            <summary>
            Creates new NonCodingRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRNA.#ctor(Bio.IO.GenBank.NonCodingRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other NonCodingRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRNA.Clone">
            <summary>
            Creates a new NonCodingRNA that is a copy of the current NonCodingRNA.
            </summary>
            <returns>A new NonCodingRNA that is a copy of this NonCodingRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.NonCodingRNA.NonCodingRNAClass">
            <summary>
            ncRNA_class; A structured description of the classification of the non-coding RNA described by the ncRNA parent key.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Synteny">
            <summary>
            An ordered list of clusters between two sequences A and B
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Synteny.#ctor(Bio.ISequence,Bio.ISequence)">
            <summary>
            Initializes a new instance of the Synteny class
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.ReferenceSequence">
            <summary>
            Gets or sets reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.QuerySequence">
            <summary>
            Gets or sets query sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.Clusters">
            <summary>
            Gets or sets clusters
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MUMmer3">
            <summary>
            Implementats of MUMmer interface. Defines methods necessary to 
            complete the MUMmer 3.0 method for sequence alignment. Implements following
            1. Instantiate appropriate interface and invoke method to build Suffix Tree
                using Kurtz Algorithm
            2. Instantiate appropriate interface and invoke method to stream the query
                sequence through suffix tree and find the MUMs
            3. Sort the MUMs found in the order of start index in reference sequence
            4. Instantiate appropriate interface and invoke method to find Longest
                Increasing Sequence (LIS)
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MUMmer3.referenceSequenceNumber">
            <summary>
            Reference sequence number
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer3.BuildSuffixTree(Bio.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence.
            This method using Kurtz algorithm to build the Suffix Tree
            </summary>
            <param name="referenceSequence">Reference sequence number</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer3.Streaming(Bio.Algorithms.SuffixTree,Bio.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="sequence">Query Sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer3.SortMum(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Sort the MUM list.
            Sorts the MUM list by order of start index in reference sequence
            </summary>
            <param name="mumList">MUM list that has to be sorted</param>
            <returns>Sorted MUM list</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MUMmer3.CollectLongestIncreasingSubsequence(System.Collections.Generic.IList{Bio.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the MUMs in the order of Longest Increasing Subsequence using position in query sequence
            </summary>
            <param name="sortedMumList">Sorted list of MUMs</param>
            <returns>MUMs in longest increasing subsequence order</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer3.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            MUMmer v3.0 algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer3.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            MUMmer3 class implements.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MUMmer3.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence.
            The class uses to id to find the reference sequence in the list of
            sequences. And also the same is used to differentiate reference 
            sequence from query sequence during streaming.
            </summary>
        </member>
        <member name="T:Bio.VirtualSequence">
            <summary>
            VirtualSequence class is ISequence implementation which contains metadata of a sequence 
            and it will not contain the sequence. Use this class for working with sequences 
            that never have sequence data, but are only used for metadata storage (like keeping an ID 
            or various features but no direct sequence data).
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="F:Bio.VirtualSequence._seqInfo">
            <summary>
            Holds the metadata of the sequence.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a VirtualSequence instance.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
        </member>
        <member name="M:Bio.VirtualSequence.Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new VirtualSequence that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.ToString">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.Range(System.Int32,System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.Insert(System.Int32,System.Char)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.VirtualSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.VirtualSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:Bio.VirtualSequence.Replace(System.Int32,System.Char)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:Bio.VirtualSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:Bio.VirtualSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:Bio.VirtualSequence.IndexOfNonGap">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.LastIndexOfNonGap">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new ISequence that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns -1.
            </summary>
            <returns>Always retuns -1.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:Bio.VirtualSequence.RemoveAt(System.Int32)">
            <summary>
             Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:Bio.VirtualSequence.Add(Bio.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="item">The item to add to the end of the sequence.</param>
        </member>
        <member name="M:Bio.VirtualSequence.Clear">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns false.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:Bio.VirtualSequence.Remove(Bio.ISequenceItem)">
            <summary>
             Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.GetEnumerator">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.System#ICloneable#Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new object that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:Bio.VirtualSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.VirtualSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the VirtualSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.VirtualSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Alphabet">
            <summary>
            The alphabet type (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein).
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Statistics">
            <summary>
            Always returns null, since there is no sequence data.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.IsReadOnly">
            <summary>
            Virtual sequence will not contain sequence and thus this flag always returns true.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Reverse">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Complement">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.ReverseComplement">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Item(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:Bio.VirtualSequence.Count">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns 0.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.ServiceRequestStatus">
            <summary>
            A simple summary of the status of a remote service request.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ServiceRequestStatus.Queued">
            <summary>
            The request is queued at the server.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ServiceRequestStatus.Waiting">
            <summary>
            The request is being processed by the server.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ServiceRequestStatus.Ready">
            <summary>
            The request has been processed and results are available.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ServiceRequestStatus.Error">
            <summary>
            An error has occurred while processing the request.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.ServiceRequestInformation">
            <summary>
            A return value for service requests, giving the status 
            as well as additional information from the server.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ServiceRequestInformation.Status">
            <summary>
            The status summary.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ServiceRequestInformation.StatusInformation">
            <summary>
            Additional information from the server.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastRequestCompleted">
            <summary>
            This event is raised when the BackGroundWorker thread has completed the 
            blast search job.
            </summary>
            <param name="sender">Object which raised the event.</param>
            <param name="e">Event Arguments</param>
        </member>
        <member name="T:Bio.Web.Blast.ThreadParameter">
            <summary>
            This class has the list of properties that needs to be passed on to
            the BackGroundWorker thread to execute the search request.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ThreadParameter._requestIdentifier">
            <summary>
            Unique Search ID generated by MBF
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ThreadParameter._sequence">
            <summary>
            Sequence object
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.ThreadParameter._parameter">
            <summary>
            Blast parameters object
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.ThreadParameter.#ctor(System.String,Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Initializes a new instance of the ThreadParameter class. 
            </summary>
            <param name="requestIdentifier">Job identifier</param>
            <param name="sequence">Sequence Object</param>
            <param name="parameter">Blast Parameters</param>
        </member>
        <member name="P:Bio.Web.Blast.ThreadParameter.RequestIdentifier">
            <summary>
            Unique Search ID generated by MBF
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ThreadParameter.Sequence">
            <summary>
            Gets the sequence object
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.ThreadParameter.Parameters">
            <summary>
            Gets the Blast parameters
            </summary>
        </member>
        <member name="T:Microsoft.CCF.BlastDemo.BlastSerivceRequest">
            <summary>
            Empty summary tags added to all public methods and properties to 
            avoid compile time warnings (or) errors
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.ExtensionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.DatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.InputBlob">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.InputContaienr">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.InputContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.OptionM">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.ParitionNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.ProgramName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastSerivceRequest.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.CCF.BlastDemo.JobStatusResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.ExtensionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.DateCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.DateCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.DateStarted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.Progress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.JobStatusResponse.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.CCF.BlastDemo.BlastFault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastFault.ExtensionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastFault.Detail">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.CCF.BlastDemo.BlastFault.ProblemType">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBlastService">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBlastService.SubmitJob(Microsoft.CCF.BlastDemo.BlastSerivceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:IBlastService.QueryJobStatus(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:IBlastService.GetJobResult(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:IBlastService.KillJob(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:IBlastServiceChannel">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlastServiceClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlastServiceClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlastServiceClient.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="endpointConfigurationName"></param>
        </member>
        <member name="M:BlastServiceClient.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="remoteAddress"></param>
        </member>
        <member name="M:BlastServiceClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="remoteAddress"></param>
        </member>
        <member name="M:BlastServiceClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            
            </summary>
            <param name="binding"></param>
            <param name="remoteAddress"></param>
        </member>
        <member name="M:BlastServiceClient.SubmitJob(Microsoft.CCF.BlastDemo.BlastSerivceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:BlastServiceClient.QueryJobStatus(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:BlastServiceClient.GetJobResult(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:BlastServiceClient.KillJob(System.Guid)">
            <summary>
            
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.UpdateType">
            <summary>
            UpdateType specifies the type of update.
            </summary>
        </member>
        <member name="F:Bio.UpdateType.None">
            <summary>
            Not a valid update type.
            </summary>
        </member>
        <member name="F:Bio.UpdateType.Inserted">
            <summary>
            Sequence item inserted.
            </summary>
        </member>
        <member name="F:Bio.UpdateType.Removed">
            <summary>
            Sequence item removed.
            </summary>
        </member>
        <member name="F:Bio.UpdateType.Replaced">
            <summary>
            Sequence item replaced.
            </summary>
        </member>
        <member name="T:Bio.SparseSequence">
             <summary>
             SparseSequence can hold discontinuous sequence. Use this class for storing the sequence items 
             with their known position from a long continuous sequence.  This class uses SortedDictionary to store 
             the sequence items with their position. Position is zero based indexes at which a sequence items 
             are present in the original continues sequence.
             For example: 
             To store sequence items at position 10, 101, 200, 1501 this class can be used as shown in the below code.
             
             // Create a SparseSequence by specifying the Alphabet.
             SparseSequence mySparseSequence= new SparseSequence(Alphabets.DNA);
             
             // By default count will be set to zero. To insert a sequence item at a postion greater than zero,
             // Count has to be set to a value greater than the maximum position value. 
             // If try to insert a sequence item at a position greater than the count an exception will occur.
             // You can limit the SparseSequence length by setting the count to desired value. In this example it 
             will be 1502 as the maximum index is 1501.
             mySparseSequence.Count = 1502;
             
             // After setting the count to desired value you can use insert method or indexer to set the value.
             
             // Useing insert method to set the value.
             mySparseSequence.Insert(10, DnaAlphabet.A);
             mySparseSequence.Insert(200, DnaAlphabet.C);
            
             // Using Indexer to set the value.
             mySpareseSequence[101] = DnaAlphabet.A;
             mySpareseSequence[1501] = DnaAlphabet.G;
             
             // To access the value in a SparseSequence use Indexer or an Enumerator like below.
            
             // Accessing SparsesSequence using Indexer.
             ISequenceItem seqItem1 = mySparseSequence [10] ;  // this will return sequence item A.
             ISequenceItem seqItem2 = mySparseSequence [1501] ;  // this will return sequence item G.
             ISequenceItem seqItem3 = mySparseSequence [102] ;  // this will return null as there is no sequence item at this position.
             
             // Accessing SparsesSequence using Enumerator.
             foreach(ISequenceItem seqItem in mySparseSequence) {…}
             
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="F:Bio.SparseSequence._sparseSeqItems">
            <summary>
            Holds sequence items with their position.
            </summary>
        </member>
        <member name="F:Bio.SparseSequence._seqInfo">
            <summary>
            Holds the metadata of the sequence.
            </summary>
        </member>
        <member name="F:Bio.SparseSequence._statistics">
            <summary>
            Holds statistical data of the sequence.
            </summary>
        </member>
        <member name="F:Bio.SparseSequence._count">
            <summary>
            Holds size of this sequence.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a SparseSequence with no sequence data and sets the IsReadOnly flag to false.
            
            Count property of SparseSequence instance created by using this constructor will be set to zero,
            thus before inserting a sequence item which is at a position greater than the count property of 
            the instance, set the count to desired value. However you can use Add() method to add a 
            sequence item even though the count is zero, in this case specified sequence item position will 
            be default to the value of the count property and then count prperty will be incremented by one.
            For example: 
            If the count property of a sparse sequence is zero, using Add() method will add 
            the specified sequence item to the position zero and count will become one. 
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32)">
            <summary>
            Creates a SparseSequence with no sequence data and sets the IsReadOnly flag to false.
            
            Count property of SparseSequence instance created by using this constructor will be 
            set a value specified by size parameter.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
            <param name="size">A value indicating the size of this sequence.</param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32,Bio.ISequenceItem)">
            <summary>
            Creates a sparse sequence based on the specified parameters and sets the IsReadOnly flag to true.
            To edit the sequence set IsReadOnly flag to false.
            
            The sequenceItem parameter must contain an alphabet as specified in the alphabet parameter,
            else an exception will occur.
            
            The index parameter value must be a non negative value.
            Count property of an instance created by this constructor will be set to value of index + 1.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">Position of the specified sequence item.</param>
            <param name="item">A sequence item which is known by the alphabet.</param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32,System.Collections.Generic.IList{Bio.ISequenceItem})">
            <summary>
            Creates a sparse sequence based on the specified parameters and sets the IsReadOnly flag to true.
            To edit the sequence set IsReadOnly flag to false.
            
            The sequenceItems parameter must contain sequence items known by the specified alphabet,
            else an exception will occur.
            
            The index parameter value must be a non negative. 
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">A non negative value which indicates the start position of the specified sequence items.</param>
            <param name="sequenceItems">
            A sequence which contain sequence items known by the alphabet.</param>
        </member>
        <member name="M:Bio.SparseSequence.GetKnownSequenceItems">
            <summary>
            Returns known sequence items with their position as ReadOnlyCollection of IndexedSequenceItem.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNotNull">
            <summary>
            Returns the position of the first item that does not have a null ISequenceItem
            </summary>
            <returns>Lowest position which has a sequence item that is not null. 
            -1 if no non-null items in sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNotNull(System.Int32)">
            <summary>
            Returns the position of the first item beyond startPos that does not 
            have a null ISequenceItem.
            </summary>
            <param name="startPos">index value above which to search for non-null value</param>
            /// <returns>Lowest position greater than startPos which has a sequence item 
            that is not null. -1 if no non-null items in sequence at position 
            greater than startPos.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNotNull">
            <summary>
            Returns the position of the last item that does not have a null ISequenceItem
            </summary>
            <returns>Highest position which has a sequence item that is not null. 
            -1 if no non-null items in sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNotNull(System.Int32)">
            <summary>
            Returns the position of the last item before endPos that does 
            not have a null ISequenceItem
            </summary>
            <param name="endPos">index value below which to search for non-null value</param>
            <returns>Highest position less than endPos which has a sequence item 
            that is not null. -1 if no non-null items in sequence at position less 
            than endPos.</returns>
        </member>
        <member name="M:Bio.SparseSequence.Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new SparseSequence that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.UpdatePositions(System.Int32,System.Int32)">
            <summary>
            Updates position of items which is greater than the specified index
            with the specified value.
            </summary>
            <param name="position">Position from which update has to be done.</param>
            <param name="value">Value with which positions have to be updated.</param>
        </member>
        <member name="M:Bio.SparseSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Converts each character in the specified sequence string to sequence items
            and inserts them to the specified position. 
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.SparseSequence.Insert(System.Int32,System.Char)">
            <summary>
            Converts the specified character to a sequence item and insert at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:Bio.SparseSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified postion.
            </summary>
            <param name="position">Position from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:Bio.SparseSequence.Replace(System.Int32,Bio.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:Bio.SparseSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:Bio.SparseSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified postion in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:Bio.SparseSequence.ToString">
            <summary>
            SparseSequence does not contains continuous sequence data thus 
            SparseSequence does not support this method.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence which is sub sequence of this sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.Bio#ISequence#Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new ISequence that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.IndexOf(Bio.ISequenceItem)">
            <summary>
            Returns the position of first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item of which the postion is required.</param>
            <returns>If found returns the positon of first occurance of the specified sequence item else returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.Insert(System.Int32,Bio.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="index">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:Bio.SparseSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence item present in the specified position.
            </summary>
            <param name="index">Position at which the sequence item has to be removed.</param>
        </member>
        <member name="M:Bio.SparseSequence.Add(Bio.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:Bio.SparseSequence.Clear">
            <summary>
            Clears the underlying sequence data in this sequence.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.Contains(Bio.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.SparseSequence.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Bio.SparseSequence.Remove(Bio.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.SparseSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:Bio.SparseSequence.System#ICloneable#Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new object that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.SparseSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.SparseSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Variation">
            <summary>
            A related strain contains stable mutations from the same gene (e.g., RFLPs, polymorphisms, etc.) 
            which differ from the presented sequence at this location (and possibly others).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Variation feature item from the specified location.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(System.String)">
            <summary>
            Creates new Variation feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(Bio.IO.GenBank.Variation)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Variation instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.Clone">
            <summary>
            Creates a new Variation that is a copy of the current Variation.
            </summary>
            <returns>A new Variation that is a copy of this Variation.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Terminator">
            <summary>
            Sequence of DNA located either at the end of the transcript that causes RNA polymerase to terminate transcription.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Terminator feature item from the specified location.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(System.String)">
            <summary>
            Creates new Terminator feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(Bio.IO.GenBank.Terminator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Terminator instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.Clone">
            <summary>
            Creates a new Terminator that is a copy of the current Terminator.
            </summary>
            <returns>A new Terminator that is a copy of this Terminator.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TataSignal">
            <summary>
             TATA box; Goldberg-Hogness box; a conserved AT-rich septamer found about 25 bp before the start point 
             of each eukaryotic RNA polymerase II transcript unit which may be involved in positioning the enzyme 
             for correct initiation; consensus=TATA(A or T)A(A or T).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TATASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(System.String)">
            <summary>
            Creates new TATASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(Bio.IO.GenBank.TataSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TATASignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.Clone">
            <summary>
            Creates a new TATASignal that is a copy of the current TATASignal.
            </summary>
            <returns>A new TATASignal that is a copy of this TATASignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MessengerRNA">
            <summary>
             Messenger RNA (mRNA); includes 5 prime untranslated region (5'UTR), coding sequences (CDS, exon)
             and 3 prime untranslated region (3'UTR).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRNA.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRNA.#ctor(System.String)">
            <summary>
            Creates new MessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRNA.#ctor(Bio.IO.GenBank.MessengerRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MessengerRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRNA.Clone">
            <summary>
            Creates a new MessengerRNA that is a copy of the current MessengerRNA.
            </summary>
            <returns>A new MessengerRNA that is a copy of this MessengerRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankParser">
            <summary>
            A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GenBank file format can be found at
            ftp.ncbi.nih.gov/genbank/gbrel.txt
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseOneWithSpecificFormat(Bio.IO.BioTextReader,System.Boolean)">
            <summary>
            Parses a single GenBank text from a reader into a sequence.
            </summary>
            <param name="bioReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.LocationBuilder">
            <summary>
            Location builder is used to build location objects from the location string 
            present in the features.
            By default an instance of LocationBuilder class is used to build location objects.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.Name">
            <summary>
            Gets the type of Parser i.e GenBank.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.Description">
            <summary>
            Gets the description of GenBank parser.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankParser class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GenBank file.
            </summary>
        </member>
        <member name="T:Bio.DnaAlphabet">
            <summary>
            The basic alphabet that describes symbols used in DNA sequences.
            This alphabet allows not only for the four base nucleotide symbols,
            but also for various ambiguities, termination, and gap symbols.
            <para>
            The character representations come from the NCBI4na standard and
            are used in many sequence file formats. The NCBI4na standard is the
            same as the IUPACna standard with only the addition of the gap
            character.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Name
            A - Adenine
            C - Cytosine
            M - A or C
            G - Guanine
            R - G or A
            S - G or C
            V - G or V or A
            T - Thymine
            W - A or T
            Y - T or C
            H - A or C or T
            K - G or T
            D - G or A or T
            B - G or T or C
            - - Gap
            N - A or G or T or C
            </para>
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.A">
            <summary>
            Nucleotide Adenine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.C">
            <summary>
            Nucleotide Cytosine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.G">
            <summary>
            Nucleotide Guanine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.T">
            <summary>
            Nucleotide Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.AC">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GA">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GC">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.AT">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.TC">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GT">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GCA">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.ACT">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GAT">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.GTC">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.Any">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.instance">
            <summary>
            Static instance of this class.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.values">
            <summary>
            Stores the list of Nucleotides for DNA
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in DNA
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.#cctor">
            <summary>
            Initializes static members of the DnaAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.#ctor">
            <summary>
            Prevents a default instance of the DnaAlphabet class from being created.
            Populates nucleotide values, and ambiguous maps.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol as a string</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{Bio.ISequenceItem})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus nucleotide</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetBasicSymbols(Bio.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (G, A, T, and C)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (GA, GAT, GC, etc.)</param>
            <param name="includeTerminations">Has no effect in this alphabet</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:Bio.DnaAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same nucleotide.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:Bio.DnaAlphabet.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Instance">
            <summary>
            Gets an instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'DNA'
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide that denotes default gap character in DNA
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 16.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.IO.Encoding.SequenceDecoder">
             <summary>
             This basic implementation of the ISequenceDecoder provides a one to one
             translation from byte values to ISequenceItem. It uses an IEncoding to determine
             what the mapping is for this translation. This encoding should be set
             in the constructor.
             
             Note that the decoded item will come from the IEncoding and not from an IAlphabet.
             You may need to use an EncodingMap to get from the ISequenceItems returned here
             and those of an alphabet, such as DNA or RNA.
             
             For example, using the following code:
             
             SequenceDecoder decoder = new SequenceDecoder(Encodings.Ncbi4NA);
             ISequenceItem encItem = decoder.Decode(4);
             
             In this case the resulting item will be:
             
             Encodings.Ncbi4NA.G
             
             You may want instead to have the result Alphabets.DNA.G. To do this add:
             
             EncodingMap map = EncodingMap.GetMapToAlphabet(Encodings.Ncbi4NA, Alphabets.DNA);
             ISequenceItem alphaItem = map.Convert(encItem)
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceDecoder.#ctor(Bio.IO.Encoding.IEncoding)">
            <summary>
            Creates a sequence decoder by defining the encoding to use.
            </summary>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceDecoder.Decode(System.Byte)">
            <summary>
            Converts a byte value representation of a sequence item into an
            ISequenceItem representation from the IEncoding specified for this
            instance of the decoder.
            
            See the comments for the class to see how to convert the resulting
            item into a particular alphabet.
            </summary>
            <param name="value">The internal byte representation of an ISequenceItem</param>
            <returns>The ISequenceItem found by looking up they byte value in the decoder's IEncoding</returns>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceDecoder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.IO.Encoding.SequenceDecoder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceDecoder.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Bio.IO.Encoding.SequenceDecoder.Encoding">
            <summary>
            The Encoding provides the map from symbol characters to byte values.
            Without a set encoding the decoder can not work.
            </summary>
        </member>
        <member name="T:Bio.ProteinAlphabet">
            <summary>
            The basic alphabet that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This alphabet allows for
            the twenty amino acids as well as a termination and gap symbol.
            <para>
            The character representations come from the NCBIstdaa standard and
            are used in many sequence file formats. The NCBIstdaa standard has all
            the same characters as NCBIeaa and IUPACaa, but adds Selenocysteine,
            termination, and gap symbols to the latter.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Extended Symbol - Name
            A - Ala - Alanine
            B - Asx - Aspartic Acid or Asparagine
            C - Cys - Cysteine
            D - Asp - Aspartic Acid
            E - Glu - Glutamic Acid
            F - Phe - Phenylalanine
            G - Gly - Glycine
            H - His - Histidine
            I - Ile - Isoleucine
            J - Xle - Leucine or Isoleucine
            K - Lys - Lysine
            L - Leu - Leucine
            M - Met - Methionine
            N - Asn - Asparagine
            O - Pyl - Pyrrolysine
            P - Pro - Proline
            Q - Gln - Glutamine
            R - Arg - Arginine
            S - Ser - Serine
            T - Thr - Threoine
            U - Sel - Selenocysteine
            V - Val - Valine
            W - Trp - Tryptophan
            X - Xxx - Undetermined or atypical
            Y - Tyr - Tyrosine
            Z - Glx - Glutamic Acid or Glutamine
            * - Ter - Termination
            - - --- - Gap
            </para>
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Ala">
            <summary>
            Alanine Amino acid 
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Cys">
            <summary>
            Cysteine Amino acid 
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Phe">
            <summary>
            Phenylalanine Amino acid 
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Gly">
            <summary>
            Glycine Amino acid 
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.His">
            <summary>
            Histidine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Ile">
            <summary>
            Isoleucine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Lys">
            <summary>
            Lysine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Leu">
            <summary>
            Leucine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Met">
            <summary>
            Methionine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Asn">
            <summary>
            Asparagine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Pyl">
            <summary>
            Pyrrolysine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Pro">
            <summary>
            Proline Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Gln">
            <summary>
            Glutamine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Arg">
            <summary>
            Arginine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Ser">
            <summary>
            Serine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Thr">
            <summary>
            Threoine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Sel">
            <summary>
            Selenocysteine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Val">
            <summary>
            Valine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Trp">
            <summary>
            Tryptophan Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Tyr">
            <summary>
            Tyrosine Amino acid
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.instance">
            <summary>
            Instance of this class.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.values">
            <summary>
            Stores the list of amino acids for protein
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in Proteins
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.#cctor">
            <summary>
            Initializes static members of the ProteinAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.#ctor">
            <summary>
            Prevents a default instance of the ProteinAlphabet class from being created.
            Populates amino acid values.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for amino acid corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for amino acid corresponding to input symbol</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{Bio.ISequenceItem})">
            <summary>
            Find the consensus symbol for a set of amino acids
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus amino acid</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetBasicSymbols(Bio.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (Ala, Cys, Asp, Gle, etc.)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (Asx, Xle, Xxx, and Glx)</param>
            <param name="includeTerminations">Include the termination item (*)</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.Add(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:Bio.ProteinAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.Contains(Bio.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.CopyTo(Bio.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:Bio.ProteinAlphabet.Remove(Bio.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Instance">
            <summary>
            Gets an instance of the Protein alphabet for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'Protein'
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does have termination characters.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.DefaultGap">
            <summary>
            Gets the amino acid that denotes default gap character in Protein
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 28.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:Bio.MoleculeType">
            <summary>
            A MoleculeType specifies which type of biological sequence is stored in an ISequence.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.Invalid">
            <summary>
            Not a valid molecule type.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.NA">
            <summary>
            Nucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.DNA">
            <summary>
            Deoxyrobonucleic acid.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.RNA">
            <summary>
            Ribonucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.tRNA">
            <summary>
            Transfer RNA.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.rRNA">
            <summary>
            Ribosomal RNA.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.mRNA">
            <summary>
            Messenger RNA.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.uRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.snRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.snoRNA">
            <summary>
            Small nucleolar RNA (often referred to as guide RNA).
            </summary>
        </member>
        <member name="F:Bio.MoleculeType.Protein">
            <summary>
            Amino acid chain.
            </summary>
        </member>
        <member name="T:Bio.IO.Newick.NewickParser">
            <summary>
            A NewickParser reads from a source of text that is formatted according to 
            the Newick notation flat file specification, and converts the data to 
            in-memory PhylogeneticTree object.  
            Documentation for the latest Newic file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="T:Bio.IO.IPhylogeneticTreeParser">
            <summary>
            Implementations of this interface are designed to parse a phylogenetic tree file 
            format to produce a PhylogeneticTree object model. 
            </summary>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a phylogenetic tree text from a reader.
            </summary>
            <param name="reader">A reader for a phylogenetic tree text.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeParser.Parse(System.Text.StringBuilder)">
            <summary>
            Parses a phylogenetic tree text from a string.
            </summary>
            <param name="stringBuilder">phylogenetic tree text.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeParser.Parse(System.String)">
            <summary>
            Parses phylogenetic tree texts from a file.
            </summary>
            <param name="fileName">The name of a phylogenetic tree file.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeParser.Name">
            <summary>
            Gets the name of the phylogenetic tree parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeParser.Description">
            <summary>
            Gets the description of the phylogenetic tree parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse(System.Text.StringBuilder)">
            <summary>
            Parses a Phylogenetic tree text from a string into a PhylogeneticTree.
            </summary>
            <param name="stringBuilder">Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a Phylogenetic tree text from a reader into a PhylogeneticTree.
            </summary>
            <param name="reader">A reader for a Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse(System.String)">
            <summary>
            Parses a Phylogenetic tree text from a file.
            </summary>
            <param name="fileName">The name of a Phylogenetic tree file.</param>
            <returns>PhylogeneticTree object.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse">
            <summary>
            Parses a Phylogenetic tree text from the local text reader
            </summary>
            <returns>Parsed PhylogeneticTree object.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetNode(System.Boolean)">
            <summary>
            Get collection of (Branche and Leaf) nodes
            </summary>
            <param name="isRoot"></param>
            <returns>PhylogeneticNode object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetBranch(System.Boolean)">
            <summary>
            Gets the Branch node
            </summary>
            <param name="isRoot"></param>
            <returns>Branch object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetLeaf">
            <summary>
            Get the Leaf node
            </summary>
            <returns>Leaf object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Peek">
            <summary>
            Peeks the TextReader char by char 
            </summary>
            <returns>a character</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.ReadLength">
            <summary>
            Reads Length
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.ReadChar">
            <summary>
            Reads current character
            </summary>
            <returns>a character</returns>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.Name">
            <summary>
            Gets the type of Parser i.e NEWICK.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.Description">
            <summary>
            Gets the description of Newick parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            NewickParser class acheives.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a Newick file.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.OrganismInfo">
            <summary>
            Provides Genus, Species and taxonomic classification levels of the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.OrganismInfo.Clone">
            <summary>
            Creates a new OrganismInfo that is a copy of the current OrganismInfo.
            </summary>
            <returns>A new OrganismInfo that is a copy of this OrganismInfo.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.OrganismInfo.System#ICloneable#Clone">
            <summary>
            Creates a new OrganismInfo that is a copy of the current OrganismInfo.
            </summary>
            <returns>A new object that is a copy of this OrganismInfo.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.Genus">
            <summary>
            Genus name of the Organism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.Species">
            <summary>
            Species of the Oraganism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.ClassLevels">
            <summary>
            Taxonomic classification levels of the Organisum.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ProteinBindingSite">
            <summary>
            Non-covalent protein binding site on nucleic acid.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ProteinBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(System.String)">
            <summary>
            Creates new ProteinBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(Bio.IO.GenBank.ProteinBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ProteinBindingSite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.Clone">
            <summary>
            Creates a new ProteinBindingSite that is a copy of the current ProteinBindingSite.
            </summary>
            <returns>A new ProteinBindingSite that is a copy of this ProteinBindingSite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Gene">
            <summary>
            The gene feature describes the interval of DNA that corresponds to a genetic trait or phenotype. 
            It is a region of biological interest identified as a gene and for which a name has been assigned.
            This class is meant to represent a region where the gene is located.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Gene feature item from the specified location.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(System.String)">
            <summary>
            Creates new Gene feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(Bio.IO.GenBank.Gene)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Gene instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.Clone">
            <summary>
            Creates a new Gene that is a copy of the current Gene.
            </summary>
            <returns>A new Gene that is a copy of this Gene.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioural 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CaatSignal">
            <summary>
            CAAT box; part of a conserved sequence located about 75 bp up-stream of the start point
            of eukaryotic transcription units which may be involved in RNA polymerase binding.
            Consensus=GG(C or T)CAATCT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new CAATSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(System.String)">
            <summary>
            Creates new CAATSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(Bio.IO.GenBank.CaatSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CAATSignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.Clone">
            <summary>
            Creates a new CAATSignal that is a copy of the current CAATSignal.
            </summary>
            <returns>A new CAATSignal that is a copy of this CAATSignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.ByteArray">
            <summary>
            ByteArray holds the encoded values and provides array like access to the data stored in it.
            This class internally stores compressed indices of encoded values into a byte array to reduce the 
            memory required to hold sequence data.
            For example:
            Ncbi2NAEncoding contains four encoded values to store an index of an encoded value; two bits are sufficient.
            Thus when creating this class, if Ncbi2NAEncoding is specified, then the index of specified encoded values 
            are stored in a byte array so that each byte will contain a maximum of four encoded values.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
        </member>
        <member name="F:Bio.ByteArray._defaultMask">
            <summary>
            Default mask value.
            Binary: 00000000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFirstFourBitValue">
            <summary>
            Mask for four bit value stored in first position from leftside in a byte.
            Binary: 11110000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForSecondFourBitValue">
            <summary>
            Mask for four bit value stored in second position from leftside in a byte.
            Binary: 00001111
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFirstTwoBitValue">
            <summary>
            Mask for two bit value stored in first position from leftside in a byte.
            Binary: 11000000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForSecondTwoBitValue">
            <summary>
            Mask for two bit value stored in second position from leftside in a byte.
            Binary: 00110000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForThirdTwoBitValue">
            <summary>
            Mask for two bit value stored in third position from leftside in a byte.
            Binary: 00001100
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFourthTwoBitValue">
            <summary>
            Mask for two bit value stored in fourth position from leftside in a byte.
            Binary: 00000011
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFirstOneBitValue">
            <summary>
            Mask for one bit value stored in first position from leftside in a byte.
            Binary: 10000000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForSecondOneBitValue">
            <summary>
            Mask for one bit value stored in second position from leftside in a byte.
            Binary: 01000000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForThirdOneBitValue">
            <summary>
            Mask for one bit value stored in third position from leftside in a byte.
            Binary: 00100000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFourthOneBitValue">
            <summary>
            Mask for one bit value stored in fourth position from leftside in a byte.
            Binary: 00010000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForFifthOneBitValue">
            <summary>
            Mask for one bit value stored in fifth position from leftside in a byte.
            Binary: 00001000
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForSixthOneBitValue">
            <summary>
            Mask for one bit value stored in sixth position from leftside in a byte.
            Binary: 00000100
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForSeventhOneBitValue">
            <summary>
            Mask for one bit value stored in seventh position from leftside in a byte.
            Binary: 00000010
            </summary>
        </member>
        <member name="F:Bio.ByteArray._maskForEighthOneBitValue">
            <summary>
            Mask for one bit value stored in eighth position from leftside in a byte.
            Binary: 00000001
            </summary>
        </member>
        <member name="F:Bio.ByteArray._bitsRequired">
            <summary>
            Holds total number of bits required to store an ISequence item.
            </summary>
        </member>
        <member name="F:Bio.ByteArray._valuesPerByte">
            <summary>
            Specifies number of values can be stored in a byte.
            </summary>
        </member>
        <member name="F:Bio.ByteArray._encodedValues">
            <summary>
            Holds all encoded values in the specified Encoding.
            </summary>
        </member>
        <member name="F:Bio.ByteArray._compressedBytes">
            <summary>
            Array to hold bytes.
            </summary>
        </member>
        <member name="M:Bio.ByteArray.#ctor(Bio.IO.Encoding.IEncoding,System.Collections.Generic.IList{System.Byte})">
            <summary>
            Creates new ByteArray instance from the specified encoding and list of byte values.
            ByteArray compacts and stores the byte values depending on the specified encoding.
            
            For example: Ncbi2NAEncoding contains four values, In this case two bits are sufficient 
            to store index of an encoded value thus four encoded values can be stored in to a byte.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
            <param name="encoding">Encoding to which the specified values are belongs to.</param>
            <param name="values">Encoded values.</param>
        </member>
        <member name="M:Bio.ByteArray.#ctor(Bio.IO.Encoding.IEncoding,System.Int32)">
            <summary>
            Creates new ByteArray instance from the specified encoding which can store 
            specified size of encoded values.
            ByteArray compacts and stores the byte values depending on the specified encoding.
            
            For example: Ncbi2NAEncoding contains four values, In this case two bits are sufficient 
            to store index of an encoded value thus four encoded values can be stored in to a byte.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
            <param name="encoding">Encoding to which the specified values are belongs to.</param>
            <param name="size">Required size of ByteArray.</param>
        </member>
        <member name="M:Bio.ByteArray.#ctor(Bio.ByteArray)">
            <summary>
            Constructor used for clone method.
            </summary>
            <param name="byteArray">ByteArray instance.</param>
        </member>
        <member name="M:Bio.ByteArray.Clone">
            <summary>
            Creates a clone copy of this instance.
            </summary>
            <returns>New instance of ByteArray.</returns>
        </member>
        <member name="M:Bio.ByteArray.SetEncoding(Bio.IO.Encoding.IEncoding)">
            <summary>
            Sets required fields from the specified encoding.
            </summary>
            <param name="encoding">IEncoding instance.</param>
        </member>
        <member name="M:Bio.ByteArray.SetByteValue(System.Int32,System.Byte)">
            <summary>
            Stores specified encoded value.
            </summary>
            <param name="index">Index of value.</param>
            <param name="value">Encoded value.</param>
        </member>
        <member name="M:Bio.ByteArray.GetByteValue(System.Int32)">
            <summary>
            Returns the encoded value for the specified index.
            </summary>
            <param name="index">Index of the value to be required.</param>
            <returns>Returns the encoded value.</returns>
        </member>
        <member name="M:Bio.ByteArray.GetBitsRequired(System.Int32)">
             <summary>
             Returns the number of bits required to store the specified value.
            
             For example if the input value is 3, the number of bits needed to store
             3 is 2 bits (Binary - 11). Hence this method would return 2 bits as the
             output.
             </summary>
             <param name="value">Value for which the number of required bits has to be determined.</param>
             <returns>Number of bits required to store the value.</returns>
        </member>
        <member name="M:Bio.ByteArray.GetByteMask(System.Int32,System.Int32)">
            <summary>
            Returns mask value that can be used while reading each value present in the compressed byte.
            Note that position is one based and starts from lefthand side of the byte.
            
            For example: 
            If 2 four bit values, 1011 and 1101 are placed in a byte then the value of byte will be
            10111101. 
            Following are the steps to read first value i.e 1011.
            
            Step1: "bitwise AND" with _maskForFirstFourBitValue.
                    10111101 &amp; 11110000 = 10110000
            Step2: Right shift the result from Step1 by 4 position.
                    10110000 >> 4 = 00001011
            </summary>
            <param name="position">Position of the value in the byte.</param>
            <param name="sizeInBits">Size of each value in bits.</param>
            <returns>Returns the mask value.</returns>
        </member>
        <member name="M:Bio.ByteArray.GetEnumerator">
            <summary>
            Returns enumerator for this instance.
            </summary>
            <returns>Returns IEnumerator for ByteArray.</returns>
        </member>
        <member name="M:Bio.ByteArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator for this instance.
            </summary>
            <returns>Returns IEnumerator for ByteArray.</returns>
        </member>
        <member name="M:Bio.ByteArray.System#ICloneable#Clone">
            <summary>
            Creates a clone copy of this instance.
            </summary>
            <returns>New instance of ByteArray.</returns>
        </member>
        <member name="P:Bio.ByteArray.Count">
            <summary>
            Total number of values stored in this instance.
            </summary>
        </member>
        <member name="P:Bio.ByteArray.Item(System.Int32)">
            <summary>
            Gets or sets the encoded value at specified index.
            Note that the encoded value should be from the encoding specified 
            while creating this instance, otherwise exception will occure.
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Encoded value.</returns>
        </member>
        <member name="T:Bio.ByteArrayEnumerator">
            <summary>
            Enumerator implementation for the ByteArray class
            </summary>
        </member>
        <member name="F:Bio.ByteArrayEnumerator._byteArray">
            <summary>
            Holds a ByteArray.
            </summary>
        </member>
        <member name="F:Bio.ByteArrayEnumerator._index">
            <summary>
            Current index of ByteArray.
            </summary>
        </member>
        <member name="M:Bio.ByteArrayEnumerator.#ctor(Bio.ByteArray)">
            <summary>
            Constructs an enumerator for a ByteArray object.
            </summary>
        </member>
        <member name="M:Bio.ByteArrayEnumerator.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:Bio.ByteArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item.
            </summary>
            <returns>True if the enumerator can advance. False if the end of the ByteArray is reached.</returns>
        </member>
        <member name="M:Bio.ByteArrayEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the ByteArray.
            </summary>
        </member>
        <member name="P:Bio.ByteArrayEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:Bio.ByteArrayEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:Bio.BasicSequenceInfo">
             <summary>
             This class is intended for incapsulation use within the various
             implementations of ISequence to centralize metadata storage and
             logic code.
             
             This class implements ICloneable interface. To create a copy 
             of the BasicSequenceInfo call Clone() method. For example:
             
             BasicSequenceInfo basicInfo = new BasicSequenceInfo();
             BasicSequenceInfo basicInfoCopy = basicInfo.Clone();
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files can be 
             de-serialized to restore the instances.
             While serializing any non serializable object in the metadata are ignored 
             thus the restored BasicSequenceInfo instance will contains null in place 
             of non serializable object.
             </summary>
        </member>
        <member name="M:Bio.BasicSequenceInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.BasicSequenceInfo.IndexOfNonGap(Bio.ISequence)">
            <summary>
            Gets the index of first non gap character in the specified sequence.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.IndexOfNonGap(Bio.ISequence,System.Int32)">
            <summary>
            Returns the position of the first item in the specified sequence from startPos that does not 
            have a Gap character.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.LastIndexOfNonGap(Bio.ISequence)">
            <summary>
            Gets the index of last non gap character in the specified sequence.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.LastIndexOfNonGap(Bio.ISequence,System.Int32)">
            <summary>
            Gets the index of last non gap character in the specified sequence within the specified end position.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.Clone">
            <summary>
            Creates a new BasicSequenceInfo that is a copy of the current BasicSequenceInfo.
            </summary>
            <returns>A new BasicSequenceInfo that is a copy of this BasicSequenceInfo.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.System#ICloneable#Clone">
            <summary>
            Creates a new BasicSequenceInfo that is a copy of the current BasicSequenceInfo.
            </summary>
            <returns>A new object that is a copy of this BasicSequenceInfo.</returns>
        </member>
        <member name="M:Bio.BasicSequenceInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.BasicSequenceInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the BasicSequenceInfo.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseOverlapAligner">
            <summary>
            Implements the pairwise overlap alignment algorithm described in Chapter 2 of
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseOverlapAligner._optScore">
            <summary>
            Stores optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseOverlapAligner._optScoreCells">
            <summary>
            Stores details of all cells with best score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary condition for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary condition for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses one gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetOptimalScoreSimple">
            <summary>
            Optimal score updated in FillCellSimple. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.SetOptimalScoreAffine">
            <summary>
            Optimal score updated in FillCellAffine. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback step for pairwise overlap alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment 
            of sequence1 with respect to sequence2.</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseOverlapAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Pairwise-Overlap algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseOverlapAligner.Description">
            <summary>
            Gets the description of the Pairwise-Overlap algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            PairwiseOverlapAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.BlastParameters">
            <summary>
            The parameters collection for the NCBI BLAST web service. Consists of a static set of
            allowed parameters and validation methods, and a collection of parameter/value
            pairs that have been validated and added to the instance.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.BlastParameters._parameters">
            <summary>
            List of request parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.BlastParameters._settings">
            <summary>
            List of configuration settings
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.#cctor">
            <summary>
            Initializes static members of the BlastParameters class.
            The static constructor defines the initial set of allowed parameters and values.
            </summary>
            <remarks>
            The following QBLAST parameters are not implemented, as they aren't applicable to
            the BLAST usage supported by this library (often because they aren't available in
            the XML BLAST results):
            ALIGNMENT_VIEW
            AUTO_FORMAT
            DESCRIPTIONS
            ENDPOINTS
            ENTREZ_LINKS_NEW_WINDOW
            FORMAT_ENTREZ_QUERY
            LAYOUT
            OTHER_ADVANCED
            PAGE
            QUERY_FILE
            RESULTS_FILE
            SHOW_OVERVIEW
            FORMAT_OBJECT
            NOHEADER
            NCBI_GI
            </remarks>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.AddIfAbsent(System.String,System.String)">
            <summary>
            Validate a parameter/value pair, and add them to Settings, unless
            a value is already present for that parameter.
            </summary>
            <param name="paramName">The parameter name</param>
            <param name="paramValue">The parameter value</param>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.Add(System.String,System.String)">
            <summary>
            Validate a parameter/value pair, and add them to Settings,
            replacing any value already present for that parameter.
            </summary>
            <param name="paramName">The parameter name</param>
            <param name="paramValue">The parameter value</param>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.ValidateForNcbiQBlast">
            <summary>
            Check the currently set parameters for validity as 
            NcbiQBlast parameters.
            </summary>
            <returns>A ParameterValidationResult. The ParametersObject member is not used.</returns>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.ValidateForEbiWuBlast">
            <summary>
            Validate the Parameters for EbiWu Blast service
            </summary>
            <returns>A ParameterValidationResult. On success, the ParametersObject
            member will contain a filled-in inputParameters object.</returns>
        </member>
        <member name="M:Bio.Web.Blast.BlastParameters.Add(System.String,System.String,System.Boolean)">
            <summary>
            Validate a parameter/value pair, then add it to the Settings collection. 
            The overwrite value determines whether the new value can overwrite an
            existing value for the same parameter.
            </summary>
            <param name="paramName">The parameter to set</param>
            <param name="paramValue">The parameter value</param>
            <param name="overwrite">If true, overwrite any existing value.</param>
        </member>
        <member name="P:Bio.Web.Blast.BlastParameters.Parameters">
            <summary>
            Gets the various parameters required for a BLAST service and the
            possible values for those parameters.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastParameters.Settings">
            <summary>
            Gets or sets settings is the collection of parameter/value pairs that
            have been validated and added to this instance. 
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.BlastParameters.UseBrowserProxy">
            <summary>
            Gets or Sets a value indicating whether to use default browser proxy 
            settings for web access
            </summary>
        </member>
        <member name="T:Bio.Web.Blast.WSWUBlastService">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.#ctor">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastp(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Beginblastp(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Endblastp(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastpAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastpAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastn(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Beginblastn(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Endblastn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastnAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.blastnAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getOutput(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetOutput(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetOutput(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getOutputAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getOutputAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXML(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetXML(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetXML(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXMLAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXMLAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.runWUBlast(Bio.Web.Blast.inputParams,Bio.Web.Blast.data[])">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BeginrunWUBlast(Bio.Web.Blast.inputParams,Bio.Web.Blast.data[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndrunWUBlast(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.runWUBlastAsync(Bio.Web.Blast.inputParams,Bio.Web.Blast.data[])">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.runWUBlastAsync(Bio.Web.Blast.inputParams,Bio.Web.Blast.data[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.checkStatus(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegincheckStatus(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndcheckStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.checkStatusAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.checkStatusAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.poll(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Beginpoll(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Endpoll(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.pollAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.pollAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getResults(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetResults(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetResults(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getResultsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getResultsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getIds(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetIds(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetIds(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getIdsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getIdsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getMatrices">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetMatrices(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetMatrices(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getMatricesAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getMatricesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getPrograms">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetPrograms(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetPrograms(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getProgramsAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getProgramsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getDatabases">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetDatabases(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetDatabases(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getDatabasesAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getDatabasesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSort">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetSort(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetSort(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSortAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSortAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getStats">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetStats(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetStats(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getStatsAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getStatsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXmlFormats">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetXmlFormats(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetXmlFormats(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXmlFormatsAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getXmlFormatsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSensitivity">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetSensitivity(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetSensitivity(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSensitivityAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getSensitivityAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getFilters">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegingetFilters(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EndgetFilters(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getFiltersAsync">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.getFiltersAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.polljob(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Beginpolljob(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.Endpolljob(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.polljobAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.polljobAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.doWUBlast(Bio.Web.Blast.inputParams,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.BegindoWUBlast(Bio.Web.Blast.inputParams,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.EnddoWUBlast(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.doWUBlastAsync(Bio.Web.Blast.inputParams,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.doWUBlastAsync(Bio.Web.Blast.inputParams,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Bio.Web.Blast.WSWUBlastService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.blastpCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.blastnCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getOutputCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getXMLCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.runWUBlastCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.checkStatusCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.pollCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getResultsCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getIdsCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getMatricesCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getProgramsCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getDatabasesCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getSortCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getStatsCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getXmlFormatsCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getSensitivityCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.getFiltersCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.polljobCompleted">
            <remarks/>
        </member>
        <member name="E:Bio.Web.Blast.WSWUBlastService.doWUBlastCompleted">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.inputParams">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.program">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.database">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.matrix">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.exp">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.echofilter">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.filter">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.numal">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.scores">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.sensitivity">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.sort">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.stats">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.strand">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.outformat">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.topcombon">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.appxml">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.async">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.inputParams.email">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.outData">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.print_name">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.name">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.selected">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.data_type">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.input_type">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.outData.search_type">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.WSFile">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.WSFile.type">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.WSFile.ext">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.data">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.data.type">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.data.content">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.blastpCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.blastpCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.blastpCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.blastnCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.blastnCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.blastnCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getOutputCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getOutputCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getOutputCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getXMLCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getXMLCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getXMLCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.runWUBlastCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.runWUBlastCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.runWUBlastCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.checkStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.checkStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.checkStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.pollCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.pollCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.pollCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getResultsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getResultsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getResultsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getIdsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getIdsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getIdsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getMatricesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getMatricesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getMatricesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getProgramsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getProgramsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getProgramsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getDatabasesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getDatabasesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getDatabasesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getSortCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getSortCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getSortCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getStatsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getStatsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getStatsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getXmlFormatsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getXmlFormatsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getXmlFormatsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getSensitivityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getSensitivityCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getSensitivityCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getFiltersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.getFiltersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.getFiltersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.polljobCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.polljobCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.polljobCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.doWUBlastCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.doWUBlastCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Bio.Web.Blast.doWUBlastCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Bio.Web.Blast.EbiWuBlastHandler">
            <summary>
            This class implements IBlastService interface and defines all the atomic
            operation required by the interface. Each method necessarily 
            invokes/instantiates an atomic operation on the server (Ebi Wu server).
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.RETRYINTERVAL">
            <summary>
            Default interval of time in seconds to check the status of job
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.NOOFRETRIES">
            <summary>
            Default number of retries to be made to check the status
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.STATUSPENDING">
            <summary>
            Job status is Queued
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.STATUSRUNNING">
            <summary>
            Job status is Running
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.STATUSDONE">
            <summary>
            Job Status is Completed successfully
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETERDATABASE">
            <summary>
            Database parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETERPROGRAM">
            <summary>
            Program parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETEREMAIL">
            <summary>
            EMAIL parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETERFILTER">
            <summary>
            FILTER parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETERALIGNMENTS">
            <summary>
            Number of alignments to return parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETERMATRIXNAME">
            <summary>
            Similarity Matrix name parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.PARAMETEREXPECT">
            <summary>
            Expect value parameter
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.SEQUENCETYPE">
            <summary>
            Type of input provided to blast service
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.APPXMLYES">
            <summary>
            Xml output type
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATADATABASES">
            <summary>
            Databases meta data type
            (Gets the list of databases)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATAFILTERS">
            <summary>
            Filters meta data type
            (Gets the list of filters)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATAMATRICES">
            <summary>
            Matrices meta data type
            (Gets the list of matrices)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATAPROGRAMS">
            <summary>
            Programs meta data type
            (Gets the list of programs)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATASENSITIVITY">
            <summary>
            Sensitivity meta data type
            (Gets the list of sensitivity)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATASORT">
            <summary>
            Sort meta data type
            (Gets the list of sort supported)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATASTATS">
            <summary>
            Stats meta data type
            (Gets the list of Statistics)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler.METADATAXMLFORMATS">
            <summary>
            XmlFormats meta data type
            (Gets the list of xml formats)
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler._blastClient">
            <summary>
            WSWUB blast client object
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler._blastParser">
            <summary>
            Parser object that can parse the Blast Output
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler._workerThread">
            <summary>
            Background worker thread that tracks the status of job and notifies
            user on completion.
            </summary>
        </member>
        <member name="F:Bio.Web.Blast.EbiWuBlastHandler._configuration">
            <summary>
            Settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.#ctor(Bio.Web.Blast.IBlastParser,Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the EbiWuBlastHandler class.
            </summary>
            <param name="parser">Parser to parse the Blast output</param>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.#ctor(Bio.Web.ConfigParameters)">
            <summary>
            Initializes a new instance of the EbiWuBlastHandler class.
            </summary>
            <param name="configurations">Configuration Parameters</param>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.#ctor">
            <summary>
            Initializes a new instance of the EbiWuBlastHandler class.
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.SubmitRequest(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters 
            and sequence. Implementation should make use of the Bio.IO formatters 
            to convert the sequence into the web interface compliant sequence format.
            This method performs parameter validation and throw Exception on invalid input.
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.SubmitRequest(System.Collections.Generic.IList{Bio.ISequence},Bio.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the Bio.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequences">List of sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.GetRequestStatus(System.String)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.GetResult(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Gets the search results for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into MBF
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.FetchResultsSync(System.String,Bio.Web.Blast.BlastParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="requestIdentifier">Identifier for the request of interest</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.CancelRequest(System.String)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.GetServiceMetadata(System.String)">
            <summary>
            Get metadata of various sorts exposed by the service.
            </summary>
            <param name="kind">The kind of metadata to fetch.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.GetRequestParameter(Bio.ISequence,Bio.Web.Blast.BlastParameters)">
            <summary>
            Get the blast service request object with all the request parameter set
            </summary>
            <param name="sequence">Input sequece</param>
            <param name="parameters">Blast parameters</param>
            <returns>Blast service request object</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.ProcessRequestThread(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Process the request. This method takes care of executing the rest of the steps
            to complete the blast search request in a background thread. Which involves
            1. Submit the job to server
            2. Ping the service with the request identifier to get the status of request.
            3. Repeat step 1, at "RetryInterval" for "RetryCount" till a "success"/"failure" 
                status.
            4. If the status is a "failure" raise an completed event to notify the user 
                with appropriate details.
            5. If the status "success". Get the output of search from server in xml format.
            6. Parse the xml and the framework object model.
            7. Raise the completed event and notify user with the output.
            </summary>
            <param name="sender">Client request EBIWU Blast search</param>
            <param name="argument">Thread event argument</param>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.CompletedRequestThread(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is invoked when request status is completed
            </summary>
            <param name="sender">Invoker of the event</param>
            <param name="eventArgument">Event arguments</param>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.ValidateParameters(Bio.Web.Blast.BlastParameters)">
            <summary>
            Check the currently set parameters for validity
            </summary>
            <param name="parameters">Blast input parameters</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.InitializeConfiguration">
            <summary>
            Initialize the configuration properties
            </summary>
        </member>
        <member name="M:Bio.Web.Blast.EbiWuBlastHandler.InitializeBlastClient">
            <summary>
            Initialize EBIWU Blast client
            </summary>
        </member>
        <member name="E:Bio.Web.Blast.EbiWuBlastHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.Configuration">
            <summary>
            Gets or sets settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.Name">
            <summary>
            Gets user-friendly implementation name
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.Description">
            <summary>
            Gets user-friendly implementation description
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.Parser">
            <summary>
            Gets an instance of object that can parse the Blast Output
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.RetryInterval">
            <summary>
            Gets or sets the number of seconds between retries when a service request is pending. (This
            specifies the first interval, and subsequent retries occur at increasing multiples.)
            The caller can override the default by setting ConfigurationParameters.RetryInterval.
            </summary>
        </member>
        <member name="P:Bio.Web.Blast.EbiWuBlastHandler.RetryCount">
            <summary>
            Gets or sets the number of times to retry when a service request is pending. The caller
            can override the default value by setting ConfigurationParameters.RetryCount.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.WriteGenBankSection(System.String,System.String,System.String,System.IO.TextWriter)">
            Writes a header and data string as a GenBank header section, indenting the data of
            each line to the length of the given indent string.
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.LocationBuilder">
            <summary>
            Location builder is used to build location string from the location object persent in the feature items.
            By default an instance of LocationBuilder class is used to get the location string.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.Name">
            <summary>
            Gets the type of Formatter i.e GenBank.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GanBank file.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.Description">
            <summary>
            Gets the description of GenBank formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankFormatter class acheives.
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Edge">
            <summary>
            Edge: a tree edge and its descendant subtree.
            Edge --> Distance/Length
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Edge.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Edge.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Edge as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Edge.Distance">
            <summary>
            Length of a tree edge.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceFormatters">
            <summary>
            SequenceFormatter class is an abstraction class which provides instances
            and lists of all Formatter currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.genBank">
            <summary>
            A singleton instance of GenBankFormatter class which is capable of
            saving a ISequence according to the GenBank file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.fasta">
            <summary>
            A singleton instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.fastq">
            <summary>
            A singleton instance of FastQFormatter class which is capable of
            saving a IQualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.gff">
            <summary>
            A singleton instance of GffFormatter class which is capable of
            saving a ISequence according to the GFF file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.all">
            <summary>
            List of all supported sequence formatters.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.FindFormatterByFile(System.String)">
            <summary>
            Returns formatter which supports the specified file.
            </summary>
            <param name="fileName">File name for which the formatter is required.</param>
            <returns>If found returns the formatter as ISequenceFormatter else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.GenBank">
            <summary>
            Gets an instance of GenBankFormatter class which is capable of
            saving a ISequence according to the GenBank file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.Fasta">
            <summary>
            Gets an instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.FastQ">
            <summary>
            Gets an instance of FastQFormatter class which is capable of
            saving a IQualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.Gff">
            <summary>
            Gets an instance of GffFormatter class which is capable of
            saving a ISequence according to the GFF file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.All">
            <summary>
            Gets the list of all formatters which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceSource">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.#ctor(Bio.IO.GenBank.SequenceSource)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceSource instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.Clone">
            <summary>
            Creates a new SequenceSource that is a copy of the current SequenceSource.
            </summary>
            <returns>A new SequenceSource that is a copy of this SequenceSource.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceSource that is a copy of the current SequenceSource.
            </summary>
            <returns>A new object that is a copy of this SequenceSource.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSource.CommonName">
            <summary>
            Common name of the organism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSource.Organism">
            <summary>
            Provides Genus, Species and taxonomic classification levels 
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscRecombination">
            <summary>
            Site of any generalized, site-specific or replicative recombination event where there is a breakage and 
            reunion of duplex DNA that cannot be described by other recombination keys or qualifiers of source key (/proviral).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRecombination feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(System.String)">
            <summary>
            Creates new MiscRecombination feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(Bio.IO.GenBank.MiscRecombination)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRecombination instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.Clone">
            <summary>
            Creates a new MiscRecombination that is a copy of the current MiscRecombination.
            </summary>
            <returns>A new MiscRecombination that is a copy of this MiscRecombination.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Suffix">
            <summary>
            Data storage representation of an Suffix object in Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Suffix._startIndex">
            <summary>
            Index of the first character
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Suffix._endIndex">
            <summary>
            Index of the last character
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Suffix._originNode">
            <summary>
            Parent node value;
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Suffix._sequence">
            <summary>
            Sequence of Suffix Tree
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Suffix.#ctor(Bio.ISequence,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Suffix class
            Create a edge based on edge data passed
            </summary>
            <param name="sequence">Sequence of Suffix Tree</param>
            <param name="originNode">Origin Node</param>
            <param name="startIndex">Index of first character of Suffix</param>
            <param name="endIndex">Index of last charater of Suffix</param>
        </member>
        <member name="P:Bio.Algorithms.Suffix.StartIndex">
            <summary>
            Gets or sets index of the first character
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Suffix.EndIndex">
            <summary>
            Gets or sets index of the last character
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Suffix.OriginNode">
            <summary>
            Gets or sets parent node value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Suffix.Sequence">
            <summary>
            Gets sequence of Suffix Tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Suffix.IsExplicit">
            <summary>
            Gets a value indicating whether the Suffix is Explicit
            Explicit tree have all the branches with symbol character included
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Node">
            <summary>
            Data storage representation of a Node in Suffix Tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Node._count">
            <summary>
            Count of nodes
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Node._suffixNode">
            <summary>
            suffix node value
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Node.#ctor">
            <summary>
            Initializes a new instance of the Node class
                Set the node to root node (-1)
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Node.SuffixNode">
            <summary>
            Gets or sets suffix node value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Node.Count">
            <summary>
            Gets or sets the count of nodes
            </summary>
        </member>
    </members>
</doc>
