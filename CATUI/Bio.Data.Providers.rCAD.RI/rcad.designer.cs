#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bio.Data.Providers.rCAD.RI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rCAD")]
	public partial class rcadDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlignment(Alignment instance);
    partial void UpdateAlignment(Alignment instance);
    partial void DeleteAlignment(Alignment instance);
    partial void InsertSequenceMain(SequenceMain instance);
    partial void UpdateSequenceMain(SequenceMain instance);
    partial void DeleteSequenceMain(SequenceMain instance);
    partial void InsertSequenceType(SequenceType instance);
    partial void UpdateSequenceType(SequenceType instance);
    partial void DeleteSequenceType(SequenceType instance);
    partial void InsertCellLocationInfo(CellLocationInfo instance);
    partial void UpdateCellLocationInfo(CellLocationInfo instance);
    partial void DeleteCellLocationInfo(CellLocationInfo instance);
    partial void InsertTaxonomy(Taxonomy instance);
    partial void UpdateTaxonomy(Taxonomy instance);
    partial void DeleteTaxonomy(Taxonomy instance);
    partial void InsertTaxonomyNamesOrdered(TaxonomyNamesOrdered instance);
    partial void UpdateTaxonomyNamesOrdered(TaxonomyNamesOrdered instance);
    partial void DeleteTaxonomyNamesOrdered(TaxonomyNamesOrdered instance);
    #endregion
		
		public rcadDataContext() : 
				base(global::Bio.Data.Providers.rCAD.RI.Properties.Settings.Default.rCADConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public rcadDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rcadDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rcadDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rcadDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Alignment> Alignments
		{
			get
			{
				return this.GetTable<Alignment>();
			}
		}
		
		public System.Data.Linq.Table<vAlignmentGridUngapped> vAlignmentGridUngappeds
		{
			get
			{
				return this.GetTable<vAlignmentGridUngapped>();
			}
		}
		
		public System.Data.Linq.Table<SequenceMain> SequenceMains
		{
			get
			{
				return this.GetTable<SequenceMain>();
			}
		}
		
		public System.Data.Linq.Table<SequenceType> SequenceTypes
		{
			get
			{
				return this.GetTable<SequenceType>();
			}
		}
		
		public System.Data.Linq.Table<CellLocationInfo> CellLocationInfos
		{
			get
			{
				return this.GetTable<CellLocationInfo>();
			}
		}
		
		public System.Data.Linq.Table<Taxonomy> Taxonomies
		{
			get
			{
				return this.GetTable<Taxonomy>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyNamesOrdered> TaxonomyNamesOrdereds
		{
			get
			{
				return this.GetTable<TaxonomyNamesOrdered>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alignment")]
	public partial class Alignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlnID;
		
		private byte _SeqTypeID;
		
		private string _AlignmentName;
		
		private int _NextColumnNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlnIDChanging(int value);
    partial void OnAlnIDChanged();
    partial void OnSeqTypeIDChanging(byte value);
    partial void OnSeqTypeIDChanged();
    partial void OnAlignmentNameChanging(string value);
    partial void OnAlignmentNameChanged();
    partial void OnNextColumnNumberChanging(int value);
    partial void OnNextColumnNumberChanged();
    #endregion
		
		public Alignment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlnID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlnID
		{
			get
			{
				return this._AlnID;
			}
			set
			{
				if ((this._AlnID != value))
				{
					this.OnAlnIDChanging(value);
					this.SendPropertyChanging();
					this._AlnID = value;
					this.SendPropertyChanged("AlnID");
					this.OnAlnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqTypeID", DbType="TinyInt NOT NULL")]
		public byte SeqTypeID
		{
			get
			{
				return this._SeqTypeID;
			}
			set
			{
				if ((this._SeqTypeID != value))
				{
					this.OnSeqTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeqTypeID = value;
					this.SendPropertyChanged("SeqTypeID");
					this.OnSeqTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlignmentName", DbType="VarChar(8000)")]
		public string AlignmentName
		{
			get
			{
				return this._AlignmentName;
			}
			set
			{
				if ((this._AlignmentName != value))
				{
					this.OnAlignmentNameChanging(value);
					this.SendPropertyChanging();
					this._AlignmentName = value;
					this.SendPropertyChanged("AlignmentName");
					this.OnAlignmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextColumnNumber", DbType="Int NOT NULL")]
		public int NextColumnNumber
		{
			get
			{
				return this._NextColumnNumber;
			}
			set
			{
				if ((this._NextColumnNumber != value))
				{
					this.OnNextColumnNumberChanging(value);
					this.SendPropertyChanging();
					this._NextColumnNumber = value;
					this.SendPropertyChanged("NextColumnNumber");
					this.OnNextColumnNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vAlignmentGridUngapped")]
	public partial class vAlignmentGridUngapped
	{
		
		private int _SeqID;
		
		private int _AlnID;
		
		private int _LogicalColumnNumber;
		
		private char _BioSymbol;
		
		private int _SequenceIndex;
		
		public vAlignmentGridUngapped()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqID", DbType="Int NOT NULL")]
		public int SeqID
		{
			get
			{
				return this._SeqID;
			}
			set
			{
				if ((this._SeqID != value))
				{
					this._SeqID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlnID", DbType="Int NOT NULL")]
		public int AlnID
		{
			get
			{
				return this._AlnID;
			}
			set
			{
				if ((this._AlnID != value))
				{
					this._AlnID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogicalColumnNumber", DbType="Int NOT NULL")]
		public int LogicalColumnNumber
		{
			get
			{
				return this._LogicalColumnNumber;
			}
			set
			{
				if ((this._LogicalColumnNumber != value))
				{
					this._LogicalColumnNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BioSymbol", DbType="Char(1) NOT NULL")]
		public char BioSymbol
		{
			get
			{
				return this._BioSymbol;
			}
			set
			{
				if ((this._BioSymbol != value))
				{
					this._BioSymbol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIndex", DbType="Int NOT NULL")]
		public int SequenceIndex
		{
			get
			{
				return this._SequenceIndex;
			}
			set
			{
				if ((this._SequenceIndex != value))
				{
					this._SequenceIndex = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequenceMain")]
	public partial class SequenceMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeqID;
		
		private int _TaxID;
		
		private byte _LocationID;
		
		private byte _SeqTypeID;
		
		private int _SeqLength;
		
		private string _Source;
		
		private string _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqIDChanging(int value);
    partial void OnSeqIDChanged();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnLocationIDChanging(byte value);
    partial void OnLocationIDChanged();
    partial void OnSeqTypeIDChanging(byte value);
    partial void OnSeqTypeIDChanged();
    partial void OnSeqLengthChanging(int value);
    partial void OnSeqLengthChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public SequenceMain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeqID
		{
			get
			{
				return this._SeqID;
			}
			set
			{
				if ((this._SeqID != value))
				{
					this.OnSeqIDChanging(value);
					this.SendPropertyChanging();
					this._SeqID = value;
					this.SendPropertyChanged("SeqID");
					this.OnSeqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="Int NOT NULL")]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="TinyInt NOT NULL")]
		public byte LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqTypeID", DbType="TinyInt NOT NULL")]
		public byte SeqTypeID
		{
			get
			{
				return this._SeqTypeID;
			}
			set
			{
				if ((this._SeqTypeID != value))
				{
					this.OnSeqTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeqTypeID = value;
					this.SendPropertyChanged("SeqTypeID");
					this.OnSeqTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqLength", DbType="Int NOT NULL")]
		public int SeqLength
		{
			get
			{
				return this._SeqLength;
			}
			set
			{
				if ((this._SeqLength != value))
				{
					this.OnSeqLengthChanging(value);
					this.SendPropertyChanging();
					this._SeqLength = value;
					this.SendPropertyChanged("SeqLength");
					this.OnSeqLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(8000)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(8000)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequenceType")]
	public partial class SequenceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SeqTypeID;
		
		private string _MoleculeType;
		
		private string _GeneType;
		
		private string _GeneName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqTypeIDChanging(byte value);
    partial void OnSeqTypeIDChanged();
    partial void OnMoleculeTypeChanging(string value);
    partial void OnMoleculeTypeChanged();
    partial void OnGeneTypeChanging(string value);
    partial void OnGeneTypeChanged();
    partial void OnGeneNameChanging(string value);
    partial void OnGeneNameChanged();
    #endregion
		
		public SequenceType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte SeqTypeID
		{
			get
			{
				return this._SeqTypeID;
			}
			set
			{
				if ((this._SeqTypeID != value))
				{
					this.OnSeqTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeqTypeID = value;
					this.SendPropertyChanged("SeqTypeID");
					this.OnSeqTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoleculeType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MoleculeType
		{
			get
			{
				return this._MoleculeType;
			}
			set
			{
				if ((this._MoleculeType != value))
				{
					this.OnMoleculeTypeChanging(value);
					this.SendPropertyChanging();
					this._MoleculeType = value;
					this.SendPropertyChanged("MoleculeType");
					this.OnMoleculeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GeneType
		{
			get
			{
				return this._GeneType;
			}
			set
			{
				if ((this._GeneType != value))
				{
					this.OnGeneTypeChanging(value);
					this.SendPropertyChanging();
					this._GeneType = value;
					this.SendPropertyChanged("GeneType");
					this.OnGeneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this.OnGeneNameChanging(value);
					this.SendPropertyChanging();
					this._GeneName = value;
					this.SendPropertyChanged("GeneName");
					this.OnGeneNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CellLocationInfo")]
	public partial class CellLocationInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _LocationID;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(byte value);
    partial void OnLocationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CellLocationInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Taxonomy")]
	public partial class Taxonomy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxID;
		
		private int _ParentTaxID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnParentTaxIDChanging(int value);
    partial void OnParentTaxIDChanged();
    #endregion
		
		public Taxonomy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentTaxID", DbType="Int NOT NULL")]
		public int ParentTaxID
		{
			get
			{
				return this._ParentTaxID;
			}
			set
			{
				if ((this._ParentTaxID != value))
				{
					this.OnParentTaxIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTaxID = value;
					this.SendPropertyChanged("ParentTaxID");
					this.OnParentTaxIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyNamesOrdered")]
	public partial class TaxonomyNamesOrdered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxID;
		
		private string _ScientificName;
		
		private string _LineageName;
		
		private int _Level;
		
		private int _SortOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnScientificNameChanging(string value);
    partial void OnScientificNameChanged();
    partial void OnLineageNameChanging(string value);
    partial void OnLineageNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public TaxonomyNamesOrdered()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScientificName", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string ScientificName
		{
			get
			{
				return this._ScientificName;
			}
			set
			{
				if ((this._ScientificName != value))
				{
					this.OnScientificNameChanging(value);
					this.SendPropertyChanging();
					this._ScientificName = value;
					this.SendPropertyChanged("ScientificName");
					this.OnScientificNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineageName", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string LineageName
		{
			get
			{
				return this._LineageName;
			}
			set
			{
				if ((this._LineageName != value))
				{
					this.OnLineageNameChanging(value);
					this.SendPropertyChanging();
					this._LineageName = value;
					this.SendPropertyChanged("LineageName");
					this.OnLineageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
